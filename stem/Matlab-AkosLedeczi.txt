welcom to comput program with matlab .
thi is lesson on , introduct to matlab .
my name is mike fitzpatrick , and i'm come to you from vanderbilt univers in nashvil , tennesse .
i'll be your lead instructor , and i'll be support by ako ledeczi and robert taira .
all three of us ar on the faculti of vanderbilt's school of engin .
and we've put togeth a cours whose purpos is to teach comput program to peopl who have littl or no experi with program .
the level of the cours equal that of an introductori , first year colleg cours .
the length is nine week , which includ eight week of video lectur and on week for a final homework submiss .
if you follow along with us , try all the exampl that you see step by step on the screen , take the quizz , and do the homework , then at the end of these nine week , you'll be abl to program a comput .
you'll be good at it , and you should have fun do it .
to program a comput , you have to us a program languag .
the first languag were complic affair of string of on and zero , of cryptic code word and number .
and then in <num> , all that chang .
a languag wa invent that wa much more like a human languag .
it wa call fortran .
it purpos wa to make program easier , especi for solv numer problem .
sinc then , hundr of such languag have been develop .
and in the 1970s , a new wave of them began .
the most success of these were c , c , java , and c .
and thei're still heavili us languag .
thei're us especi for write veri larg program , by which i mean program with hundr of thousand or million of statement in them .
these program ar the shrinkwrap product us by non programm , thing like word processor , spreadsheet , web browser , game , oper system , and the like .
in the midst of thi new wave , anoth languag appear call matlab .
and that's the languag we're go to us in thi cours .
matlab's purpos wa to make program easier , especi for solv numer problem .
but you mai have notic that wa exactli the purpos of fortran .
so , have we come full circl ?
no , becaus matlab is far easier to program than fortran .
i know .
i've us them both .
so where did matlab come from ?
well , it sprang from the mind of on person , an expert in fortran , by the wai , name cleve moler .
professor moler wa teach student at the univers of new mexico to solv numer problem with fortran .
and thei were spend wai too much troubl struggl with the languag .
so , he invent matlab .
and it soon becam so popular that moler team up with an engin outsid academ name jack littl to form a compani to make it avail to the world .
thei name the compani the mathwork .
it wa form in california in <num> and it had on product , matlab .
well , that compani is aliv and well todai in natick , massachusett <num> , <num> mile from california .
and todai , it ha <num> product , all base on matlab , and over <num> million user worldwid .
and it's taught in <num> , <num> univers , includ vanderbilt .
matlab is clearli have a big impact on the world .
in <num> , the institut of electr and electron engin recogn that impact by give dr .
moler it comput pioneer award .
thei give thi award out onc a year .
and thei name it for improv the qualiti of mathemat softwar , make it more access , and creat matlab .
and that bring us to thi cours .
comput program with matlab is our effort to add to the impact of moler's creation by us it to make comput program more access to you .
there's no requir textbook for thi cours , but there is a recommend on .
as you can see , the titl is the same as that of the cours .
and ako ledeczi and i ar the author .
so it's no surpris that it's the on we're recommend .
thi is an ebook , no paper is involv .
it's been us at vanderbilt sinc <num> , and previou version of it were us sinc <num> .
the book is organ into three major part , which in the ibook style ar call chapter .
thi cours cover chapter on and two .
the remain chapter , three , cover subject that ar beyond the scope of thi cours , but you'll be abl to continu through that chapter on your own after you've complet thi cours .
the book is avail onlin at cs103 . net .
you'll find two version there an ibook for appl's ipad and mac , and a pdf for ani other devic .
and it cost <num> . <num> each .
to make our textbook and our cours more effect , we approach matlab program as part of the disciplin of comput scienc .
comput scientist have spent over <num> year develop a concis set of concept and a consist vocabulari to describ all aspect of comput program .
and in both thi book and thi cours , we us those concept and that vocabulari to introduc you to comput program .
thi approach will give you an idea of how comput scientist think , and it'll make it a lot easier to learn matlab .
well , let's take a look at the ibook .
i'm go to show it on thi macbook here , but the ipad ha the same featur .
the onli differ is that instead of click a mous , you touch the screen on the ipad .
so after you've purchas it and download it , it should be in your ibook collect .
let's find it here .
there it is , i've got it under comput program .
and if we doubl click it , it open up , and then it take you to thi page .
now we see down at the bottom a scrollabl list of page .
there's page at the front , here's the prefac , here's get start , procedur program , advanc concept .
i'm not go to click on those .
i'm go to go up here and click thi tabl of content here .
let's click thi littl arrow next to get start .
thi is chapter on .
and we see section on of chapter on and two , introduct to matlab , matric and oper .
we'll spend a lot of time near the begin of thi cours right here in matric and oper .
so let's go there .
at the bottom , we see we're on page <num> .
let's go to page <num> .
you look around here , you'll notic some lowercas word in blue type .
if we click on of these , let's click matrix , we see a definit .
a two dimension rectangular arrang of number , also known as a two dimension arrai .
and there's two link .
on sai glossari ; on sai dictionari .
let's click the glossari .
that's the glossari of thi book .
and these ar the , you might sai , offici definit that will help you the most as studi aid when you're try to understand program .
and here's a link that take you to the first occurr or the defin occurr of the term in the text , right back here where we were .
there ar other special studi aid , includ set bookmark .
just click at the top up here , right on that littl bookmark icon .
it turn red , indic that thi page is now bookmark .
let's bookmark a few more page .
i'll go forward a bit and bookmark thi on .
and mayb we're done .
now if you go up here and click on thi littl arrow just to the right of the bookmark , you see a list of your bookmark .
<num> , <num> , let's go to <num> , okai ?
let's go to <num> .
hm , that's where we start .
highlight and annot ar both easi too .
just click and hold the mous while you slide over what you want .
and mayb i want to put a note .
i want to try thi in matlab .
and down here , i'm go to highlight that in pink .
to see all your highlight and annot collect togeth , click up here at the top of the window on thi page icon here .
the section call note show up .
thei're exactli the two highlight we just did , and it show what page thei're on .
if you want to delet on of these , you just go to the on you want to delet , click on it .
you can remov the whole thing or remov part of it .
on last standard ibook studi featur is found by click the studi button up here on the left corner .
it'll give you the annot like that .
you can click here , then we get to glossari term .
flip the card and it tell you the definit .
and you can go to on after the other and , and try them .
click done will get us back to the book .
and if you want to close the note section , just click thi littl page icon again , and it's gone .
okai , that's a look at gener ibook studi featur , but there's on essenti studi techniqu that we've left out , practic what you're learn by work problem .
let's go to the tabl of content again .
and loop .
let's click practic problem down here .
there , and you see these littl question mark here .
well , those ar where the answer ar .
so for exampl , problem <num> over here , if i click thi littl question mark , i find the answer .
i'll close that .
there's on last thing i want to show you about the ibook .
it includ anim .
somewher in thi book is an exampl call surfac plot anim .
well , up here in the right corner , we see a littl search icon .
let's click that .
i'm go to search for that surfac plot anim .
hei , it show up right there .
let's go there .
there's a plai button here .
let's click that .
now that's kind of cool .
okai .
enough with the preliminari , it's time to get down to busi here .
after you've pick the textbook and download it , download matlab and instal it on your comput , you're readi to go .
so what's next ?
let's run matlab .
you should be abl to find matlab icon somewher to click or doubl click .
for exampl , it might be on your start menu in window or your launchpad on a macbook or on it's dock .
or it might be on your desktop as in thi case .
as a matter of fact there ar three icon on thi macbook desktop , on for each of three version of matlab that have been instal on thi comput .
you can see here r2014b , r2014a and r2012b .
you doubl click ani on of them , sai , r2014b and matlab start up .
and the matlab program environ window open up , thi window is also call a desktop , it's matlab's desktop and we'll be do a lot of work on it .
the gener name for desktop is graphic user interfac or us the initi as most programm do .
we can call it a gui , spell g u i .
like ani decent gui , we can move it around .
let's see here .
there you go .
now we can chang it shape and size by drag the edg of the corner .
plai around that wai .
i'm go to put it right where i like it .
there .
i'm us up the whole screen that wai .
so , i've got as much space as i possibl can get .
insid thi gui , we see three subwindow .
the current folder over here on the left , the command window on your right and the workspac .
and when i click in them , thei're label at the top light up .
mean that i made them the activ window .
thi arrang with the current folder on the left and workspac window on the right is the default layout for r2014a and b .
the default is somewhat differ for earlier version , which you might have .
a lot of these will includ a fourth window call the command histori window .
it'll probabl be , be over at the bottom right or the bottom left .
you can have that fourth window in the r2014 a and b version too .
it's just not visibl in the default layout .
we'll show you how to do that in a littl bit .
also , the window default can be a bit differ form the version for the appl oper system .
these differ ar small enough though , that thei're unlik to caus you ani troubl .
so we'll just us on version in thi cours , 2014b , which we're look at right now .
that's the latest version avail as we're record these lesson , which you can see up here is in the late fall of <num> .
well , let's look at the current folder over here on the left .
thi is the place where matlab save program into file .
and it's also the first place , it'll look when it's look for file that hold program that it need .
we can chang the current folder to be anoth folder .
we can , for exampl , move up into the enclos folder , which is call the parent by click here on thi tini littl folder icon .
it's got a littl black arrow point up on it or we can go into an enclos folder .
let's see .
where were we ?
matlab , by click on that .
if you rather navig us your oper system's folder explor , you can get to that by click thi littl icon here with the littl green arrow point down .
i'm go to do that .
and i'm go to navig to a folder where i'm store file for thi cours .
let's see .
come over here in tutori .
so , i'll click open and now you see i'm in a differ directori here .
folder and directori ar synonym name for the same thing .
and over here , right up here , matlab provid an address bar , show you the current folder , which is right here .
it's parent , it's grandpar and so forth .
you can move to ani of these folder by click them .
but you can't go back down , unless you come over here and then click .
and wai over here at the far right , you see thi littl teeni triangl .
you can click on that and you can see recent place you've been .
you'll notic we were here at on point , but i want to be here , so i'm go to click there .
so that put me back in the tutori folder as you can see here .
and sinc thi is lesson on , i want to go to lesson on .
so , i'm go to doubl click that on .
now we're in the folder call lesson on , which is a child of the parent tutori .
okai .
now we know how to move around .
we're final readi to type our first matlab command .
to do that , we first click somewher in the command window .
if we click anywher in the command window , we'll see a littl vertic bar .
it start blink on and off just to the right of thi pair of greater than sign here .
that pair of greater than sign is matlab's prompt .
well , and what's a prompt ?
well , let's look it up in the textbook .
there .
we click on glossari .
and we see the first definit in the glossari , that's abstract class .
that's an advanc concept that come toward the end of thi book , where we introduc the object orient program construct in matlab .
object orient program is on of those advanc concept that we mention that ar beyond the scope of thi text .
so let type prompt , which is what we're look for into thi littl search window here and then we'll click on prompt .
and there's our definit .
prompt is a symbol or a symbol print by a program , matlab is an exampl .
to indic that it's readi for input from the user of the program .
matlab us the prompt greater than greater than .
i want you to notic someth .
if we go down here we can click here to find out where thi term wa introduc in the textbook and there it is .
and we see that it's right there where the command window is first introduc .
almost ani textbook that talk about the command window is go to start off by talk about thi prompt and that's what we do in the textbook and that's what we do in the cours .
so let's get back to matlab .
befor we type our first command right here , you should know that if you ever need to regain control from matlab , becaus it's taken too long to process a command .
you can type ctrl c .
that's done by hold down the ctrl kei , which mai just have c t r l written on it .
and while you hold that kei down , hit the c kei .
there .
i did it , but noth much happen other than go to a new line .
but i can tell you , when you have made a mistak that caus matab to pour out million of number on the screen and it seem to be go on forev , well like thi .
suppos i type ran , we will explain ran later .
1e7 , we'll explain that a later .
i hit return and oh , my good , so the number ar just pour out seem to be go on forev .
and so , i'm go to stop thi nonsens with ctrl c .
there , i hit ctrl c .
and stop matlab .
ctrl c is the all power command that matlab obei .
also , if you need to close matlab down complet , you can type quit , like thi .
i'm not go to type quit so i'm go to hit some delet here and get rid of it .
or you can simpli close matlab's window by click in the x up here .
it's on the left in the appl oper system .
it's over on the right in the window oper system .
but thi is no time to quit .
okai , the time ha come for our first command .
bbbi 'm go to clear thi screen us clc .
and i'm readi to type a command .
so , get readi , thi is it .
i'm go to type x <num> <num> .
now , i'm go to hit the enter kei .
here we go .
there .
well , mayb i built that up a littl bit too much .
but more is go on here than meet the ey .
what matlab ha done is creat a variabl , give it the name x , calcul <num> plu <num> and gotten the valu <num> .
store the <num> in x , and print x's brand new valu in the command window for you to look at .
everi program languag provid variabl and manag locat in the comput memori to store their valu .
in fact , the definit of a variabl in comput program is simpli a locat in memori that ha a name and a valu .
now , here's a littl fancier definit from the glossari .
a name locat and memori into which valu can be store .
comput scienc definit as oppos to mathemat definit .
mathemat definit is a littl bit differ , but we're not interest in that here .
we're interest in comput scienc definit .
and let's look at anoth on .
we've just given thi variabl a valu with an assign statement .
it's defin in comput scienc like thi .
statement of the form <variabl> <express> .
that mean assign the valu of the express on the right side of the equal sign to the variabl that's on the left side .
it kind of goe from right to left .
the form of an assign statement in matlab , and in almost all comput languag for that matter , is the same as it ha been from the begin in fortran .
you type it name , then the equal sign , then an express .
and onc the variabl is assign a valu , like <num> in thi case , it'll keep that valu until you chang it .
okai .
let's get back to the command window again .
when we told matlab to assign <num> to x , x didn't exist .
that's no problem .
matlab creat it right on the spot .
you don't have to have worri about creat variabl , and that's on of the thing that make matlab simpl to us .
and on of the reason molar student prefer it to fortran , i'm pretti sure .
fortran , like c , c , java , and mani so call compil languag , requir a lot of setup work to creat a variabl .
with the sort of program that ar typic written with these other languag , thei're good reason for requir a lot of setup work .
but it's a lot easier to get a program written if you can get along without it , and with matlab , we can .
okai , now , let's just type our variabl's name without assign anyth to it .
we type x and hit enter .
thi time , matlab tell us the valu of x .
that's all it doe .
not so help now , we just saw it .
but veri help if you've given <num> command sinc you assign a valu to x and you don't know what that valu is now .
again , there's a bit more go on than might be obviou here .
matlab ha just search it memori for the variabl name x .
found , check it valu , discov that it's three and then print the three in the command window .
now let's ask it to look for y .
y better , whoop .
red type is never a good thing in matlab .
you know , i've been program matlab for <num> year and i still get a littl sting when i see on of these red error messag .
anywai , matlab is tell us that y doesn't exist .
it sai , undefin function or variabl y .
it sai function or variabl becaus function can have name like y or x2 .
matlab thought mayb we were try to run a function here .
a function is simpli an oper that's invok by give it name .
you can look it up in the glossari .
there is no oper name y and there's no variabl name y either , so matlab complain .
not sure why matlab mention function befor variabl , mayb it's becaus it's alphabet .
oh , and by the wai , let's clear up ani confus between the word command and the word function .
thei mean the same thing in matlab .
thi document doesn't distinguish between these two synonym , but it seem to us the word function more often than command .
okai .
the function y doesn't exist , but here's an exampl of a function that doe exist , clear .
i want you to look over here at the workspac , and notic that x show up in the workspac , and it valu is three .
i hit enter , and it's gone .
in matlab , the word workspac simpli mean the set of variabl that we've creat .
we just got rid of all our variabl .
just have on .
so the workspac is now empti .
let's put x back there again , thi time with a differ valu .
there , we can see x and it valu is <num> , <num> .
let's look at x over here in the command window and yep , it's <num> , <num> .
and notic that check x's valu doesn't chang anyth in the workspac .
let's try look for y .
mm , weknew it would be an error .
make an error doesn't chang anyth either .
let's do someth that doe chang the workspac .
let's sai y equal x plu , i don't know , <num> .
so y is <num> .
and let's zebra equal y minu x .
you've got to add variabl or to chang their valu or delet variabl to chang the work space .
you can delet them by click the right button here on the thing you want to delet .
let's delet zebra .
it's gone now .
mm , if you don't believ it , there , but let's do br , zebra again .
i can repeat that command by just hit the up arrow kei on my keyboard .
until i get to that command , then hit return .
there it goe .
so i've given that command again zebra's back .
and we can clear it with the clear command .
thi time , we give it the name zebra and it just clear zebra .
it leav everyth els there .
note that zebra is pink , see here .
or is that purpl ?
matlab us purplish pink to mean that the name zebra is be given to the command clear , instead of the valu <num> , which the variabl zebra had .
clear is not remov the <num> from the variabl zebra , it's remov the variabl name zebra from the workspac .
and it valu's lost with it , of cours .
if that's confus , forget it .
the reason for the color is not that import .
i just thought you might want to know that your ey aren't plai trick on you .
okai , we've look at the three window in the desktop and the address bar abov them .
but there's also all that grai stuff abov that , up here .
thi is where you find the so call tool strip .
and the most import on is the on on top by default .
it's call the home tool strip , and here's it name .
you can get to the other two by click them like thi , but we'll focu on the home strip in thi cours .
we'll look at mani of the tool on thi strip later but we'll postpon that until a coupl lesson from now .
you can hide these tool strip if you want to by click thi littl tini triangl with the line abov it over here on the right .
when you do that , the blue bar remain but the tool strip disappear .
and the window down here get bigger .
that's us when you're work on a small screen , but sinc we have a big on , we're go to click that triangl again and get them back .
you probabl notic a littl white area just to the left of the triangl that we click .
thi is the search bar .
and it work like the typic search bar .
you can click in that area , type word into it , hit enter , and if mat lab ha the inform about the word you type , it'll pop that inform up .
for exampl , if we want to know about the clear command we might type clear command in here , let's do that .
and hit return .
and a window pop up with the search result .
you can click on clear to see what the command doe .
do that , you can see that there's more than on wai to call clear .
and there's exampl over here , you can click on these littl link and it'll show you exampl .
in the meantim though , let's talk about command histori .
you rememb i mention that to you befor you can type command histori in here if you want to see what it doe .
and there is command histori and there is inform there .
but i am go to talk to you about it , and tell you how to do it .
i told you you can get the command histori window to show up if you want to .
well here's how to do it .
click anywher in the command window .
then click the up arrow on your keyboard .
there .
you'll rememb i did thi earlier to redo a zebra assign .
when you do that , you see a list of previou command that you've issu .
these littl red mark , by these command , show that there wa an error on those command .
now if you want to repeat a command , you just up arrow your wai to it .
let's sai i want to repeat y equal x plu <num> .
there , i hit enter and i repeat the command .
it didn't accomplish much , becaus y is still <num> , <num> , but i did show you how to repeat a command .
what if we want to repeat a previou command , but chang it a bit ?
sai , chang x equal <num> plu <num> to x equal <num> plu <num> .
well let's just hit the up arrow .
and let's hit it until we get to the command we want to chang .
there , what we're go to do is arrow over here to the three .
hit enter .
and we see x equal three plu two .
x equal five .
thi is veri us when you have a long command that you want to alter slightli .
final , if you want the command histori to show up in a window on the desktop , as is the default in the older version of mat lab , just click the up arrow on the keyboard , now .
and then go up here , with the mous , and click thi littl tini down arrow .
come down here and click dock .
and there's the command histori window right there .
you can scroll up and down and you can click on command and execut them over here in the command window .
i think i'll leav it there for a while for old time sake .
oh and note when we hit the up arrow we put the x equal <num> plu <num> command in the command window .
well i don't need to do that command again .
wouldn't hurt but i'll show you that you can delet it without execut it .
let's just click left , sweep over it to highlight it and hit delet .
it's gone .
that can be import to know if you accident put a long command there that shouldn't be re execut .
okai , we know how to us the command window , and the workspac , and the command histori .
now let's do a more interest calcul .
let's calcul the number of kilomet in a light year , which is the distanc that a light beam will travel in a year .
the speed of light is equal to <num> thousand kilomet per second , which we can put into a variabl like thi .
a few note about thi about variabl first , the kp is there in the name to remind me that the unit ar kilomet per second .
you can't includ unit when you assign a valu to a variabl .
the valu is just a number .
second , note that it's okai to us the underscor as part of a name in matlab .
and third , if you look at the workspac up here , you'll see that speed_kp is list abov x and y .
that's becaus variabl ar list in alphabet order , not in the order that thei're creat .
okai .
back to the calcul .
to comput a light year in kilomet we multipli the speed by the number of second in a year .
first let's put the number of second in a year into a variabl .
i want to call it , uh , year_sec .
that's equal to the number of dai in a year , which is <num> we'll forget about leap year time and we us the asterisk for time the number of hour in a dai , which is <num> , time the number of minut in an hour , which is <num> , time the number of second in a minut , which is also <num> .
and there's the number of second in a year .
so , to calcul the light year , let's do thi .
light_year_km , to remind me that thi is kilomet , is equal to year_sec time speed_kp .
and there you ar .
the answer , <num> . <num> e <num> might be a littl mysteri .
matlab ha written the answer us scientif notat .
the number after the letter e is the power of <num> that you multipli the part befor the e by .
so <num> . <num> e plu <num> is the same as <num> . <num> time <num> trillion .
well that's prove that by enter it the long wai .
so let's see here <num> . <num> time let is see , a trillion is a on with <num> zero , so on two three four five six seven eight nine ten eleven twelv .
there , sure enough , <num> . 4608e <num> .
oh , and by the wai , an mean answer .
it is the variabl matlab creat to hold valu that ar type in or calcul without be assign to ani other variabl .
now we can see it over here in the workspac .
it's first , becaus it start with an a .
let's do on more calcul involv the speed of light .
the distanc from the earth to the sun is <num> time ten to the sixth kilomet .
let's us our skill with scientif notat to assign that , ok , to a variabl .
so earth to sun in kilomet is <num> time <num> to the 6th power .
so how mani minut doe it take light to get here from the sun ?
that's what we want to calcul .
first let's calcul the number of second by divid the distanc in kilomet , by the speed in kilomet per second .
like thi .
there , look like it take <num> second .
and then we convert that to minut , by divid by <num> .
<num> . <num> minut .
okai , we've got a lot of variabl in our workspac .
if we need to stop work , and close matlab , it'd be a shame to lose 'em .
you know , like if it's time to break for lunch , or for dinner , or for breakfast , or whenev you do matlab .
no problem .
we can save them for when we come back later .
we save them in a file simpli by the give the command save , like thi there .
it's all save .
and there's a messag tell us where it wa save .
what happen wa matlab ha copi everyth in the workspac into a file call matlab . mat , and you can see it over here on the left .
it just show up .
thi file is call imagin enough , a mat file .
when we restart matlab , we can get all our variabl back by copi them from that mat file into the workspac with a command call load .
let's prove it .
first let's clear out the workspac with a clear command .
it's all gone .
and just to make sure that we're not pull some kind of trick becaus the assign statement ar in the command window , i'm go to clear that with a clc command .
i've us that onc befor .
there .
it's all clear .
and if we try to check the valu of the last variabl we creat , we'll get a red reprimand .
let's do that .
let's make a new variabl call minni , by assign a valu to it .
now we have just minni in the workspac .
but we can get our other variabl back , with the load command .
and there thei all ar .
and note that minni is still there .
okai let take a minut or two to talk about matlab's rule for variabl name .
first of all you ve notic that we can us underscor .
we talk about that in fact .
and you can us uppercas .
minni is a great exampl , and speak of uppercas , the uppercas can go anywher .
let make let make mickei equal nine .
and now i'm go to make a mickei with a capit c in the middl , and i'll make him equal to five .
if you'll look over here in the workspac , you'll see these ar two separ variabl .
the fact that thi is a capit c , make thi variabl differ from the on with the name that ha onli lowercas c there .
you can also have digit in the name .
let's try x45 equal sixti seven .
and , well , but you can't have them just anywher .
there .
you see red , so there's someth wrong with that .
and you can't have other charact .
i mean you can't have ani charact other than letter .
so , if we did thi , notic that's alreadi red .
red's never good .
so we'll try .
pound x .
that's no good .
dollar sign x equal <num> .
that doesn't work .
and you can't start with an underscor .
alreadi , there you go .
you have to stick to the rule that the charact in a variabl name can onli be letter , underscor , or digit , and you have to start with a letter .
and on last rule the length is control .
you can't have more than <num> charact .
so if you're plan on have a variabl that had <num> or more charact , i got bad new for you .
you can't do it , but i have never come close to that .
i , i .
.
.
mayb i've us <num> charact , but i doubt it .
okai thi desktop ha gotten veri clutter .
let's clear the screen with clc .
we've us that befor .
by the wai , clc stand for clear command window .
the workspac is clutter too .
let's get rid of that .
now , much better .
and you know you can clear the histori too .
just come down here and hit clear command histori .
it sai , ar you sure ?
there .
now everyth's nice and clear .
and while we're on the subject of clutter .
let's give a command .
there i'm imagin that i'm suppos to set the absolut valu of zero in centigrad , which i've done .
and the valu show up here in the workspac .
it also show up here on the screen .
matlab echo the valu that wa assign to the variabl .
well , a lot of the time we don't want to see that .
we just want to assign it and have noth happen .
let's do anoth assign .
what i'm do is set absolut zero in fahrenheit by us the formula .
and , but thi time i'll put a semi colon on the end .
when i hit return noth's echo back .
but over here in the work space someth actual happen .
just to emphas that , let's do on more .
stick with the temperatur theme , i'm us paper ignit , fahrenheit equal <num> .
and there .
again , the assign took place , but there wa not thi echo over here clutter up the screen .
there's also anoth us for the semicolon .
it'll allow you to put multipl command .
on on line .
let me show you that .
so i write x equal <num> , then a semicolon , and then i just keep on type and no enter .
now i'm go to hit the enter .
look over at the right .
the command x equal <num> is execut .
so is the command y equal <num> .
there's no echo .
we had these semicolon , but also , we separ the first command from the second command with a semicolon on the same line .
you can put as mani statement as you want on a line , as long as you separ them with semicolon , or you can substitut a comma for that purpos .
et's watch thi .
i m go to put a comma here instead of a semicolon and leav thi part the same .
we were abl to do two differ command again , the same two command .
the onli differ is thi time we got the echo .
so the semicolon's do two thing here .
on it's end thi command , and allow us to begin anoth on on the same line .
and secondli , it's silenc matlab is echo .
here , the a comma end on command and allow us to begin a second command on the same line .
but it allow the echo .
and , not onli can you have multipl command on on line , you can have on command on multipl line .
let me show you what i'm talk about .
let's us a realli long variabl name here .
for some reason , i just have these long variabl name in my mind .
so we've gotten to thi point and i want to multipli that time other variabl call anoth_long_on .
but there just doesn't seem to be room here .
so what i'm go to do is hit three dot .
i don't know if you can see thi .
let me magnifi thi a littl bit .
the dot turn blue .
thei're special .
those three dot , three period , three full stop , whatev you like to call them , allow me to continu thi on statement on the next line .
so i'm go to hit enter , and down here , the blinker is still blink .
noth ha happen .
no error .
no echo .
and i'm go to type the rest of my command .
there .
it's as if we type thi whole thing , from here , not count these three dot , all the wai to here , on on line .
and you can continu as mani line as you want if you keep us those three dot on each line except , of cours , the last on .
we've seen that matlab's pretti picki about it rule .
everi program languag is .
the reason is that strict rule make it easier to write accur , unambigu program .
we ve violat matlab's rule sever time and we've seen these red error messag that thei caus .
there's a comput scienc term for thi type of rule , the type of rule we've trip over , it's call syntax .
syntax is a languag is set of rule for the form of the statement , includ , for exampl , the rule that sai you can't us a hash symbol in a variabl name .
here's anoth exampl , on equal x .
of cours , matlab doesn't like that .
as you can see it sai that the express to the left of the equal sign is not a valid target for an assign .
the simpl form of thi syntax rule , or syntact rule , that we're violat is thi in an assign statement there must be a variabl name on the left of the equal sign .
we knew that , and we know that on is not a variabl name .
we'll run into lot more syntax area as we learn more rule .
but there's anoth type of area that is much wors , the semant error .
as we said , the syntax of a command is it form .
the semant of a command is it mean .
an exampl of semant is thi suppos we want to swap the valu that ar in x and y .
first note that the current valu of x is <num> and the current valu of y is <num> .
i've seen mani new programm try to do it like thi , and by the wai , i'm certain i did it too when i wa start out .
so thei type x equal y , and y equal x .
you see what went wrong here ?
let's look up here and see that someth did go wrong .
thei're both equal to <num> .
instead of have their valu swap , thei both now have the valu that y had befor , so what happen ?
well , the first statement , thi on here , copi the <num> that wa in y into x , and at thi point thei both have the valu <num> .
so , x's valu ha just been lost .
the <num> is gone .
then thi next statement just copi whatev is in x , which happen to be <num> now , back into y .
so , y is <num> ; it wa <num> ; that realli didn't do anyth .
well let's do it right .
first let's set thing up the wai thei were to begin with x wa equal to <num> and y wa equal to <num> .
and we can see that we've done that over here in the workspac .
now here's how you swap them temp equal x .
we've copi x into temp .
temp stand for temporari variabl .
we've actual save it there , so that when we copi y into x we haven't lost x's valu .
now we simpli copi temp into y .
and there we go .
so , when we made the error , matlab didn't catch it and it didn't print an error messag , and there wasn't ani red color .
that's becaus our syntax is perfect .
the problem is that our code didn't mean what we thought it did .
thi is a semant error , also known as an error of semant .
the semant of our first try wa that y's valu wa simpli copi into x .
that's all .
it wa a semant error becaus we thought that x's valu would also be copi into y .
the semant error is an error in which the mean of our code is not what we intend .
and the reason that it's wors than a syntact error is that matlab ha no wai of know that it's an error .
neither would the other languag we talk about .
we could have made thi particular error in ani on of thousand of applic becaus swap variabl is a gener problem that occur a lot .
but an even more common type of semant error is on that is applic specif .
look for exampl , at the formula we us for calcul absolut zero in degre fahrenheit .
right up here .
it's correct .
but suppos we d type thi .
everyth is the same , except that we us a minu instead of a plu .
we would have gotten the wrong answer , but matlab wouldn't have known it .
and it wouldn't have told us anyth .
error of semant ar the biggest problem in comput scienc by far , becaus the rule that thei violat ar unknown to the languag we're us , so we get no help .
make you kind of like those red error messag .
well almost .
matlab is try to help us with these error messag of cours , but there's a lot more help easili avail in matlab .
i provid lot of command like the who and who command that we us to look at the variabl in a work space .
and the clear command that we us earlier to remov all the variabl from the workspac .
all these command ar execut by give their name , and everi on of them ha someth call a help page , which is roughli a page , more or less , of explan of the syntax and the semant of the command .
we've seen that we can get inform about matlab's built in function by type their name into the search bar up here at the top .
but there's a command that we can enter that will print what we need to know right here in the command window .
the name of the command is help .
you just type help follow by the name of the command you want to to know about .
let's do that to find out about a command call format .
here we see the so call help page for the command format , or i should sai we see the bottom of the help page , caus it's a pretti long on , but we can scroll to the top by us the scroll bar over at the right or the mous wheel or your finger on the touch pad or howev you like to do it .
everi help page start out by give the command name , in thi case format , and tell you , in just a few word , what the command doe .
so here we see set output format .
thi is follow by more detail and more detail wai that you can us the command and tell you what it doe .
you can read all about format later , but right now let's scroll down until we find format compact and format loos .
right here thei ar .
you'll notic that compact and loos and these other option here ar in upper case just to make em easier to spot when you sweep over thi help page with your ey .
but you can us lower or upper case for the command .
most peopl us lower case .
let's see what these two option do .
first i'm go to set x equal to five .
now let's us format loos and , i'll repeat the command .
do you see the differ ?
by loos , matlab mean that space ar insert between the line .
i like a more compact output , myself .
so i alwai chang the set to compact like thi .
now we're back to normal , or what i call normal .
if your particular matlab instal is set to loos , you mai have been wonder why you're get these space and i'm not .
now you know .
and you might want to go with compact .
anoth thing that the format command can chang for you is the number of decim place that it show when it print a respons to an assign statement .
we can scroll up and see these option .
let's see here , if i can find them .
there thei ar .
i've got matlab set to short , which sai , scale fix format to five digit .
let's do anoth assign statement .
i'm go to do boi equal <num> divid by <num> .
there ar an infinit number of digit in the exact answer .
matlab show five of them .
<num> . <num> .
now let's try format long .
and i'll repeat that command .
let's us the up arrow kei to do that .
whoa !
thi time , we've got lot of decim .
matlab is show you all the accuraci it's got .
it's import to know , , though , that it work behind the scene with all the accuraci it's got , whether you have the format set to long or short or anyth els .
all the command , format , affect is the print output .
you don't lose ani accuraci dure the calcul when the format is set to short .
you just don't see all the accuraci in the output .
i usual don't need to see all the accuraci , so i tend to stick with short .
and that's what i'm go to do .
and there we're back to five digit again .
let's see .
befor i went off on thi format tangent , i wa talk about the help command .
and i want to tell you some other thing about it .
for exampl , if you want to see the fanci document with the fanci font that you get when you us the search bar up here , you can also get that with a command call doc .
so let's try that with format .
there , all thi nice stuff show up .
it is pretti handi .
we won't go into it , but we've seen it befor , and you can check it out .
and here's anoth thing that we need to talk about .
suppos you don't know , you know , the name of the command that you're look for .
you want to do plot , for exampl , so you could come up here and type plot .
and hit return and , well , you see thi window , and you sai , oh , thi look good .
you see plot basic .
click that how to creat <num> d graph , add titl , chang the limit .
you know , <num> d graph , that might be good .
creat a line graph , <num> d .
oh , and here's some exampl .
it give you a function .
thi is a workhors function right here call plot x y .
we're go to look at that in a minut .
it show you exampl and so on .
now that you know plot is what you want you can type help plot , and scroll up here , and you'll see all kind of inform about plot command .
there is a linear plot and so on .
there is on other thing you can do .
let's go down here and look at thi littl thing .
you've probabl not notic thi befor .
thi fx with thi tini down arrow here .
thi is call brows for function .
let's click on that .
you see a littl window show up here with some stuff that sai matlab , languag fundament , mathemat , graphic .
i'm look for plot .
that look promis .
whoo , there you go !
<num> d and <num> d plot .
i click there .
line plot .
and there is thi plot function that i mention , and here is some inform about it right here .
so thi is anoth wai for you to find inform about a function when you don't even know it name .
you just brows for it .
let me just bring up chrome and type how do i plot in matlab ?
well !
<num> d line plot .
that look promis .
let is see what we get there .
and there we ar .
that's exactli what we want .
you'll usual get , not onli the name of the appropri function like thi , but you'll be taken right to the help page that you need .
mathwork keep all their document onlin so it's avail to everyon .
and googl is search engin is so magic that , well , i usual wonder why i didn't just ask googl in the first place .
okai , let's close chrome here .
and there we see , still wait for us in the command window , the command window version of the help page for plot .
no matter how you get the help page , if you scroll down here at the bottom , you usual find a see also list .
here's plot3 , i wonder what that is .
let's click that link .
plot line and point in <num> d space .
that seem pretti cool .
let's suppos that that's sort of what i wa look for .
anoth thing i might do , is look at an exampl .
i find it's easier to , be introduc to a subject by an exampl than theori anywai .
that's realli why thi cours is like that .
let's show you how easi it is to try an exampl .
i'm go to copi thi thing .
here's copi .
and i'm go to past it in the command window .
and it run .
that's the wai all plot work .
thei pop up in a separ window call a figur .
see here , figur <num> .
thi plot doe look three dimension .
it's suppos to be a helix .
but is it realli 3d ?
well , you can't us , you know , the 3d glass with it , but you can do someth just as good .
i m go to click thi littl circl thing here .
and look at thi .
you can look at it from ani angl .
and that make it pop out , make it look veri 3d , to me , anywai .
by the wai , if i click somewher in thi command window , thi thing disappear , and if that happen to you , don't worri , it's back here , it just went to the back .
you can alwai get it back that wai .
okai .
that wa fun but i'm go to close thi .
we're go to be a littl less ambiti and go to 2d , becaus that's what you ll want <num> of the time .
let's plot just three point on an x , y graph to get the idea .
okai , let's clear everyth us clear and clc .
there .
now , the first thing we need to do to plot someth is to specifi the x and y coordin for the point we want to plot .
and here's how we can do that .
and the next thing we do is run the plot function , like thi .
and there's our plot .
befor we go further , let me show you how you can keep thi nice figur from disappear back there behind the matlab desktop when you click in the command window .
you just click thi tini arrow right here .
and the figur suddenli show up in it own littl window right here in the matlab desktop .
it's call dock the figur .
okai , let's see what we did to get thi plot .
command window's just thi littl thing down here now .
now we can see the first command set the variabl x_coordin equal to a list of three valu , <num> , <num> and <num> .
now , let's stop right there .
a variabl ha three valu at the same time ?
well , actual x_coordin ha just on valu .
it's thi whole thing here .
it on valu is a vector .
and we get a vector by type these left bracket and right bracket .
we'll go into detail on that later .
but a vector is just an order list of number , <num> , <num> , <num> in thi case .
those number ar call the element of the vector .
we did the same thing for the y coordin .
and here's the first point , x equal <num> .
x is plot along the horizont axi , and y equal <num> .
there is the <num> , and there is a line drawn to the second point .
you can see that x is equal to <num> .
and y look like it's probabl equal to about <num> .
and here's the last point x equal <num> , y equal <num> .
when we type x_coordin and y_coordin in parenthes after the function name , plot , it meant that the valu in those variabl were input to the function .
input to a function ar call input argument in program , or just argument .
plot expect to get two vector as input .
and thei have to have the same number of element , three in thi case .
in matlab terminolog , the number of element of a vector is call it length .
to you physicist out there the length of the vector is the squar root of the sum of the squar of the element , and there's a matlab function call norm that will give that to you .
but to get the number of element in the vector , you us a matlab function name length , like thi .
so the valu of the variabl x_coordin is a vector of length <num> , whose element ar <num> , <num> and <num> .
when we enter those element , you mai have notic all those comma .
befor now , the comma had been us onli to separ two command on the same line .
now we see a second us , separ element in a vector here and here , and a third us separ the argument to a function here in our call the plot function .
the plot function gave us a nice plot , but to tell the truth , it's not quit what i want .
instead of thi jag blue line go from point to point , i want to plot each point separ .
well the plot function will do that for us , if we know how to tell it to .
we do that by give it a third argument .
let's call it again , let's slow down a bit as we type .
p l o t , left peren .
after that first parenthesi , thi thing pop up .
it's call a hint , and it remind you of the variou argument that you can feed it .
i sai remind you , becaus you realli need to know how it work for the hint to be much help .
i happen to know that the third argument here , thi second option call linespec , is the so call line specif argument , and you us it to tell plot how to plot your point .
let's do it thi wai .
thi quot asterisk quot tell plot to put an asterisk at each on of the point instead of a line connect them .
so , now i'm go to hit enter .
and there we go .
here's a point here , here's a point here , and there's on there .
an asterisk usual mean multipli , but thi asterisk ha singl quot around it , as you can see .
and that chang it mean .
a singl set of quot around charact tell matlab not to treat those charact as the name of an oper , or a variabl or a function .
instead , it treat the charact between the quot as just a string of , well , charact .
and it's in fact , call a string .
to remind you that it's a string , matlab highlight it in that purplish pink color that we saw befor , or would you call that lavend ?
and speak of color , let's alter our plot by chang the color , and while we're at it shape of the point we're plot .
let's go back to the help page and see how to do that .
i'm go to us the doc command becaus i have so littl space in my tini command window , with thi figur take all thi space .
doc plot .
here we go .
two line plot .
hm , what i'm look for is someth about linespec .
oh , here we go , linespec .
let's see .
i can specifi a solid line , by us a minu , these ar the thing that go in those littl quot instead of the asterisk .
here's a dash line , and so on .
the marker i'm look for is a squar .
there we go , squar , so i us an s for that .
and what about the color ?
here's the color .
yellow and magenta , well , red , is an r .
okai , so , now i know what to do .
what i'm go to do is hit the up arrow kei to repeat thi command .
i want to go up to there .
and i'm go to alter thi by put in what did we decid ? red squar .
you can put in rs or an sr , it doesn't make ani differ .
now watch these littl asterisk , these blue asterisk chang into red squar when i hit return .
four , three , two , on , there .
and there you have it .
there's those littl red squar .
there's other wai to enhanc these plot too , for exampl we can add with a grid with the grid on command .
there we have a nice grid , and you can probabl guess that you can turn it off with the grid off command , but we're go to leav it on .
and we can add label to the ax like thi .
let is add on to the x axi , xlabel .
and let is just make up someth , sai , select .
see , that show up right awai when we hit select .
and ylabel .
that's go to be chang .
and there's our ylabel .
and what about a nice titl for thi thing ?
titl .
that is name of that command .
chang in select dure the past year .
and there it is .
here we've got three more function that us string as argument .
we have seen plot put a string here .
and there is a string , there is a string , there is a string .
just a string of charact .
and thei ar all color thi color , whatev it is and it's the same color that's us here , and us here when you give argument to the doc , the grid and other command .
matlab automat chose the rang in thi plot .
it chose <num> to <num> for x , the horizont axi , and minu <num> to <num> for the vertic axi , but you can chang these rang with the axi command .
let's do that .
befor i hit enter , i'm go to talk about what we've done here .
axi take a four element vector .
on , two , three , four element .
the first element is the left end of the horizont axi .
that's go to becom <num> .
the right end's go to be <num> .
the bottom end of the vertic axi is next , that's go to be minu <num> .
and then , the upper axi limit is go to be <num> .
so , watch thi .
i'll hit return and you'll see these chang .
so , now we go from <num> to <num> , and minu <num> to <num> .
just what we ask for .
well , that's about it for plot , there ar other plot function too .
there's on call bar , which produc bar graph .
let's try that next .
note that the bar graph replac the previou plot .
we see here at the posit of x , <num> , <num> , and <num> , the height of the bar match the y valu , <num> , minu <num> and <num> .
if you don't want the second plot , bar for exampl , to replac the first plot that you were look at in the figur , you can ask for a second figur .
you type figur , like thi .
and it give you a new figur .
let's put someth in that figur .
i'm go to dock it .
and what i'm go to do is put a pie chart in there us the function call pie .
pie take on vector as an argument .
i'm just go to make on up .
note that we've separ the element of thi vector with space instead of comma .
yep , you can us space or comma or both .
each element in the input vector , the <num> , the <num> , the <num> , the <num> and the <num> , determin the size of on slice of pie .
so now i'm go to hit enter and see what we get .
then it pick some color for each slice , and it calcul the percentag of the size of each slice rel to the whole and show them for each slice , and there you go .
to close a figur window , you can us the close command .
to close figur two us close <num> .
and that leav us with figur on .
we could close figur on with close <num> , but you can alwai close all the open figur with close all .
so i want to show you that on .
and there , we're back to no figur .
befor we finish look at figur , let's put up on last on .
thi time , we're go to displai a photo .
over in the current folder window , here , we see that there's a file name palac . jpg , you're probabl familiar with thi jpg .
it mean that thi file contain a photograph store in a veri common format , it's call the jpeg format .
so the first thing we need to do is load thi photo that's in thi file into matlab .
and we can do that with a command call imread .
so i'm go to type that in .
and the argument i give it is the name of the file in quot , like thi .
you have to us uppercas where there is uppercas in the file name , and so now i'm go to hit return , and there we , .
.
.
ok , not good .
we need to stop thi .
um .
it doesn't hurt anyth , but it won't stop for a coupl of minut , and we don't have time for that .
do you rememb how to stop matlab ?
ctrl c .
we press the ctrl kei , and while we ar hold that down , press the c kei .
there .
that's over .
what happen is that the imread command found the file , read the number insid it just like we want it to , but then it pour those number out into the command window , and there ar a lot of number in there , over <num> million of them .
what we should have done is tell matlab to assign the output of imread into a variabl instead of pour it onto the screen .
and we should have us an assign statement like thi .
i'm go to assign it to a variabl call pretti_pictur .
sheesh !
ar we ever go to get thi right ?
ctrl c again .
thi time , we forgot to put a semicolon at the end of the line .
so after it store the data in the variabl pretti_pictur , and we can see up here that it did that a lot of data there .
<num> , <num> by four thousand um time three .
that's a lot of number up there .
we'll learn what all thi mean in the next lesson .
but what we should've done wa put that semicolon in .
let's do that and repeat the command .
okai , three is the charm .
the pictur is captur in the variabl pretti_pictur .
but we haven't seen it yet .
so how do we look at it ?
well , we can do that with a function name imag , like thi .
it is a pretti pictur .
but we don't need those number on the edg clutter it up .
let me dock thi thing , and i'm go to give a command call , axi off .
there , much better .
matlab can displai imag in lot of format in addit to jpeg .
and it allow us to do imag process on all of them too .
we'll look at that in a later lesson .
but now , let's end lesson on .
and let's quit matlab while we admir thi photograph .
it is beauti , isn't it ?
i'd tell you who shot it , but modesti forbid me .
okai to quit , we give the quit command .
here we go , q u i t , return , matlab is gone .
and we're back to our comput desktop where we start from .
we could also have quit by just close the matlab desktop by click the littl x in the upper corner , but in either case , the desktop close and all the figur close , as well .
when matlab leav , it put everyth awai .
and it's time for us to leav , too .
that's the end of lesson on .
hi , welcom to lesson two , matric and oper .
as we point out in lesson on , matlab is design not onli to make it easi to program a comput but also to make it easi to solv numer problem .
numer problem often involv oper on matric , and matlab make that easi .
we're go to start thi lesson by find out what matric ar .
matric , which is the plural of the word matrix , ar special kind of arrai .
so what ar thei ?
well , both concept ar pretti simpl , realli .
first of all , an arrai is just a set of number arrang in a rectangular pattern .
so imagin a piec of paper with row of number written on it , like thi on .
thi is a two dimension arrai .
the number ar call element of the arrai , and each row must have the same number of element as each of the other row .
in thi case we have six row of four element .
we call thi a six by four arrai .
as you can see it ha six row and four column .
and we alwai sai the number of row befor we sai the number of column .
now imagin have a stack of two such page , each with the same dimens but not necessarili the same number .
we us the same two dimension arrai that we start with for on page , and we add a second page with the same layout as the first on , that is six row and four column .
now we have a three dimension arrai .
it dimens ar six by four by two , which mean six row , four column , and two page .
we alwai sai the number of page after the number of column just as we alwai sai the number of column after the number of row .
now let's add a third page with the same layout as each of the other two page .
thi is still a three dimension arrai .
we've just chang the dimens .
thi on is <num> by <num> by <num> , which mean <num> row , <num> column and <num> page .
arrai of four dimens and higher ar rare .
we won't us them in thi cours .
and the most common ar the two dimension arrai .
in fact , thei're so common , thei have a special name .
a two dimension arrai is also call a matrix , and that's what we call them .
and if there's onli on row in the matrix , or onli on column , in other word it's onli on dimension , the matrix is also call a vector .
the most ingeni part of matlab is the wai moler set it up to deal with matric , and becaus of the special role that matric plai in matlab , he gave hi languag a name that stand for matrix laboratori .
okai let's look at some matric in matlab .
befor we look at a matrix , let's rememb what we did in lesson on when we were do plot .
we actual made a vector call x_valu and we did it thi wai .
we us a left and right bracket to mean that we want a vector , in thi case of three valu .
we're go to us those same bracket to make a two dimens arrai , and here's how we'll do it .
we can us capit x thi time .
here's my left bracket , zero , on , minu on .
thi time i'm go to put a semicolon .
that mean end of a row .
i want to put anoth row .
it ha to have the same number of element .
pie , on hundr , right bracket mean the end of the matrix .
and what we see here is we have a <num> by <num> matrix .
first row is zero , on , minu on .
second row is <num> , <num> . <num> , and <num> .
let me sai a word about the <num> . <num> .
we actual type pi  here , and as you probabl guess , pi  mean the ratio of the circumfer of a circl to it diamet .
you might think that pi  is some kind of built in variabl .
it's not .
it's a built in function .
as you rememb from lesson on , a function is an oper that's invok by give it name .
and we had exampl there of clear , plot , titl , axi .
these ar function that did thing to the screen .
pi  is a littl differ .
what it doe is return a valu , the ratio of the circumfer to the diamet of a circl .
it actual return a lot more decim than we're see here .
the format we have set up onli show on , two , three , four , five digit , as you can see .
so pi  return a valu .
and , when we sai it return a valu , we simpli mean that the program insert the valu , where the function name appear .
as you can see , the function name appear in the middl of the second row , and so the valu appear in the middl of the second row .
matlab provid hundr of built in function .
here's on call squirt .
it actual mean squar root .
matlab love short name .
and you can see when we hit return that we get the valu <num> . <num> which is the squar root of two .
of cours both of these number , pi  and squar root , ar irrat number .
so these digit would go on forev .
matlab store about <num> of them .
and it's show you just a few .
here's anoth function sine of <num> ; sin like squar root take an input valu , pi  take no input valu .
some function do some function don't .
you might think thi is sine of <num> degre .
it's actual the sine of <num> radian .
if you want the sine of <num> degre you can do it thi wai , sine d .
look like sin .
and that's the sine of <num> degre .
here's anoth function size .
i'm go to give it an argument x .
it sai two three .
what thi mean is x is a two by three matrix .
the job of size in life is simpli to give the dimens of the matrix that you give it in parenthes .
let's try thi with anoth valu .
let's make x equal five .
and let's do the size of x .
now x is just a simpl number , and sinc size is suppos to give you the dimens of a matrix and x clearli is not a matrix , it's probabl go to give an error , on of those red messag .
well , no , it doesn't .
in fact , it give us that x ha the dimens on by on .
and here we see that matlab look at everyth as a matrix .
thi is on of the ingeni idea that cleve moler had to begin with with matlab .
a scalar is simpli a on by on matrix in the ey of matlab .
you notic that we us a lower case x for thi on by on matrix .
it's commonli call in mathemat a scalar .
and it's common to us lowercas as the initi valu or initi letter in the name of a vector , as we can see from xvalu up here at the top of the screen and x as we did here for the scalar .
and we us a capit x for a two dimension arrai .
matlab know noth about that .
it's just a custom .
you might , sai , mayb , we want an arrai of voltag .
let's give it on , two , three , four , five , six .
i'm in a hurri .
i don't want to come up with ani fanci valu .
so there's a three by three arrai of voltag .
if we want to sai what the first row wa , we might sai row on , and i ll us an underscor to make thi clear , of voltag equal , well , on , two , three .
and i us a lower case r , becaus thi is after all a vector .
now let's look at a vector a littl bit more close .
let's set x equal to on , four , seven .
thi is a row vector .
let's look at a column vector .
i'm go to set y equal to <num> semi colon <num> semi colon <num> .
sinc semi colon mean the end of a row we've got a row of onli on element , anoth row of onli on element and a third row of onli on element .
and as you can see row on is on element , four on the second row .
.
.
so thi is a column vector , and matlab lai it out as a column vector when it echo back the valu of y .
so let's look at the size of x and the size of y .
for x we have a on by three .
that mean on row , three column .
for y we have a size of three by on three row , on column .
x is a row vector .
y is a column vector .
matlab doesn't us these name .
we us the name , but matlab show you that it's a vector by show you that the size ha the number on in it somewher .
a vector is simpli a matrix , on of whose dimens is on .
and a scalar is a vector .
it's a matrix both of whose dimens , , ar equal to on .
let's look at a pictur from a book that show the relationship among all these type of arrai .
here we see all four type , the arrai , the matric , the vector , and the scalar .
first we highlight the set of all arrai .
thi is the biggest set and it includ all number of dimens , on , two , three , four , and on and on .
in particular , it includ as subset the special type of arrai , the on with other name .
here ar the matric .
you can call these matric or arrai , and insid the matric ar the vector .
thi set includ all row vector and all column vector .
and you can call them vector or matric , or arrai , but we usual call them vector .
and , final , insid the set of vector ar the scaler .
these ar the on by on matric .
and you can call them scaler or vector , or matric , or arrai .
but we usual just call them number .
everi thing that the matlab work with from the largest to the smallest is found in thi diagram .
and on the subject of size , now we ar go to see how you can creat a veri long vector without a lot of type by us the colon oper .
to see how the colon oper work let's start with a simpl exampl .
x <num> <num> <num> .
hit return .
and i get on , four , seven .
x is a vector .
here's what the mean of thi colon oper is .
and notic we ve got two colon in thi so call colon oper .
it mean start at on , increas by step of three , and stop , befor you go over seven .
go no higher than <num> .
so we add <num> plu <num> .
and we get <num> .
we add <num> to that .
we get <num> .
if we ad <num> to that , well it would be over <num> .
thi concept of increment and go no higher than a limit , sometim is confus .
let's look at <num> , <num> , <num> .
we start with <num> , we add <num> , and we continu , but we go no higher than <num> .
well we got the same result here , becaus if we ad <num> to <num> , we would be higher than <num> , so it stop at <num> .
let's try thi on .
still no joi .
let's try thi on .
we want to get anoth number .
noth's happen becaus , if we ad <num> to <num> , we'd be higher than <num> .
so final let's do thi , <num> , <num> , <num> .
thi start at <num> , we add <num> and get <num> , we add <num> and get <num> .
we add three and get ten .
matlab check .
if you add three to ten would you be higher than ten ?
well of cours , so it stop .
there's a special shorthand if you want to go up by on instead of , sai , three .
let's call thi variabl int .
we'll set it to on to on hundr .
thi is the same as go up by on .
just on colon is need .
and , well , we'll get , a hundr number here .
let's look at the size of thi variabl .
it's a <num> by <num> vector as you can probabl see .
so we call thi the colon oper .
well , what's the definit of an oper ?
pretti simpl .
you've seen a function .
an oper is a function that's invok by a symbol .
a function is an oper that's invok by the name , so the name of thi special kind of function is a singl symbol , or <num> symbol as in the case of <num> colon here .
plu and minu ar probabl the most familiar exampl .
let's look at <num> plu <num> .
of cours we get <num> .
there's anoth function that doe the same thing in matlab plu <num> , <num> .
the first on is an oper .
the second on is a function .
thei're both call plu .
on's a word .
on's a symbol .
there's a colon function that doe the same thing as thi , so the first on is the name colon .
the second on is the colon symbol .
as you learn in lesson <num> , we call the input to a function call argument .
for an oper , we call them operand .
for a function the argument ar surround by parenthes and separ by comma .
for oper the input ar separ by the oper themselv .
for exampl <num> plu <num> .
plu separ the two operand , <num> and <num> .
if you had multipl , <num> time <num> , the operand ar <num> and <num> .
thei're separ by the oper asterisk .
and of cours here we have , <num> and <num> separ by the colon .
and you can even have two symbol in the colon oper .
so we can separ three operand with the two colon .
the colon oper's veri us for gener huge vector of equal space number .
suppos we want all the odd number smaller than <num> , <num> start with <num> .
might set z <num> colon <num> colon <num> .
befor i hit return and fill the screen , notic that we're go to start at <num> .
then we're go to add <num> .
that'll give us <num> .
then we add <num> to that .
that'll give <num> .
<num> , <num> , <num> , <num> , and so on , all the wai up to , but as you know , sinc <num> , <num> is not reachabl as an odd number , it doesn't quit includ <num> , <num> .
so we go to <num> .
if we ad <num> to <num> , we'd get <num> , <num> which would be greater than <num> , <num> , and matlab won't do that .
let's look at the size of z .
it's on by <num> .
there ar <num> odd number from on to <num> .
suppos we want the even number that ar smaller than or equal to <num> .
let's call those even .
and we'll set them to <num> colon <num> colon <num> .
we start with two , we keep ad two until we get to <num> .
two , four , six , eight , and there ar those number .
what's the size of that vector ?
well it's on by <num> .
you can have decreas sequenc too .
let's start with <num> , go down by <num> , and end up at <num> .
seven , four , on .
so we start with seven , we subtract three , that give us four .
we subtract three again , that give us on .
if we subtract the three again , we'd be less than on , so the rule now is instead of , go no higher , it is , go no lower .
so we go no lower than on .
let's look at on we call 'down_by_ten .
it is equal to <num> , colon , minu ten , colon , minu <num> .
so here we start at a hundr .
we decreas by <num> we add minu <num> in other word until we get to , and don't go below , minu on hundr .
and there's the number .
size of thi is on by <num> .
again , it's a vector .
you alwai get row vector with a colon oper .
you never get a column vector .
if you want a column vector you have to chang it into a column vector , and we ll show you how to do that later .
i want to show you a strang thing .
x equal seven colon thee colon on .
so innoc i type seven colon three colon on , mean i want to start with seven , i want to chang by three until i get down to on , and i hit return , and i get thi strang thing .
x is thi empti matrix .
on by zero .
well what's the differ , last time i type seven well here i had a minu three ; here i have a plu three and there's the problem .
but i want all the number that start at <num> , get bigger by <num> , and end up at <num> .
well there is no such number or number .
so it give us the empti matrix .
let's see what the size , of x is ?
<num> by <num> , just as it said .
there ar other size of empti matric in matlab .
and by empti matrix we don't mean a matrix with zero in it .
we need a matrix with noth in it .
here's how to get that other kind .
you just type noth !
so we type x , a left bracket , type noth , and then type a right bracket , and it show that it's an empti matrix .
it show it a littl differ here .
let is look at the size of x .
thi time x is zero by zero .
befor , it had on row with noth on it .
you alwai get a row matrix , as i mention , with a colon oper , and , sure enough , we got a row matrix here with noth in it on row , no element .
here we didn't indic whether we want on row of noth or on column of noth .
so it give us no row , no element .
now that we know how to make a matrix , we need to know how to access part of it .
so , for exampl , if we want to see just the on element on the second row in the third column , we'll know how to do it .
and it's all base on row and column .
to see how it's done , we need a sampl matrix .
thi command will make us on .
and here it is .
as you can see , it dimens ar <num> by <num> , mean that it ha <num> row and <num> column .
and thei're number from top to bottom .
<num> , <num> , <num> .
and the column ar number , too .
<num> , <num> , <num> , <num> , from left to right .
so how do you look at just the element on the second row and the third column ?
you give the command x , left parenthesi , <num> , comma , <num> , right parenthesi .
the <num> is the row index , and the <num> is the column index .
as alwai , the row come befor the column .
togeth , the two indic , <num> and <num> , in parenthes and separ by comma , tell matlab which element you want to see .
and it show it to you .
okai , let's do thi same exampl again , but thi time , let's do it in matlab .
okai , well , let's look at thi same exampl in matlab .
we'll set x equal to left bracket , <num> colon <num> , semi colon , <num> colon <num> , semi colon , <num> colon <num> , right bracket .
note how we've us the colon oper to save type .
you know , we could have done it the hard wai , which would have been x equal <num> , <num> , <num> , <num> , <num> , <num> , you know , et cetera .
i'm not even go to do that .
it's just too much work .
but the colon oper work perfectli .
each row of a matrix is simpli a vector of number .
and the colon oper produc a row vector of evenli space number .
so if we want the number on a row to be evenli space , we can us a colon oper instead of type them out .
and that's what we want thi time , so we us the colon oper .
okai , to continu with our exampl , let's specifi the third element on the second row , as we did befor .
so , we sai x , parenthesi now , <num> , <num> , right parenthesi .
and we see the answer is <num> .
we alwai , as here we did , give the row index first and the column index second .
we can also us thi notat in an assign oper .
so let's sai we want to call the variabl center and we set it equal to x <num> , <num> , as we did befor .
center now ha the valu <num> .
or bob i don't know x <num> , <num> .
there we go bob is <num> .
and as you can see up here , where x wa displai thi <num> by <num> matrix on the third row and here's the <num> down here in the third column here's the second <num> we find the <num> .
and we can assign a new valu to a specifi element .
x <num> , <num> , instead of be <num> , i'd like it to be <num> .
so we set it to <num> .
you'll notic that while we onli mention to matlab on element , it show us the whole matrix .
well , we will notic , howev , that it did make the chang we request .
so element <num> , <num> , that is second row , third column , is now <num> .
and if we want the second row , second column to be well , i don't know a hundr and twenti three .
if we look at it now , it's a hundr and twenti three .
so what happen if we assign a valu to an element of a matrix , but the matrix doesn't exist ?
let's sai , for exampl , the matrix xyz .
if we look over in the workspac , we'll see there's no xyz matrix .
so it doesn't exist yet .
anoth wai to check to see if it exist is to try to look at it .
hm , we get on of those aw red messag sai we made some kind of error .
okai , matlab , i did thi on purpos .
it's not realli an error thi time .
but anywai , let's set a valu to it .
xyz , element <num> , <num> is equal to on hundr twenti three .
so we're do the same thing we did with x , but now we're do it with a non exist matrix .
so you expect more red to come back , i'm sure .
well , surpris !
what is thi ?
xyz equal <num> , <num> , <num> , <num> .
well , here's what matlab did .
it said you want to have a matrix xyz , and you want to have <num> on row <num> , column <num> .
i'll give that to you .
you didn't tell me what goe on the rest of the row and column , so i'll put zero there .
and that's what matlab doe .
it make the smallest matrix it can and still accommod your request .
in other word , the smallest matrix it can that ha an element , <num> , <num> .
and that's a <num> by <num> matrix .
and what happen if the matrix exist , but the element we specifi doesn't exist ?
let's try to peek at a non exist element .
let's look at the element of the <num> by <num> matrix that's on the fourth row in the fifth column .
that doesn't exist .
well , we get our hand slap , and we deserv it .
but an assign to a non exist posit like thi is anoth thing entir .
let's assign a valu to element <num> , <num> , sai <num> .
so what's thi ?
well , matlab ha to extend the size of the matrix from <num> by <num> to <num> by <num> to accommod our request to put someth at element <num> , <num> the <num> .
there it is .
it's right there .
we didn't tell it what els to put on the fourth row and we didn't tell it what els to put on the fifth column , so it put zero there .
there's on pitfal we need to point out concern the first element on the first row .
let's set that first element on the first row to the valu <num> .
it's <num> right now , and we'll chang it to <num> .
there .
so we see our matrix with the <num> replac the <num> .
that work fine .
you might be tempt to do thi , becaus we've talk about how x as a scalar is the same as a <num> by <num> matrix .
and it kind of look like the same mean here , but it's not .
it's entir differ .
what we have just done is obliter our entir matrix and replac it with just the <num> by <num> scalar matrix , <num> .
well , we know how to access or chang individu matrix element .
but , you know , we can chang multipl element at a time us the so call subarrai oper .
let's see how that work .
let's come up with a littl simpler matrix thi time , just two row .
it is on of my favorit matric becaus it's so easi to type .
on , two , three , four , five , six .
let's look at a sub arrai .
i'm go to type x two comma and on three .
what i've done here is i said that i'm interest in just the second row and i'm interest in the first and the third column .
i want to see that .
so , matlab slice off that second row , and it give me the first and the third element on the row , and there thei ar four , six .
thi is a sub arrai .
thi is the whole arrai , and thi four and thi six take togeth is the subarrai that we ve specifi .
the comma's requir , by the wai thi on i'm talk about .
let's try do without it .
we get an error .
and it's just as easi to specifi multipl row as multipl column .
so here we go .
i'm go to sai i want row two first and then row on , and i just want to look at the column two .
now let's go back and look at what x is .
it is still visibl up here .
we've ask for row two first and there's the five and then row on and there's the two .
we ask for second column in each case .
so it put the five first and then the two .
and here's a combin of multipl row and multipl column .
from our row , i'm go to sai i want row two first , and then row on , and then row two , and then for the column , i want to start with three and go to on and on again and then two .
you can do anyth you want to as long as you're pick element that ar actual insid the arrai .
so let's just look briefli here .
we took row two first , and row two had a four , a five , and a six on it .
and we ask for column three and then on twice and then two .
so here the six , the four , the four is repeat becaus we ask for it twice , and then the <num> , and then you can see what happen with the other row .
you can do ani combin you want as long the element you request exist in x .
let me give an up arrow to repeat the previou command .
i'm go to chang that two to an eight and hit enter .
well , matlab didn't like that becaus we ask for element that didn't exist insid x .
and you can us the colon oper to form the subarrai .
as an illustr , let's do thi without the colon oper .
i m space thi out so you can see it a littl better .
or we can do the same result with the colon oper .
let's do it that wai .
instead of thi on , two , three vector which i wrote out explicitli , thi time , i'm go to get the same thing with the colon oper .
thi not realli a new concept .
it's just a combin of two concept that you ve alreadi learn .
first , you learn that a vector like <num> , <num> , <num> can be us in a subarrai oper .
and second , you learn that the colon oper can produc a vector of evenli space number in thi case , on , two , three .
and you can get as fanci as you want with thi .
for exampl , let's do thi we'll put two , colon , minu on , colon , on , for the row we want and for the column , three , colon , minu on , colon , on .
we're go backward on both of them .
and there you have it .
matlab provid a veri help wai for specifi the last index of a row or a column .
here's an exampl .
as you might guess , the word end here mean the last row index in the matrix x .
and here's how you ask for the last column index .
i'm sure you can guess .
you just put end in the column posit .
end is an exampl of a keyword in matlab .
the term keyword is a comput scienc term , and it's us for all program languag .
it definit is simpli a word that ha a special mean in the languag .
and everi program languag ha keyword .
here , the special mean of thi keyword is last index .
a keyword is also typic reserv , mean that you can't us it as the name of a variabl or a function .
let's try to do that .
we'll set end equal to five , oop .
as you can see matlab sai it's a reserv word .
the keyword end mai not seem all that help to you right now , but we'll see later that it's veri help when we write a program in which we can't know what the last index is .
that actual happen a lot .
when it doe , end will alwai give it to us .
here's some more exampl of end .
you can do it in both posit .
and here's two , end , on end three .
so we pick the second last , the first , and then the last element again on the third column .
and you might be surpris to find that end can be us in arithmet express .
subtract's the most common .
let's do on of those .
let's remind ourselv what x is , now .
it's on , two , three , four , five , six .
so here we go on , end minu on .
so thi mean we want to be on the first row , and instead of the last element , we want on befor the last element .
end minu on mean end , which is the index , three , minu on , which give us the on befor that too .
and here's anoth on and final , if you want the last two element of the first row in revers order , you get them .
addit is a littl bit less common with end , and it'll caus an error if you're us it to look beyond the end of a matrix or try to , like sai thi but it's perfectli legal in an assign oper , like sai thi .
notic that x ha gotten bigger .
up here , we see it wa on , two , three , four , five , six , two row , three column .
now it's <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> .
when we put end plu <num> , we said we want to put <num> on the third row .
well there wasn't a third row , so matlab ad on .
we told it what to put in the first column .
we didn't tell it what to put in the other two column .
so as usual it guess that we want zero there .
end can also be us with a colon oper .
here's some exampl of that .
let's see what we've done here .
we want row on here , and we want to start at column on , and jump by two until we get to the end .
well , row on ha a <num> , <num> , and a <num> .
we jump over that two and we get a <num> , <num> , <num> .
here we want the third row , and here's the third row .
and we want to start at the end and go backward to <num> , <num> , <num> and there's the <num> , <num> .
and in thi last on , we want row <num> here's row <num> .
and we want to start , not at the end , but at on short of the end .
that's here .
and go to the end <num> , <num> .
and so you see we have a <num> , <num> here .
well , matlab also provid a shorthand for on particular phrase <num> colon end .
let's start , first of all , by put <num> colon n <num> .
<num> , <num> , <num> .
we want to go from the first row to the last row , and we want to stick on column two , and here it is .
let's look at thi .
instead of <num> colon end , i just put colon , and then a <num> .
and it's the same thing .
the colon stand for <num> colon end .
it's a shorthand .
and , of cours , it's the same with the column indic .
so we could do thi .
and that mean we want row <num> and then all the element on that row <num> , <num> , <num> .
and , of cours , you can us it in both posit .
if we want all the row and all the column .
that's just the same as x .
so thi isn't a shorthand .
it's more like a longhand .
and of cours thi is even longer .
but all three of these thing give us the same thing .
but the point here is that matlab opt for consist , which mean it alwai let you us these express for ani index with no except .
thi emphasi on consist is a hallmark of a good program languag , and all the program languag that ar in heavi us todai , includ c , c , and java , and even good old fortran , all emphas it too .
well , so far , we've us the arrai oper just to look at element insid a matrix .
but , you can also us them to chang the valu of element insid a matrix .
let's look at an exampl of that .
i'm go to give the subarrai on to end and on .
and if we look at that , we see that's element <num> , <num> , and <num> there on the first column .
and if i give thi oper , which is an assign oper , we see that we have assign minu <num> to everi on of the element in that subarrai , in other word , the whole first column .
and you'll notic that as usual , we get to see the whole arrai when we do a subarrai oper .
here's anoth on .
now , what we've done is told matlab that we're interest in all the row and we're interest in column two and three .
and we want to set all those element , each to the valu of <num> .
arrai can be on the right side too .
let me show what i'm talk about with an exampl .
i'm go to type the same left side that i just type .
on the right side , i'm go to specifi an arrai .
there , you can see what's happen .
the arrai that i specifi on the right side just fit exactli into the subarrai that i specifi on the left side , and so matlab ha dutifulli put it there .
and the size on the right side ha to match that on the left side .
it's a rule .
let's try to violat that rule and see what happen .
here on the left side , i'm put exactli the same thing that i did befor , but on the right side , i'm give just a row vector , and that's not the same shape .
and matlab complain .
well we've learn how to chang a matrix .
now we're go to learn how to combin matric to make a new matrix .
first of all we're go to explain what the combin of matric mean .
we've got an exampl here of two matric , a , and b .
you can see them there .
and here is a matrix c which is a combin of a and b .
c ha a in it upper left corner , b in it upper right corner , anoth copi of b in it lower left corner , and anoth copi of a in it lower right corner .
and here's what it look like .
to make thi a littl easier to understand let's highlight <num> , <num> , <num> , <num> , <num> , <num> in c in red , and that's a .
a show up in the left hand corner .
and in the right hand corner outlin in green , we see b .
and then there's anoth copi of b at the bottom left and anoth copi of a at the bottom right .
so now let's see how to do thi in matlab .
we need to ask matlab to make the matric that we're go to combin .
first , let's start with a clean slate by clear our workspac .
there , as you can see , variabl ar gone .
and clear our screen .
there , nice , clean , tidi screen .
now we ll get those matric .
we're go to call them a1 , them a1 , a2 , and a3 .
we've made these matric have the same number of row and the same number of column .
and becaus of that we can put them side by side or we can stack them .
let's put them side by side .
there .
and , let's stack them .
and there we have that .
easi .
but , the onli requir for side by side ness is that thei have the same number of row .
let's prove that , by make three matric that each have two row but differ number of column .
and we ll call these bs .
b1 equal <num> colon <num> .
b2 equal <num> <num> , <num> <num> .
and b3 <num> <num> <num> , <num> <num> <num> .
let's look at these .
we ll notic that b1 ha two row .
b2 ha two row , but it ha two column .
b3 ha two row , but it ha three column .
now let's see if we can put these thing on the same row .
yep .
and let's do a littl more complic put them all there .
and we can repeat 'em if we want to and there you have it .
but we can't stack them .
let's try to do that .
matlab get mad about that .
it won't let you do that becaus the result wouldn't be rectangular .
and arrai , as you know , matric , have to be rectangular .
you might be wonder about the strang word , vertcat that pop out of nowher .
that's the name of a built in function and , as we've learn befor with the plu oper and the colon oper , matlab us function to carri out oper behind the scene .
vertcat , which mean vertic caten , just happen to be the function that it us to stack matric .
okai , the rule for stack matric is that the matric all have to have the same number of column .
you might expect us to show you an exampl of that , but we're go to invit you to come up with your own exampl , to demonstr the stack rule .
okai , we've seen how to combin matric .
now we're go to chang a matrix that we alreadi have .
we're go to transform it us the transposit oper .
here's an exampl of a matrix h .
it's a two by three matrix , as you can see over there on the right .
and what we're go to do is assign h prime to g .
that littl charact let me make it a littl , oh , let me make it even bigger .
right there , that littl thing there look like a singl quot in mathemat ; it's usual call the prime symbol .
that is the transposit oper in matlab .
and so what doe it do ?
well look at g .
first thing you notic instead of be two by three , g is three by two .
then you mai notic that the row , first row , of h is now the first column of g .
the second row of h is now the second column of g .
it chang row into column .
and when it doe that , of cours , the column becom row .
so the first column of h is the first row of g , the second column of h is the second row of g , and the same thing happen with the third column .
furthermor , the indic ar swap for each element in the matrix .
by that , what i mean is , look at that two in the top .
that is element h <num> , <num> .
it becom element <num> , <num> of g .
so the <num> , <num> becom <num> , <num> .
<num> and <num> ar swap to becom <num> , <num> .
said formal , h prime , or h transpos m , n is equal to h n , m for all m and n .
in h .
so now let's see how to do that in matlab .
and let's us the same matrix .
h equal <num> , <num> , <num> ; <num> , <num> , <num> .
we want to set g equal to the transpos of h .
and here's how we do it .
simpl .
and we can see what we've done here .
we have a row .
it chang to a column , and the second row chang to the second column .
note that h itself ha not chang by thi oper sinc it's not on the left side of an equal sign .
let's prove that .
so here's h .
still ha two row , three column .
you can us transposit to chang a column vector into a row vector and vice versa .
let's do that .
let's set x equal to sai <num> ; <num> ; <num> ; <num> .
and now let's let x equal x prime .
thi time we have chang x .
on the right side we've said we want the transpos of x , and then we've assign it on the left side to x .
so what wa a column vector is now a row vector .
now look at thi .
as you know , the column oper give you a row vector .
let's suppos we want a column vector with the same number .
so we naiv put the prime symbol there , for transpos .
and we get the same thing .
so what happen ?
well , what we want to do is first make a row vector us the colon oper and then transpos it .
but what , in fact , happen is that we transpos the five first , and then us the colon oper .
transpos the five doe noth becaus five is just a on by on matrix .
we can transpos it , but sinc it's just got on row and on column , the result is the same .
to get the colon oper to go first , we have to us parenthes , like thi .
now we get what we want .
matlab will alwai carri out the oper insid the parenthes first .
and parenthes ar import , becaus in matlab the transposit oper is rank abov the colon oper .
which mean that without the parenthes , it goe first .
and that definit wasn't what we want to happen .
so how can you find out the rel rank of the oper ?
in comput scienc , the rank of an oper is call it preced .
and after we've had a chanc to show you a few more oper , we ll give you a preced tabl with all the rank .
we're go to look at arrai addit .
there ar special rule for arithmet on arrai .
let's look at an exampl to illustr it .
x and y ar two arrai that we want to add togeth .
x is a <num> by <num> matrix , <num> , <num> , <num> , <num> , <num> , <num> .
and y is also a <num> by <num> matrix , <num> , <num> , <num> , <num> , <num> , and <num> .
in order to add two matric togeth , we have to make sure that thei have the same dimens .
so suppos we give matlab the command z equal x plu y .
what's z look like ?
well here's what x plu y equal to z mean .
on the right side , we see the two matric x and y ad togeth , and on the left side , we see what happen .
let's look at the first element on the first row .
the first element on the first row of x and y is <num> and <num> .
we add those togeth <num> plu <num> .
that's what we put at the first element on the first row of z .
let's look at the next element on that row .
x and y ar <num> and <num> .
if we add those togeth , we get <num> plu <num> , which will be <num> .
and we do thi for everi posit in the matric .
if we carri out these individu addit , we get <num> , <num> , <num> , <num> , <num> and <num> on the left side , and so z is equal to <num> , <num> , <num> , <num> , <num> , and <num> .
let is take a look at thi in matlab .
we'll give matlab someth to work with .
so let x equal <num> , <num> , <num> on the first row , and then <num> , <num> , <num> on the second row .
and we'll be lazi with y .
we'll us the colon oper .
so x is <num> by <num> .
that's six element .
y is <num> by <num> , also six element .
so let's add them and assign them to z .
ah !
matlab doesn't like thi .
it sai , matrix dimens must agre .
well we've tri to add a <num> by <num> matrix and a <num> by <num> matrix , and as we point out , that doesn't work .
so what i meant to do wa make y a <num> by <num> matrix .
by put a semicolon here instead of a comma , and now i'm go to us the up arrow to repeat that command .
z equal x plu y , and thing work just fine now .
subtract work great too .
let's try that .
let's let z equal x minu y .
and there's no problem there either .
let's look at some of these number and see if thei came out right .
with addit , well let's look at thi second element on the first row .
we end up with a <num> .
where'd that come from ?
well , there wa a <num> at that posit in x and a <num> in y .
<num> plu <num> is <num> .
and what about thi <num> on the second row of z here , when we did subtract ?
well , we had a <num> there for x , and we had a <num> for a y .
<num> minu <num> give us <num> .
and we can do a similar thing with arrai multipl .
arrai multipl is veri similar to arrai addit .
we us the same exampl , x and y , that we us to illustr addit , for multipl .
if we want to do arrai multipl , we us the dot asterisk oper .
so we sai z equal x dot asterisk y .
you mai wonder why we don't just us the regular asterisk , which is the tradit symbol for time .
that's becaus the asterisk alon is reserv for matrix multipl , which is differ from arrai multipl .
so what doe z look like ?
well , on the right side , you see the same number you saw for arrai addit , but thi time the oper is the dot star oper , and on the left the onli differ is instead of plu everywher you see the asterisk , the time symbol .
so we have <num> time <num> , <num> time <num> , and so on .
so you carri out all these multipl , and you can see the result for z right here .
well , arrai multipl ha the same rule that addit and subtract ha , that is that the matric that ar operand have to have the same dimens .
so we'll us the same exampl , x and y , that we us for addit and subtract , and here we go .
z is equal to x dot star y .
that's arrai multipl .
realli simpl , and we can check an exampl .
here's a <num> and a <num> on the first row second element , and <num> time <num> is <num> .
and if we look at the last element on the second row , we see a <num> and a <num> , and <num> time <num> is <num> .
so when might you us arrai multipl ?
well , let's clear the screen and do an exampl .
let's suppos you had an arrai of temperatur sensor , outdoor somewher , laid out in a rectangular grid , cover a few squar mile and report back to a central facil .
and todai , let's suppos thei measur these high temperatur which i've alreadi put into an arrai call high_measur .
let's take a look at these .
there .
so it's a <num> by <num> arrai .
you'd probabl have a larger arrai in a real applic , but thi is just an exampl .
and furthermor , suppos that each sensor's measur temperatur must be correct by multipli it by the sensor's calibr factor .
and that would be kept in a perman arrai of the same shape .
i've set up that arrai too and call it calibr_factor .
let's look at that on .
there .
and you can see both of these over in the workspac over here on the right .
thei were sit there .
i don't know if you d notic them .
well , to get the true temperatur , we now need to multipli each element in high_measur by the correspond element in calibr_factor .
and that's exactli what arrai multipl doe for us , so let's do that .
let's call the result high_true .
and we'll set that to high_measur dot star there's that arrai multipl oper calibr_factor , and there's the result .
if you look back at the origin temperatur up here , <num> , <num> , <num> , and <num> and so on , these ar more reason down here , <num> , <num> , <num> , and just vari by a smaller amount .
thei're more reason becaus you wouldn't expect a wide variat over just a few squar mile .
the need for calibr like thi is fairli common , and arrai multipl make it easi to do .
so now we know how arrai multipl work , and we know that matrix multipl is veri differ from arrai multipl .
in fact it differ in three wai .
first there's obvious no dot .
second , the shape of x and y must be compat , which is differ from have the same shape .
and third , the calcul of each element of z us both multipl and addit .
but first let's look at the compat requir .
here we show z , x , and y schemat .
and we've been care to give them all differ shape .
so x is clearli not the same shape as y , but it is as we'll see compat with y .
x and y ar compat becaus the width of x is the same as the height of y .
we've highlight that with the blue arrow .
to be specif , the width of the left operand of the matrix multipl oper must be equal to the height of the right operand .
put anoth wai , the number of column of the left operand x must equal the number of row of the right operand y .
let's move our schemat up a littl bit to make room to write their dimens , and there ar x's dimens .
and we've color code them to make it easi to see that the number of row , l , is the height of x .
and the number of column , m , is it width .
similarli , we show the dimens of y and color code them , so it's obviou that the number of row , m , of y is it height , and the number of column , n , is it width .
if we drop the schemat and put the dimens under x and y in the matrix multipl oper , we notic that there ar two dimens next to each other that ar equal , the two blue ms .
becaus of the wai that these ms ar situat between the l and the n , thei're call the inner dimens of x and y .
and that provid a simpl wai to state the compat rule for matrix multipl .
we simpli sai that the inner dimens of x and y must be equal .
so , what about the l and the n ?
well , thei're call the outer dimens , and there's no restrict on them whatev , but thei do have an affect on the calcul .
thei determin the shape of the result .
z will be an l by n matrix .
so to review , the width of x , blue , must equal the height of y .
the height of z , red , equal the height of x .
and the width of z , green , equal the width of y .
so , we know the shape of z , but we still don't know how it element ar calcul .
let's us matlab to see how that's done .
i've alreadi prepar a coupl of matric that we can multipli a and b .
the dimens ar <num> by <num> for a and <num> by <num> for b .
sinc the width of a is equal to the height of b , we can do matrix multipl of a time b .
but befor we do , let's put the size into a row vector , like thi .
arrang their dimens like thi show that the inner dimens ar equal .
here ar the inner dimens right here , <num> , <num> .
which is anoth wai to sai that the dimens satisfi the rule for matrix multipl .
so let's multipl them and assign the result to c .
so c is <num> by <num> , and those ar the outer dimens , <num> and <num> , of the matric a and b , as expect .
okai , so let's see how matrix multipl produc an element of c , sai the <num> on the third row .
that element is c <num> , <num> , thi on .
there , zero .
sinc c <num> , <num> is on row <num> and column <num> , it calcul involv onli the element on row <num> of a and column <num> of b .
it is calcul like thi .
now i'm go to write it out in detail .
there it is , and inde it equal <num> .
now let's look at that express .
note that the row index stai the same for a , so , <num> , <num> , <num> .
and the column index stai the same for b .
so it's <num> , <num> , and <num> .
but the inner index , thi on here , thi <num> and thi <num> , the inner index mean it's the inner index of these four , and it's the same for the a and the b .
it rang from <num> to <num> to <num> .
it rang across the entir width of a and height of b .
the product of these pair of element ar then sum to get element <num> , <num> of c .
thi same sort of calcul is perform for everi row of a with everi column of b .
and , and sinc there ar four row of a and two column of b , we get a <num> by <num> matrix .
and what happen if the inter dimens do not match ?
well we can get an exampl of that by just multipli b and a in the other order .
matlab complain .
it sai inner matrix dimens must agre .
and to show that it's right to complain , let's put the dimens for b time a into a row vector , just as we did for a time b .
so , size b thi time , size a .
sure enough , the inner dimens , <num> and <num> , ar not equal .
so matlab's right .
but then matlab's alwai right .
so that's how matrix multipl is carri out .
but when might you want to us matrix multipl ?
well , let's clear the screen .
there !
nice and tidi , and look at an applic .
we'll us the same two matric , a and b , and here thei ar again , a , b .
suppos a given a row of a repres number of share of each of three stock .
and each row give the share own by on of four person .
so person number <num> own on share of the first stock , two share of the second stock , and three share of the third stock .
person <num> own four , five , and six share respect , and so on .
suppos also that each column of b repres the gain in dollar of three stock .
column on give the gain for the stock on on dai , and column two give the gain on the second dai .
so look at column on , we see that on the first dai the first stock gain <num> , the second stock gain <num> and the third on gain <num> .
look at column two , we see that on the second dai the first stock lost <num> and the other two gain <num> and <num> respect .
well to calcul the profit that on person would have made on a given dai , we need to multipli the number of share time the gain for each stock on that dai and then add the three product togeth .
so for exampl to calcul the profit for the first person on the first dai , we would multipli on share time <num> , to get <num> and two share time <num> , to get <num> and three share time <num> to get <num> and then add these three product togeth to get <num> .
then we'd repeat that process for each person .
.
.
that's each row of a .
.
.
and each dai .
.
.
that's each column b .
well that's exactli what matrix multipl doe for us .
so let's do it .
there ar four peopl in two dai , so there ar eight distinct profit to calcul , and the result ar all laid out neatli in matrix c .
hm , let's see .
the first person profit about the same on each dai , <num> and <num> .
the third person did much better on the first dai didn't make anyth on the second dai , and by compar the column , we can see that everybodi did better on the first dai than thei did on the second dai .
matrix multipl made thi calcul easi , but thi oper ha applic far beyond the stock market and far beyond financ .
the applic fall under the head of linear algebra , and you can find mani exampl in book on thi subject .
there ar two type of divis , the so call matrix divis , and arrai divis .
we're go to take up arrai divis first .
and there ar two type of arrai divis .
here's how you divid x and y .
first of all , there's x . y , and then there's the x . y .
in the first case , it kind of look like x is over y , so that's x over y .
and the other on sort of look like x is under y , so we'll call that x under y .
and we'll explain what both of those mean .
here's an exampl .
you see an x and a y .
thei're both the same shape and size .
that's requir for arrai divis .
and now , let's suppos we us that first exampl , x . y , x over y , and put that in z .
so what doe z look like ?
well , over on the right side , we see x written out and y written out , separ by the dot slash oper .
and over on the left , we see the result .
let's look at the first element on the top row .
we see <num> slash <num> .
over on the right , we see a <num> and a <num> in those posit .
so <num> divid by <num> equal <num> over <num> , and that's what we get for z .
of cours , matlab will carri that out and give you <num> .
everi singl on of the element in z is equal to the correspond element in x divid by the correspond element in y , and that's what dot slash y mean .
here's what it look like , the result , in matlab , when all these divis ar carri out .
and when thei're assign to z , thi is what z look like .
no surpris there .
and what about the backslash case ?
well , everyth's the same except that <num> , instead of be divid by <num> , is divid into <num> .
thi is the <num> under the <num> case .
so <num> under <num> , what do you think that's go to be ?
well , it's <num> instead of on half .
<num> goe into <num> two time .
same thing happen for everi element at everi posit .
here's <num> over <num> .
i mean , here's <num> under <num> , and we're show you that it's the same as <num> over <num> .
and here , the number is carri out to four decim place , and here's what you see when it's assign to z .
you should try some exampl of your own to get us to thi arrai divis , but don't forget the dot .
if you leav the dot out , then you ar in a strang new territori call matrix divis .
matrix divis ha differ rule complet .
in fact , it's quit a complic concept in linear algebra , and we're not cover it here .
but if you want to check it out , you can try the advanc concept in the textbook and get a detail explan .
now , let's look at exponenti .
<num> caret <num> .
the caret is the exponenti oper , and <num> to the 3rd power is what that mean .
<num> to the 3rd power is <num> .
not surpris .
but what might be surpris is that you can do exponenti oper with arrai .
arrai exponenti work sort of like arrai multipl .
at least the rule ar the same .
let's look at x , <num> , <num> ; <num> , <num> .
and let's let n equal <num> , <num> ; <num> , <num> , x dot caret n is the arrai exponenti oper .
the dot mean arrai exponenti , just like the dot mean arrai multipl when we have dot star .
and let's look at the result .
what thi mean is the first element of x on the first row , <num> , is rais to the first element on the first row of n .
so <num> to the 6th power of cours is <num> .
the second element on the first row of x is rais to the power of the second element on the first row of n .
so we have <num> rais to the <num> <num> power .
well , that's the squar root of <num> .
down here , we have <num> rais to the <num> power .
well , that's <num> <num> , and <num> rais to the <num> power , which is <num> .
so that's arrai exponenti .
there's no real surpris there .
as you mai have guess , if we go to matrix exponenti , thing ar go to be more complic , just like thei were more complic when we went from arrai multipl to matrix multipl .
we'll onli cover on case , and that's the case in which the second operand is actual a scalar .
let's do that .
x matrix exponenti <num> .
what thi mean is x is multipli by itself us matrix multipl three time .
so it's the same as thi x time x time x , and you can see you get the same result .
it's not possibl to rais to x to a power like thi , unless x is a squar matrix .
that's true becaus , as you mai rememb for matrix multipl , the width of the first matrix ha to be equal to the height of the second matrix .
sinc both these matric ar x , that mean the width of x ha to be equal to the height of x .
and that's the definit of a squar matrix .
we've seen that there ar strict rule on the size , and shape of the operand for both arrai and matrix oper .
for arrai oper , the matric must have the same size and shape , while for matrix oper the width of the first matrix must equal the height of the second on .
now , we're go to see that matlab waiv these rule when on operand is a scalar .
we'll show how it work with some exampl .
i'm go to gin up a coupl of matric first .
here's my favorit , and it's so easi to type .
and anoth on .
just pick some random digit here .
and we'll start with addit .
you ll rememb that the addit of two matric requir that thei have the same size and shape .
a and b here ar both <num> by <num> , so we can add them .
and let's do it .
there , no problem .
but we can violat the same size and shape rule if on operand is a scalar .
so let's do that on .
there .
i've got the matrix a which is <num> by <num> , and i've ad a scalar , which by the wai is a matrix that's <num> by <num> .
and <num> by <num> doesn t match <num> by <num> , but no error messag .
and what happen ?
well , you can see here , if we look at a , the first element is a <num> .
we've ad a <num> to that <num> to get a <num> .
second element on the first row is a <num> .
we've ad a <num> to that , we've ad a <num> to everi on of them .
and that's the gener idea for ani arithmet oper that mix a scalar and a matrix .
the oper is repeat for each element us the scalar as on of the operand .
and the scalar can come first or second as for exampl there .
which , as you would expect , doe the same thing as a plu <num> .
let's do some more exampl .
a minu <num> subtract <num> from each element .
<num> dot star a multipli each element by <num> .
<num> star a , the matrix multipl version , doe the same thing .
and we can divid too .
let's see , a . <num> , arrai divis of a by <num> , divid each element by <num> .
.
and you can go the other wai .
<num> . a divid each element of a into <num> .
.
the matrix version of divis with a scalar and .
a matrix don't work though , so <num> , sai , divid by a .
.
matlab that doesn't like that .
.
and a under <num> , also give an error .
final , the arrai version of exponenti work as you might expect it to .
a dot caret <num> appli that expon , <num> , to each element of a , so it squar each element .
and it work the other direct too .
let's look at a again so we can rememb what's in there .
here , we have <num> becaus we've rais <num> to the <num> power here .
here , we have <num> becaus we've rais <num> to the <num> power .
you have an <num> becaus we've rais <num> to the <num> power , and so on until we get all the wai down here to <num> , which is <num> rais to the 6th power .
so arrai exponenti work fine with a scalar .
but as we've just seen , the matrix version of exponenti is kind of picki .
a caret <num> is no good unless a is squar , and of cours , a is <num> by <num> , so it's not squar .
all these special case with scalar mai requir a littl memor .
it's just like idiom in a spoken languag , but veri littl memor for two reason .
first , the case of addit , subtract and multipl work exactli the same as thei do in ordinari mathemat calcul .
so you might be familiar with them alreadi .
and second , you can alwai try out unfamiliar case on small exampl to see whether thei work , and what thei do .
that's what i do .
we've seen mani of matlab's oper now , but we haven't yet seen how to determin the order in which thei're appli in an express .
well , the order is determin by two set of rule preced and associ .
we'll look at preced first .
we ran into preced earlier in thi lesson when we us both transposit and the colon oper in the same express .
we had a surpris then .
you mai rememb it .
the transposit oper , which wa written after the colon oper , wa actual appli befor the colon oper .
it just transpos the <num> , which did noth .
transposit went first , becaus it rank higher than the colon oper .
to make the colon go first , we had to add parenthesi , like thi .
those parenthesi forc the colon oper to make the row vector first , so the transposit oper could then make it into a column vector .
well let's look at a more familiar exampl , on involv arithmet .
here the multipl oper is written after the addit oper , but it's appli befor the addit oper .
so <num> is multipli time <num> first to get <num> .
and then <num> is ad to get <num> .
it's not the left to right order shown on the right , which would result in <num> time <num> equal <num> .
here again , the non left to right order happen becaus the oper on the right outrank the on on the left .
thi time it's multipl , which is rank higher than addit , and it goe first .
in program , we call thi rank preced and we sai that multipl ha a higher preced than addit .
have multipl go befor addit seem like the obviou thing to do becaus that's the wai we've alwai done it .
with other oper , it's not alwai so obviou .
so , how do we find out the order ?
well , we us a preced tabl .
thi is a preced tabl for all the other oper that we've cover so far .
start in the top , we find the parenthes , which have a preced of <num> .
next we have exponenti and transposit , which both have a preced of <num> .
befor we look further , it's import to note that lower number actual mean higher preced .
so parenthes with their <num> preced alwai oper befor all the other oper in an express .
come in at <num> , both multipl and divis come befor addit and subtract , which ar at <num> .
down at the veri bottom is the poor old colon oper , which explain why it came after the transpos .
at the number <num> posit , you mai be wonder what unari plu and unari minu ar .
well unari mean that the oper involv onli on operand .
here's some exampl of unari oper , up there at the top .
plu <num> , x , and h transpos .
unari oper tend to rank high in ani program languag , and in matlab thei're at posit <num> and <num> .
but the more common oper ar the binari oper , which mean that thei take two operand , and here you see some exampl .
<num> minu <num> , x dot star y , which , you will rememb , is arrai multipl .
x star y , which is matrix multipl , and a to the 3rd power , which is exponenti .
the binari oper rank below the unari oper with the notabl except of exponenti which is wai up there at <num> .
well we've seen how preced work .
and we've seen that unari oper tend to come befor binari oper .
but there's on other determin of order of oper .
associ .
associ is simpler than preced , and we'll start with a veri simpl exampl <num> plu <num> plu <num> .
a comput can carri out onli on oper at a time , so it add the <num> to the <num> to get <num> , and then it add the <num> to <num> to get <num> .
the order is left to right , simpl .
but what about thi , <num> minu <num> plu <num> .
which goe first ?
the minu or the plu ?
we need to know becaus the result will be differ , <num> or <num> .
well , mayb the preced tabl will give us the answer .
hm , no help .
thei both have the same preced , <num> , so here come associ to the rescu .
in program , the order in which oper of the same preced ar execut is call associ .
in matlab , it is alwai left to right .
so we sai that matlab us left to right associ .
as a matter of fact , so most all other languag do .
so thi express evalu to <num> .
here ar a coupl of other exampl .
<num> divid by <num> equal <num> .
<num> time <num> give <num> .
both of these oper have a preced of <num> .
in the last express , <num> to the <num> power is <num> , and <num> to the <num> power , well , we'll have to ask matlab .
whatev it is , i'm sure it's a pretti big number , so let's do that , in fact .
let's ask matlab to evalu some express that requir it to us these rule .
okai , let's start with the first exampl we did to illustr preced .
<num> plu <num> time <num> .
as promis , multipl ha the higher preced , so the actual order is like thi .
the redund parenthes show that <num> time <num> goe first .
that give <num> , and we add <num> to <num> and get <num> .
and if we forc addit to go first with parenthes , we get a differ result .
<num> plu <num> equal <num> , and <num> time <num> give <num> .
as i've mention befor , we're us to carri out multipl befor addit , even when addit is written first in the express .
let's look at someth that's not so familiar , the colon oper with addit .
so i'm go to type <num> colon <num> plu <num> .
surpris ?
well , rememb that the plural colon oper ha a lower preced than all of the arithmet oper .
to be specif , the colon is at <num> while addit and subtract ar at <num> .
and smaller number go first .
so , thi is what we did .
the <num> plu <num> went first , so we're given the colon oper <num> colon <num> .
if you want to add the <num> after the colon oper ha made it row vector , you need to forc it with parenthes like thi .
there , we got <num> , <num> , <num> , and then we ad <num> to each element , and got <num> , <num> , <num> .
and by the wai , note that we're ad a scaler to a row vector .
so thi is an exampl of a scalar be ad to a matrix .
in thi case , the matrix ha just on row .
but as for ani matrix , the scalar is ad to each of it element .
if you don't know which oper goe first , you have three option .
on , us parenthesi to forc the order .
two , try an exampl and learn the order .
or three , look at matlab's preced tabl and read the order .
so , where is thi preced tabl ?
well , it's right at your fingertip .
just type help preced .
and there's matlab's preced tabl .
you'll note that there's no parenthesi here .
well matlab just figur it's easi for you to rememb that parenthesi alwai go first .
we show that thei alwai go first by give them a preced of <num> .
you'll also note that there ar some oper here that we haven't look at yet .
well , we'll get into them in later lesson .
now , let's look at some exampl of associ .
onc again , we'll start with the same exampl that we us when we introduc the subject <num> plu <num> plu <num> .
the actual order is like thi , <num> plu <num> in parenthesi plu <num> .
becaus as we've seen , matlab alwai evalu from left to right when the oper have the same preced .
and of cours , sinc we have two pluse , thei have to have the same preced .
but you can't tell with addit , if we forc right to left order with parenthesi like thi , we get the same result , as you knew we would .
when the right to left order give the same result as the left to right order , the oper is said to be associ in both mathemat and comput scienc .
so addit is associ .
but what about thi ?
the actual order is like thi .
the <num> minu <num> goe first , becaus at the risk of be bore , or perhap i should sai even more bore , matlab alwai evalu from left to right when the oper have the same preced .
if we forc right to left order with parenthes like thi , the result is differ .
so subtract is not an associ oper .
and when we mix subtract and addit , which have the same preced , like thi , sinc thei have the same preced , the order is , well , you know .
i just can't bear to sai it again .
now let's look at multipl and divis with thi exampl , which we've seen befor .
and let's us a pair of redund parenthesi to make the order explicit .
thi on sometim surpris peopl becaus it might look like multipl should go first .
it doesn't .
that's becaus divis and multipl have the same preced .
so the order is determin by matlab's left to right associ rule .
oop , said it again .
if we forc right to left order with the parenthesi , the result is of cours , differ .
and final , i sens that you ar burn with curios to find out what <num> to the <num> to the <num> equal .
well , as promis , i'm go to ask matlab right now .
<num> to the <num> to the <num> .
sinc the left hand carat goe first , thi is <num> to the 3rd power .
and as i guess befor , it's a pretti big number .
<num> , <num> .
but just out of curios , what would the answer be if the <num> were rais to the <num> power first and then <num> were rais to that power ?
well , we'll have to us parenthes to find out .
<num> to the <num> to the <num> power .
the result is differ , which show that exponenti is not associ , and the result is a realli big number .
let's sai , that's <num> , <num> , <num> .
kind of amaz you can get such a big number with just a <num> , a <num> , and a <num> .
well , i guess i'd have to sai that's the power of exponenti .
get it ?
the power of exponenti .
well , on that hilari note , we've reach the end of lesson two .
hi , welcom to lesson three , function .
so far , what we've learn is how to perform individu oper with matlab and we've us matlab as a glorifi calcul .
but now , it's time to start program .
you'll rememb that we've call a few of matlab's built in function .
for exampl , to plot line in a figur , to calcul the squar root , to calcul the sine and to do other thing .
and there's hundr more function that we could call .
what if we need a function that's not provid by matlab ?
guess what ?
we can write our own function and we can us them just as if thei were built into matlab .
let's see how .
the built in function name rand , creat random number between zero and on .
the number ar uniformli distribut and that mean that ani number in that rang is equal like to be chosen .
here's an exampl of how we might call it .
creat a thre by four matrix of random number between zero and on .
you can see the first argument , we gave us the three and the second on , the four , the height and the width of the matrix that's return .
and you can see these number ar all between zero and on , but what if we need random number between on and ten instead ?
that's easi enough .
and here's some number between on and ten .
multipli them by <num> , stretch the rang to go from <num> to <num> and ad <num> shift the rang to go from <num> to <num> .
let's sai , we need thi function repeat .
we could type in thi express everi time we need it , but that would be annoi .
and more importantli , it would be error prone .
we might mistyp someth on or more of these time and result would be wrong and potenti might not even notic it .
so let's creat our own function that doe what we want it to do , then we can just call that function repeatedli .
let's call it myrand .
we creat a function by us the editor .
let's see what that is .
we can get it with the command edit .
e d i t .
turn and there's the editor window right there .
the editor is the place that you type in code that you can save in a file and the code we're go to type into the editor will be a function .
we type thi function myrand .
return .
a equal <num> plu rand three four time <num> .
return .
and i'm go to put an option end in here .
notic that function and end both turn blue .
these ar the kei word .
we'll sai , someth about that a littl later .
the word myrand is of cours the name of our function .
so now what do we do ?
well , we want to be abl to run thi function and in order to run the function , we have to save it into a file .
matlab remind us that we haven't yet save it in a file with thi littl word untitl and thi littl asterisk right here .
okai .
to save our function into it file , we click thi littl diskett right over here .
up pop our oper system file save window and it's suggest that we name thi myrand . m .
that's a good idea .
thi is no time to be imagin .
we're go to name it just that .
we could pick anoth name , but it's veri bad practic to do that , becaus it's veri confus .
first off , we should alwai us the same name for the file not count the dot m here that we us for the function name , which is myrand in the case .
and second , the dot m is requir .
all matlab must be store in file with the extens dot m .
and as a result , thei ar all call dot m file .
okai .
let's save thi file .
we hit save .
and notic that the file is save right here in the current folder , that's exactli where we want it to be , becaus that's where matlab look for it when we tell it to run it .
okai .
we've open the editor , we've type in a function , we've save it into a file .
we can now run it by type it name in the command window , just like we would for a built in function .
let's do it .
wallah .
there's our three by four arrai of random number select from a rang of on to ten .
let's review what happen when the function ran .
it wa onli on statement , so it's pretti simpl .
express over here on the right wa evalu , it wa assign to the variabl , a .
and sinc we didn't put a semicolon at the end of the statement .
by the wai , that's why thi littl orang highlight show up .
there's a littl hint there that sai , termin statement with semicolon to suppress output in function .
that , that onli happen , that littl yellow thing , onli happen in a function .
anywai , we didn't put a semicolon there .
so matlab print the valu of a in the command window .
no surpris there .
let's print that valu again .
it's undefin .
if you check the workspac , it's not there .
why ?
we didn't clear it .
so where did it go ?
ha thi workspac quit work ?
someth strang is happen here .
let's investig .
let's assign a simpl scalar valu to a sai , three .
and there it is in the workspac , as it ought to be .
a equal <num> .
okai .
let's run myrand again .
we got a new set of random number as expect , but look over here at a .
can it valu still be three ?
wait a minut .
yep , hi valu is still three .
it's not a random matrix , what's go on ?
well , monami , allow me to elucid .
there's a sai in nevada , what happen in vega , stai in vega and that sai , fit what's happen here .
a function ha it own privat workspac and what happen in that workspac , stai in that workspac .
dure that littl fraction of a second that myrand wa run , i should sai , fraction of a microsecond .
the variabl a wa creat right here .
store in myrand's workspac and then when myrand wa done , it workspac wa delet .
it doesn't show up in the command window's workspac .
the a that we see there is a complet differ variabl from the variabl that wa creat over here .
on that wa assign thi arrai of random number is gone forev along with these valu down here .
all we're left with is the printout of those valu .
you can look at them , admir them , but we can't assign them to a variabl in the command window or us them in ani other wai .
the variabl in the disappear workspac ar call local variabl in comput scienc terminolog .
these ar variabl that ar defin by assign statement insid the function and thei can be us onli insid the function .
here's the textbook definit .
local variabl .
a variabl that is access onli by statement insid on function .
a local variabl exist onli dure the function call .
well , thi is not good .
a function typic calcul result and if we can't us the result of the calcul after the function close , what good is it ?
we need to be abl to propag that result from the insid the function out into the outsid world .
we do that with an output argument .
let's see how that work .
let's chang myrand just a littl bit here to make a an output argument .
we do that by type a equal right here between the function keyword and the name of the function .
now let's save our function .
we come up here and you'll notic that thi littl diskett is blueish and i'm go to click on it and watch it chang to grei .
there .
that mean what's in the file here is the same as what's on the screen .
and that's import , becaus when we call the function , the code that will run is the code that's insid the file .
now let's run myrand .
now we get the result twice here and here .
so why is that ?
well first , while the function's run , matlab print the result of thi assign statement right up here , becaus we don't have a semicolon at the end of it .
so thi is the first printout and you can see it sai , a equal , becaus we have a equal up here .
and then after the function is done down here in the command window , matlab echo the result of the valu that's return from thi call of myrand right here and here it is becaus we don't have semicolon after that .
these two valu ar the same , so we see the same number twice here and here .
oh , and in case you've forgotten thi variabl end that appear out of nowher is that variabl , that's automat creat by matlab whenev it calcul a valu that's not explicitli assign to a variabl .
thi wasn't explicitli assign to a variabl and so , it made thi variabl end to accept the valu .
and what about a ?
look like it's final gotten the valu we want to have .
so let's doubl check that .
no .
it's still equal to three , becaus thi a here , the on we see in thi workspac is the on that we set in the command window not the on that we setup here in the function .
it make no differ that we declar a here to be an output argument .
an output argument is still a local variabl and it live onli as long as the function is run .
it just happen to be the local variabl that hold the valu that we want the function to output .
it still disappear as soon as the function's done , just a split section after it valu is sent to the command window .
no matter how mani time we run myrand , the a in the command window will be unaffect .
it's not the a in the function , so it just stai equal to three .
okai .
let's tell matlab not to print from insid the function .
we don't need that .
semicolon right here that should take care of that .
now when we run myrand , thi statement insid the function right here won't caus ani print out and we'll see onli on copi of the random number .
but befor i run it , i want you to note that the diskett icon is blue over here indic that we've chang the content of the editor , but we've not yet save those content into the m file name myrand .
and there ar two other indic that we've not save yet .
the file name here in the current window and the file name here on thi littl tab in the editor .
both have an asterisk after the name .
that also mean that we haven't save .
now , i'm go to click in the command window and watch what happen .
there .
thi disk icon is grei .
thi file name doesn't have an asterisk after it and thi file name doesn't have an asterisk after it .
thi is a new featur of the latest version of matlab .
when you click anywher outsid the editor window in version <num> b .
matlab automat save the function into the file .
if you have an earlier version , you'll need to rememb to click the diskett icon , or us the appropri keyboard shortcut , such as ctrl s or cmd s , or whatev your oper system might provid to save the file befor you run it in the command window .
okai , let's run it again .
now , onli on copi of the output appear .
that's good , but we should still captur the output into a variabl of our choos instead of and , you know , which is the variabl that matlab choos .
so , how about i don't know b .
there , we look over here , we see that there's a b , and it sai it's a three by four arrai doubl .
we'll explain what that mean later .
you know , you can look at these variabl , so let's click that , doubl click it , and you see the arrai laid out here , that's insid b .
and i'm go to close that .
cours , we don't usual need to see thi output , so on last thing , we could put a semicolon .
thi time i'm go to us a c , semicolon .
so , now noth happen here .
but the c get the valu , as you can see .
here it is .
there , c ha the valu .
there's the c .
c got a differ valu than b becaus everi time we run myrand , we get a differ set of random number .
okai , we have our function work perfectli .
what if we also want a three by four random matrix with valu between two and five , as oppos to on and ten ?
what would the formula look like for that ?
let's see .
right now , we got the number rang between on and ten .
and we did that by ad on here .
and multipli by nine .
and nine wa the rang between valu from on to ten , which is ten minu on .
so , we could get the number , thei rang from two to five thi wai .
and those number look like thei rang from two to five .
the reason i wrote <num> minu <num> instead of <num> will be appar in a minut .
okai , so to us thi formula should we write anoth function ?
no .
what we should do is modifi myrand to be more gener .
it should be abl to provid a three by four matrix of random number between ani two limit we want .
we can do thi by provid two input argument to the function that specifi the limit we want , then us those two argument in the formula .
let's do that .
the input argument come after the function name here , and go in parenthes .
and if there ar two or more of them , thei must be separ by comma .
let's name them low and high .
befor we go further , i want to take a minut to explain thi yellow pop up .
thi thing right here .
it's a tip to help us with program .
it sai that the input argument low , right here , might be unus , and it suggest what we might want to do , if thi is okai , well , it's not okai , we ar go to us it , we just haven't us it yet .
thi tip is matlab's wai of help us while we write our code .
it's gentli suggest that we might be forget to do someth .
becaus after all , why would we requir an input to myrand if we weren't go to us it ?
if we hover the mous over high , we get the same sort of warn about that argument .
and also , both high and low ar highlight , as you can see here , to alert us that someth might be wrong .
these highlight will disappear , and you'll notic that when we us low and high in the calcul of a .
then , we're go to put both low and high in that calcul right now .
so here's low , and thi , rememb , is the differ , high minu low .
by the wai , input argument , just like all the other variabl .
the output argument in a function ar local variabl .
so , you can't read them outsid .
now , you can see why i us <num> minu <num> instead of <num> down here when i wa do thi calcul , of the random number from two to five .
it wa to emphas that when you give matlab the rang two to five or low to high , in gener , the onli wai to know what the rang is that you're go to multipli by here , that is the differ between high and low , is to subtract .
well , okai , let's try out thi more versatil version of our new function .
i'm go to put the valu in a variabl call test and give it two argument , <num> and <num> .
and i'll put a semicolon there so we won't have anyth print out in the command window .
befor i hit return , let's think what happen .
first , the input argument low , right up here , will get the valu <num> becaus it's the first argument .
and the input argument high will get the second valu , <num> becaus it's second .
then , thi function will us low and high in thi express to calcul the random number .
third , sinc a is declar right here to be an output argument , it valu will be return when the function close .
it will show up right down here .
the wai a valu is return is no differ from the wai a valu's return from ani function , like the built in function .
when we sai return , we simpli mean that the valu , thi valu , whatev it is insid a , is insert right here at the point where the function wa call , which in thi case is in the command window in the right side of thi equal sign .
okai , let's execut .
there .
let's look at test .
now it look right .
and the number seem to be between two and five .
now let's try to look , take a look at low , which wa our , on of our input argument .
well , we get a messag here that sai undefin function or variabl low , did you mean flow ?
well , that's someth els that we might have meant , but no .
what we want to do is just establish again , and it shouldn't be a surpris , that you get no low in the command window .
thi low is in here , and myrand , and it's just a local variabl just like high is .
neither on of them ar avail outsid the function .
now , let's tell myrand to us the rang we start with .
rememb that , on to ten ?
let's put that in .
test two .
i don't think i'll put a semicolon thi time , so we can just take a look right at it .
yeah , look like that goe from on to ten .
these number ar between on and ten .
work like a charm .
wonder if it work with neg number ?
let's go for minu to sai , to six .
did you notic that littl hint we got there ?
it's give us a hint with our own function .
it'll do thi with a built in function .
it'll do thi with ani function that you creat .
it show you that there's coupl of argument , low and high and there thei ar up there , just the remind you .
so where wa i ?
i wa go to do minu <num> to <num> .
minu <num> to <num> .
yeah , it look like these number rang from minu <num> to <num> .
we've got a realli versatil function here .
okai .
let's clear the screen and clear the workspac .
our function ha to scalar as input and on matrix as output , but what if you want your function to return two output ?
no worri .
there's an easi wai to do that .
let's sai , we want myrand to comput the sum of all the element of the gener random matrix and return both the matrix and the sum .
now let's add a coupl of statement to calcul the sum of the element in a .
got my cursor there , hit return .
these two statement will do it .
you might be surpris by the first on of these statement .
sinc a is a matrix , when we put parenthes after it , you'd probabl expect to see us put two indic insid them , you know , separ by a comma to specifi an element on a given row and column .
instead , we've given just on colon here .
there's a special wai of index in matlab .
when you give just on index for an arrai , matlab treat it as if all it column were stack up into on long column vector and that index pick out on element in that vector .
and when that index is a colon , it mean you want all the element in that vector .
and in here , in thi statement , when you give the built in function sum , an argument that's a vector , it return the sum of all the element in that vector and sinc v ha all the element of a .
we're go to get the sum of all the element of a and that's what we want here .
by the wai , if we were to give sum the matrix a directli instead of a vector , we'd calcul a set of sum .
on for each column of a and it would return them in a row vector , but that's not what we want here .
okai .
so we've got the sum .
now we've got the matrix in a .
let's see how to return both a and the sum that's in s now that we've calcul them .
we make a veri small chang in the header of myrand that is in thi first line , like thi .
there .
we now have two output argument , a and s .
we can have as mani output argument as we want as long as put them in squar bracket , like thi and it's recommend that thei be separ by comma .
okai .
let's run it .
first , we have to save it .
i can save it automat , simpli by click in the command window , sinc thi is version r2014b of matlab .
but i'll remind those of you who ar us earlier version that you'll need to save your function manual everi time you chang them .
and you can do that by click on thi littl blue diskett icon over here .
okai .
here it goe .
i'm go to give it two , three as argument and there's our matrix .
wait , who store the sum ?
where did it go ?
well , we didn't save it in a variabl , so matlab threw it out .
it catch onli the first result of a function nd the first result in thi case wa the matrix , which wa store in a .
if we want to catch two result , then we need to provid two variabl to catch them , like thi .
i'm go to give variabl x and ss .
i'm go to do two , three again .
there .
look like s got the , x got the matrix and s ha got the sum .
now you see the syntax for catch more than on output return by a function ?
we need the squar bracket again , just as we did up here in the function argument , output argument .
and thi time , the comma is total option .
well , we've seen what happen when we call the function without enough output argument .
we just lose some of them .
what happen if we call it with too mani output argument ?
sai , three , in thi case .
let's go , i don't know , minu <num> to <num> .
we found out that neg work and matlab complain .
error us myrand .
too mani output argument .
well , sorri matlab , we'll try not to do that in futur .
now we know enough to studi the formal definit of mat lab function .
a function's interfac with the world is defin in a header at the begin , and that header is call the function declar .
the declar start with the function keyword .
and to remind you that it's a keyword , matlab highlight it for you in blue .
then come the output argument , if you have ani .
if you have more than on , the squar bracket ar requir , otherwis thei can be omit .
and if you have output argument , even on of them , then you have to have an equal sign , otherwis it can be omit .
next come the function name .
and the same rule appli for function name as for variabl name .
then come the input argument , if ani .
if you don't have ani input argument , then parenthes ar option .
otherwis , a comma separ list of input argument name goe between parenthes .
okai , that's the formal descript of the function declar , but let's see some exampl .
you can have zero , on , or multipl output argument , and zero , on , or multipl input argument , and you can have them in ani combin .
in fact , here ar all nine possibl , start with a case in which there ar no output and no input argument , in exampl on .
and end with a case in which there ar multipl output argument and multipl input argument , in exampl nine .
and what about function name ?
first off , the name of the function should be descript .
for exampl , if you write a function that comput the fibonacci seri , don't call it f or x .
instead , call it fibonacci or fibo , or someth that suggest it purpos .
and stai awai from the name of built in function , becaus that can get veri confus , veri fast .
if you see a function call sqrt , for exampl , you're go to expect it to return the squar root of it argument .
and furthermor , if you name your function sqrt , you won't be abl to call the built in sqrt , you'll be run your instead .
how do you know whether or not there's a built in function with a name that you'd like to us ?
us the built in function name exist .
the command , help exist will help you learn how to us it .
as we've seen , on function can call anoth function .
for exampl , my rand call the built in function rand and sum , but built in function don't have to be involv at all .
our own function can call each other as well .
we could , for exampl , defin a function call bob , which we save into bob . m , and a function mari , which we save into mari . m , and bob could call mari , or mari could call bob .
furthermor , we can defin multipl function in the same m file , and have them call each other .
why , you mai ask , would we put two function in the same file ?
well , if the problem we're try to solv is complic , we'll want to break it up into sever function .
but if those function ar not like to be us for solv other problem , then it make sens to keep them all in the same m file .
let's see an exampl .
let's rewrit the last version of my rand .
let's see .
leav all thi the same .
what ar we go to , get rid of thi .
instead of call sum here , we're go to call sum all element .
now , that's not a built in function , so where is it go to come from ?
where ar we go to put it , right here ?
let me get rid of thi end statement .
we're go to put it right here in the same file .
i got rid of the end statement , becaus if you have more than on function in a file , either thei all have to have end statement or none of them can have end statement , and it's extra type so i've just gotten rid of it .
we've creat a separ function for sum up the element .
thi is , of cours , a veri simpl exampl , and there's not much of an advantag to do thi here .
but later we'll see exampl of when it matter .
in ani case , you can see how simpl the syntax is .
the second function keyword right here indic that the first function ha end and the second on ha begun .
function that ar defin in the same file like thi behav , in most respect , just like other function .
the onli differ is o , onli the first function up here , which is call the main function , can be call by other function outsid the file .
the other function , in thi case , we onli have on , ar call subfunct or local function .
and thei can onli be call by function insid the file .
like other function , all their variabl ar local , and thi mean that the variabl in a function ar unavail to the command window and unavail to all other function , whether or not thei're in the same file .
so , v is not avail insid my rand , a is not avail insid sum all element .
and none of these variabl ar avail down here insid the command window .
well , let's see if thi thing work .
let's see , we'll do the same exact command that we did befor we made the chang .
there .
work .
the onli wai to exchang inform between these function is with input and output argument .
in thi case , when we call some element from insid my rand , we us a as an input argument to pass it valu into sum all element .
that valu , which happen to be a three by four arrai , is copi from a into the input argument m insid sum all element .
note that we calcul the sum of the element of the three by four arrai which is n , m , the same wai as we did befor , but thi time , the calcul is done insid sum all element , and the arrai we're work on is insid the variabl m .
note that we can't us the variabl a here insid sum all element .
we can't , becaus it's a local variabl of my rand .
and the local variabl of my rand ar unavail insid other function .
okai .
so we pass the arrai into sum all element , via an input argument .
and after we calcul the sum , we need to send that sum back to my rand .
well , insid sum all element , thi local variabl suma is declar right here to be an output argument , so that mean when sum all element is done and close the content of that suma , which is the sum we want , will appear right here in my rand , where sum all element wa invok .
and then , it'll be copi into s , and when my rand end , and that'll go back to the command window .
or whoever call thi function , my rand .
the pass of inform via input and output argument when on function call anoth is the same for ani function , whether it be a subfunct or not , and whether it's a built in function or not .
okai .
so , that's how thi thing work .
you can put as mani subfunct in an m file as you want , but the first function , you should rememb , is alwai the onli on that can be call from outsid .
okai .
we've point out that local variabl ar visibl onli within the function in which thei're defin .
so , even though the variabl v wa just given a valu by sumallel and we call it .
of cours , it wa call from myrand .
we call myrand and it call sum all element and then v wa given a valu .
even though all that happen , we can't access v from insid the command window .
let's try it , v .
i told you in comput scienc terminolog , we express thi local variabl restrict by sai that a function's variabl have local scope .
scope is defin as the set of statement that can access a variabl .
and thi limit that the set of statement that can access a variabl ar just insid the function of which the variabl is defin .
it's actual a good thing .
it keep thing simpl and local variabl ar all we need in the vast major of case .
in thi limit of scope to adjust the set of statement insid a function ha a comput scienc term too .
it's call local scope .
let's look at that .
local scope is access by statement in onli on function or onli in the command window .
but in some veri , veri rare case , two or more function and or the command window mai need to share a variabl .
so mayb the command window need to share thi variabl v .
well , let's see how to do that .
we do it by creat a variabl whose scope can extend outsid the function , such a variabl is call a global variabl .
let's suppos you want to make v global .
and somewher in the function befor v is us , we insert thi declar and i'm go to put it right here befor v is us global v .
there .
i'll put a semicolon , you don't have to have on .
by the wai , in matlab , you cannot combin thi global declar with an assign .
so for exampl , you couldn't just do thi , global v and then put equal m colon like that .
and in that case , you wouldn't need thi statement at all , do it like that .
that'll be handi .
i mention that you can't do that , becaus you can do it in some other languag .
okai .
so let's go back .
if i go right up here , you'll see thi littl revers undo thing .
let's undo .
undo .
undo .
there .
we're back to where i want to be .
okai .
now , if you make the same declar in the command window or in anoth function or in multipl function or wherev you want to access thi global variabl , it'll be access there too .
we'll do it in the command window .
there , you can see v show up here .
now when we run myrand and let's do that .
just run myrand and give it i don't know , five , six .
make no differ what we give it for thi purpos .
if we access v or attempt to in the command window , there it is .
thi time , we can get v .
now what is v ?
it look like a big long vector and it is .
if i scroll up , that's what it is .
rememb , when we made v equal to m colon .
thi two dimension arrai m had it column stack up into on long column vector and that's what we see here .
but the point right now is that v is access both in some all and in the command window .
okai .
now you know how to make global variabl .
but the next thing , i'm go to tell you is veri import .
don't us them .
global variabl can caus error that ar veri difficult to diagnos , becaus on function can chang the valu insid anoth function .
you know , like a ghost move the furnitur around and you can't know which function did it .
it's not that global ar inher bad , thei're not toxic .
and sometim , thei're the best approach .
but until you have some real experi with program , you're far better off leav them alon .
you should probabl avoid us global variabl until you've been program at least sai , i'm go to make it two year .
for the rest of thi cours , we won't need them at all .
and we certainli didn't need on here .
so , i'm go to remov thi on befor i forget .
there .
all gone .
let's look at some of the advantag of function .
first off , function allow you to break down larg complex problem into smaller more manag subproblem .
and a typic comput program consist of mani such function , each of which solv on subproblem .
an analog can be drawn from real life .
suppos you bui a tabl from ikea .
well , it's assembl gui might describ how to put togeth on leg in detail .
then instead of repeat that descript three time , it'll just sai , and i do thi for the three remain leg .
sai do thi three time is similar to call a function three time , and it's much more effici than repeat the descript or repeat the code .
in particular , function that you decid to write ha a great impact on your program .
in gener , you should try to group togeth close relat task into a common function .
and task that ar not relat should go into separ function .
the process of break down a complex problem into smaller on is call function decomposit .
and master the art of decomposit will help you becom a good programm .
there ar mani advantag to function .
for exampl , there ar whole set of function call librari that ar avail on the internet with so call open sourc licens , mean you can modifi them , you can us them in your own program for ani purpos includ sell them .
us function that other peopl have written in your own program is sometim call code reus .
and code reus help you avoid reinvent the wheel .
also a function typic solv , not just a singl instanc of a problem , but a gener set of relat problem .
it doe thi by accept vari valu for it input argument .
the built in function sqrt for exampl , comput the squar root of ani number or ani matrix of number .
the built in function plot can gener an infinit number of differ plot depend on it's input .
even our littl my ran function ha a consider degre of gener .
these advantag to function ar so great .
and most matlab programm put all the code thei write insid them .
and we're go to get lot of practic in thi cours do just that .
there's a second kind of m file that we haven't cover yet .
it's an m file that doesn't have a function in it .
thi kind of m file is call a script .
a script is just a collect of matlab command .
if you type the name of the script's m file and hit enter , matlab simpli execut these command , on by on , as if you type them into the command window yourself .
it's import to note that a script is veri differ from a function .
first , a script never return a valu or accept input argument .
and second , the scope of the script is the scope of the command window .
so command in a script access variabl that ar alreadi in the command window workspac .
and thei can put new variabl into the workspac with assign , just as you do when you're give command in the command window .
let's do a veri simpl exampl .
i'm go to make a script call exampl_script .
matlab tell us that thi thing doesn't exist .
do we want to creat it ?
i'll sai ye , and i'm go to put , do not show thi prompt again .
okai , we see a tab show up here with the name exampl_script .
we got a blank page , we can type it in .
befor i do , note that i've clear the workspac , so there ar no variabl over here .
so i'm go to make a variabl call x by set x equal to <num> , and there we see x is in the workspac .
you'll see why i did that in a minut .
and i'm go to put two more variabl there with thi script , y and z .
i'm go to do that with two assign statement , y equal x plu <num> .
i think i'll leav that semicolon off , and z equal <num> time y .
not a veri excit script , but it'll do .
now , back here in the command window , to run the script , i just type the name of the script , which is exampl_script , and hit return .
the first statement in the script access x over here in the workspac .
so , you know that it ha access to x .
and each command , the first on and the second on , put a new variabl over here in the workspac , y and z .
matlab print y's valu to the command window becaus i didn't put a semicolon up here at the end of the command .
that happen just as it would have if i had type that command directli into the command window .
so when would you us a script ?
well , you'd us it when you want matlab to repeat a set of command in the command window mani time , and you don't want to type them mani time .
you tell matlab what's suppos to happen , just like a script sai what's suppos to happen in a plai or a movi , by write a script .
okai , let's make on more script , call endlessonthre .
i'll us the edit command just as i did when i want to make a function .
and i'm go to put three command in thi on .
we'll look at the function fprintf in the next lesson .
it just print out , thi conclud lesson <num> .
the command paus , with that <num> as an input argument , paus for five second befor the next command is execut .
we need it here , becaus without it , you won't have time to see the output from fprintf befor matlab quit .
okai , let's run it .
'kai , endlessonthre , return .
oh , okai , i'd better hurri .
goodby , i'll see you in lesson four .
hi and welcom to lesson <num> toolbox .
thi week we'll be talk about the tool that ar program environ like matlab give us to help creat us program .
these tool includ the mani built in function that matlab suppli .
we've learn about a few of these alreadi , but now we're go to cover mani more of them .
we'll see how we can print on the screen in a nice format manner , and how we can creat graphic output .
and perhap most importantli , we'll see how matlab can help us track down and elimin the error that inevit creep into our program .
befor we look at new tool , let revisit on we've us alreadi , the squar root function .
suppos i want to take the squar root of <num> .
well , we know what that is , <num> .
no surpris there .
let me show you someth that perhap is surpris .
i'm give squar root a matrix .
so , i'm go to ask you to take the squar root of matrix .
what doe it do here ?
well , the matrix i gave it wa a <num> by <num> matrix .
<num> , <num> , <num> , <num> , <num> , <num> , i specifi it right here in the input argument .
what squar root doe is go to each on of these element , take the squar root and put it in the correspond posit in a output matrix that's the same size as the input matrix .
so , we got squar root of <num> is <num> , squar root of <num> is <num> , <num> goe to <num> , squar root of <num> is <num> , <num> squar root of <num> .
so , thi is an exampl of someth that is not support by all program languag .
it's polymorph .
if the type of an input argument to a function can vari from on call of the function to anoth , it's call a polymorph function .
polymorph mean have multipl form .
and polymorph is a power featur becaus it allow on function to handl a huge varieti of input , which can save us a huge amount of work becaus we avoid have to write a huge varieti of function .
furthermor , as we'll see , not onli can the type of the input argument vari .
but the number of argument can vari as well .
and we can make the function' behavior chang when the type or number of argument chang .
mani built in function in matlab emploi the first form of polymorph by return an output that's shape like it's input .
for exampl , as we've seen , if we call the squar root function with a 3x4 matrix , it will return a <num> by <num> matrix .
we call it with a <num> by <num> matrix , it'll return a <num> by <num> matrix and so forth .
thi shape shift of the output to match the input is , in fact , the predomin form of polymorph in matlab and , it's veri conveni .
but not everi built in function behav that wai .
we'll look at on right now that doesn't .
function sum doesn't behav thi wai .
let's make a vector , v .
you put some element in it .
doesn't make a differ what it is .
and let's give thi vector to sum .
there , i guess that's right .
two , three , four , yeah .
it sum up the element of the vector .
now let's give it a matrix .
let's make the matrix a , you put the <num> , <num> on the first row , <num> , <num> on the second .
so there's a .
let's give sum a .
when you give a matrix to sum , it return a row vector and each element of it is the sum of on column of the matrix .
so , <num> plu <num> is <num> .
<num> plu <num> is <num> .
howev , when you give it a vector , like we did up here , it's vector v .
it return a scalar that's equal to the sum of the element of the vector .
so sum is polymorph , but the output that it return doesn't have the same shape as it input .
we've seen how to make a function return more than on argument .
well some built in matlab function do that , the maximum function for exampl .
here we gave max a four element row vector .
and it return the maximum number in that vector element that's equal to <num> .
now let's ask max to give us two output and see what happen .
i give it the same input .
thi time it gave us an <num> and a <num> .
the <num> is still the maximum number .
the <num> is the index of the maximum number .
so the fourth element here wa where the maximum wa so it return <num> .
note the return two output argument is not the same as return on output argument that is a vector with two element .
size doe that .
s is a vector , it ha two element , <num> and <num> .
thi is a <num> by <num> matrix , so it return that vector <num> , <num> .
and when i sai vector just to establish that , here's the first element .
there's the second element .
the function max wouldn't allow us to catch both output as a singl vector but size doe .
howev , the function size make it possibl also to save the element of it output in anoth wai .
like thi .
thi time , it put the number of row in the first output argument .
and it put the number of column in the second output argument .
so , size behav differ depend on the number of output argument we ask for .
thi is anoth exampl of polymorph , polymorph base on the number of output request by the caller of the function .
note that if you want to write a function that ha these polymorph properti , you know , the on that depend on the number of output argument , you have to write it that wai .
it's not someth matlab doe for you .
we'll see later how you do thi .
so far we've alwai creat matric manual , like thi .
there's a two by four matrix .
but matlab ha a few function that let you creat matric or arbitrari size realli quickli .
here's on .
you can see what it give you , zero .
a matrix of all zero and thi wa a five by six matrix .
what if you want on ?
you can get those too .
what if you want all five ?
well .
that's the wai you get that .
oh and let look at thi .
just give him on argument , oh , a four by four .
thi is anoth exampl of polymorph .
if you give it two argument , the first on's a number of row , the next on is a number of column .
if you give him on argument , you're give row and the column .
if you want a vector , let's do on .
thi give you a row vector .
if you want a column vector , we'll do it with zero .
and if you want a diagon matrix , you can have that .
suppos you want a matrix with seven , three , nine , on on the diagon .
seven , nine , on .
there you ar .
a diagon matrix of cours , ha element that ar nonzero onli where the row index equal the column index .
so here's on , on .
thi is two , two , three , three , four , four .
we won't look at random number now .
random number ar veri import in mani field , such as signal process and on and on .
and matlab ha some differ function to support thi .
we've seen rand in the last lesson , but let's revisit that on now .
and rememb rand , there .
it output number between zero and on that ar uniformli distribut on that rang , mean that ani number in the rang zero to on ha the same probabl of be return by rand at ani given time .
and as we've seen , it can return matric .
thi is on we did a lot of in a function call myrand .
and , and like these other matrix produc when you give rand on input argument , it treat that as a number of row and column and you get a squar matrix .
now in our previou lesson , we show how to get a rang other than zero to on by combin rand with arithmet oper .
for exampl , here's how you get a five by four matrix with number between on and eleven .
what if you want random integ in that rang ?
well , first note that the whole number part of these number rang from on to ten .
if we could just drop the fraction part , we'd have integ that go from on to ten .
well matlab provid the function fix that'll do that .
it return the whole number part of a number .
in other word , fix round the number toward zero .
let's just give fix the express we just came up with .
so i'm go to hit the up arrow .
i'm go to put parenthes around thi .
there .
it doesn't have to be a on there , that time .
but these number rang from on to ten , i'm go to repeat that command .
and there you see some number , a littl bit differ , there is a on there , mayb that's reassur that it's on to ten .
but matlab will do better than that , it provid a function that return random integ , it's call randi .
rand i .
and i'm go to give it three argument .
ten , you can see all these hint there .
there's lot of differ wai to call it .
five , four .
that ten mean that we want integ that go from on to ten .
the five and the four sai that we want a five by four matrix of them , and so there thei ar .
and by now , you probabl correctli guess that randi is polymorph .
if you give it just two argument , the first on's still treat as the maximum possibl integ , but the second argument give the number of row and column of a squar matrix .
so randi <num> will return a five by five matrix of integ between <num> , or rang from <num> to <num> .
you can also call randi on other wai .
well more than on other wai , but as you can see there , if you give a vector for thi first argument of two element , five sai ten .
that mean you want number that rang from five to ten .
and now two , three .
sai that we want a two by three matrix of them .
mani time , we need random number that have a normal distribut instead of a uniform distribut .
thi is also known as the gaussian distribut .
sometim it's call the bell curv .
here's how you get that .
you us the function randn .
the n's for normal .
i give it a five .
oh , the input sort of the same .
a five mean a five by five matrix .
the number rang from minu infin to infin , cluster about zero with a standard deviat of on .
and a lot of time , we want a lot of these number .
suppos you want a million of them .
better not forget that semicolon .
there , it didn't take long , gener a row vector of a million number distribut normal , with a mean of zero and a standard deviat of on .
now let's look at thi distribut us the hist or histogram function .
figur pop up .
and we see a nice littl plot and you can see thi bell curv here .
the first argument is the set of number , the list of number .
we got a million number there .
and the second argument is the number of bin , so there's <num> bin divid up .
in a reason wai , matlab doe that .
and you can see the number of point of the , actual , the number of random number that wa gener by randn .
in thi littl rang right here around zero , veri larg and it drop off as we get out here and thei get more rare and more rare .
we've seen a number of wai to get random number from matlab .
now i'm go to tell you a dirti littl secret about these random number .
thei're not random .
for exampl , the first time we call rand after we start matlab , it return <num> . <num> .
that exact same number everi time .
go ahead .
try it if you don't believ me .
not all that random , is it ?
and why is that , you mai ask .
well , a comput is a determinist machin .
everyth it doe is determin by an algorithm .
there's no real random involv .
so you don't get a truli random number , instead , the random number gener us some fanci math to gener a pseudo random number sequenc .
it's pseudo becaus it seem to be someth that it's not , but the sequenc of number that it gener sure look random becaus there's no discern wai to predict the next number from the on that came befor it .
for almost ani purpos , unpredict is all we need and that's what we get , well , almost .
when we start matlab , the algorithm is initi the same wai everi time so we gener the same sequenc everi time .
now that mai seem like a bad thing , sinc it alwai give us the same number .
in fact , it's a good thing .
it's a featur , not a bug , as the popular sai goe among us programm .
it's a featur becaus it help us dure the develop of our program .
when we're develop a program , we often us the random number gener to give us mani of thousand test case .
and just as often , we need to see what happen when we chang the program , but us the same input .
well , the onli wai to do that is to gener the same number repeatedli .
so , it's veri us that matlab gener the same pseudo random sequenc each time it start .
of cours , restart matlab everi time you need to restart the random number gener hardli seem conveni .
so , matlab provid a separ function that will reiniti the random number gener for you without restart matlab .
it's call rng , which you might guess stand for random number gener .
it take an input argument and it us that to determin the sequenc that rand will produc when you call it .
it also us a neat trick to let you initi randomli .
thi trick allow you to get a differ sequenc everi time you're on your program even if you restart matlab in the meantim .
all thi mai sound complic , it's realli not .
let's switch to matlab and you'll see .
okai , to demonstr thi pseudo random idea , i've quit matlab .
and i'm go to restart and ask it for three random number .
there , matlab's awak and i'm ask for the three random number .
and there thei ar , thei look pretti random i guess let me copi those to my clipboard .
now let's do that again .
let's quit , and restart .
you know thei look pretti familiar .
let's take a look at that clipboard .
there .
yeah , that's the same number .
look like everi time matlab wake up from oblivion , it start all over at the same point .
sort of like groundhog dai .
and that wa a great movi by the wai .
so anywai , here's how to have a new groundhog dai anytim you want it without quit and restart matlab .
first , let's get rid of these number we past on here .
and then , i'm go to call rng and give it an input of zero .
give it that zero as input reset the random number stream to the begin , right where matlab alwai start it .
when it first open up .
so we get the same number .
you can us ani other non neg integ to start at a differ place in the pseudo sequenc .
on for exampl .
there , that start to set a new posit .
and by the wai , rng set both randn , for the normal distribut , and randi , for the integ too .
let's look at those .
i'm put them all in bracket here so that thei'll be on on line and on vector .
and gave randi on argument .
when you do that , it give back on pseudorandom number i should sai on pseudorandom integ rang from on to that argument .
and you can start at that same point in a random sequenc anytim you want to .
we gave rand the on twice so we start at the same posit twice and got the same number both time .
or you can start at some other point .
i went up arrow to get that command back and i'm go over here to chang thi on to a two .
and of cours , if i repeat that command , same random number again .
if you want a more random sequenc , an actual random sequenc instead of thi pseudorandom busi , you can input a string , the string shuffl to rng like thi .
let me go back and chang my argument over here , to the string , s h u f f l e .
gotta end that string with anoth singl quot .
let's repeat that .
see if we get the same thing .
no , and let's repeat it again .
we're get differ number in the sequenc even though we're input the same argument to rng everi time .
well , how doe that work ?
well , it us that trick i mention to start the pseudorandom sequenc number stream at a random point .
it doe that by get the current read of the system clock to gener to gener a truli random number .
sinc that clock ha a microsecond resolut , thi is all but guarante a random sequenc that will never be repeat .
you can type in lot of stuff in the command window in respons to matlab's littl doubl than greater than prompt here .
i'm go to clear all that awai .
clear the workspac and clear the window there nice clean slate .
what if you want to have your function get input in the same wai that matlab get it in the command window ?
other word , your function would print a prompt in the command window and allow the user to type input into it .
but you can make that happen by us the function name input .
let's illustr it in a function that we'll write call on more .
let's see , there .
it won't take ani input argument but it will return on output argument will call that a and here is the code insid .
the argument input must be a string so you have to type someth insid singl quot .
and give it just on more command and so and thi function and that's it .
so let's run it and see what happen .
well the first thing that happen is give me a number buddi print out .
whatev you put in quot here show up first and then you see thi blink bar .
thi blink vertic bar at the right which sai to the user , look , ar you go to type someth or am i just go to wait here forev ?
and wait it will right there in that state probabl forev until your comput burn up , blink awai , until the user type someth and hit enter .
cours you can stop it with a ctrl c but we're go to give it pi  over <num> .
i hit enter or return .
matlab evalu pi  over <num> insid the command window , get <num> . <num> and feed that to the function input .
input then return that valu so it show up right here on the right side of the equal sign insid the function .
that valu <num> . <num> is then copi into x in thi assign .
in the last statement in the function add <num> to <num> . <num> it's <num> . <num> and assign that to a .
final , on more return with the valu insid a that's <num> . <num> .
which is on more than the user type in , henc the veri clever name , on more .
the sequenc of charact that begin with the g in give me and end with the space after the colon here to here is a prompt .
it's a littl fancier than two greater than sign like down here but it's still a prompt .
whatev prompt you want input to print for you is fine but you have to give it a string or it'll caus an error .
and what the user type down here where the blink vertic cursor is ha to be a matlab express that's legal .
it could be a number , a variabl , a vector , a matrix even a string and it can involv arithmet oper , function call and so on .
it just ha to be a legal express .
onc the user hit enter , matlab evalu the express and hand it to input and input return it as an output argument .
in thi particular case , it's assign to x .
note that matlab pai no attent at all to what's written in thi prompt regardless of the type of object that the user type in .
all of those thing i just mention , it'll be accept .
the fact the prompt tell the user to put a number in mean noth to matlab , it's of no consequ .
a program's work is no us to anyon unless it commun it result to the outsid world .
so far , we've taken advantag of the fact that a command that's not follow by a semi colon , automat ha the valu that it calcul print to the command window .
matlab provid a far more sophist wai for print , with the fprintf function .
here's a veri simpl exampl which you saw at the end of lesson three .
there .
it print it string to the command window .
well , except for the back slash and the n , which togeth have a special mean in fprintf .
we'll look at that in just a minut .
it can also print to a file , we'll explain the requir for print to a file later for now we'll concentr on print to the command window .
fprintf requir at least on argument , it's first argument is a string .
it's not just ani string , it's call the format string becaus it specifi the format in which print is to be done .
such as the number of decim place to be us for print number , the horizont space , the vertic space , etc .
it includ the word that ar to be print along with the number .
in thi first exampl , the backslash and n togeth we call that a n .
specifi vertic space , it mean go to a new line the n is for a new line .
let's see what happen if we omit it .
i'm go to hit up arrow , space over here and get rid of the n and hit return .
see the differ ?
the prompt appear immedi after the last charact in the string , right after the <num> .
but when we had the new line specif , a new line wa begun after the <num> .
so the prompt appear on a new line , all by itself .
let's put that new line specif back .
in fact , let's put a coupl of them in there .
now you see the differ ?
right here after the <num> ?
we had a new line which brought us here and then we had anoth new line , which brought us here and then came the prompt .
okai , that's how to print a string with fprintf and how to make it skip to a new line .
but we need to look at thi function more close becaus we need to see how to print variabl valu with it .
when you want to do that , which is most of the time , you includ the name of the variabl that you want to print as addit input argument after the format string .
we'll illustr how it work with an exampl function call check out .
i've got it type in alreadi , save in an m file .
here it is over here , i can load the m file simpli by doubl click on it in the current folder window .
i'll do that and here it show up in the editor .
i'll explain it in a minut but first i want to just go ahead and run it .
there .
i gave it two argument , <num> and <num> . <num> .
and it print out <num> item at <num> . <num> each , total equal <num> . <num> .
the number that i gave as argument ar pass in as input argument .
and ar copi into n and price as usual .
so , insid the function n ha the valu <num> , price ha the valu two point <num> and then total is calcul by multipli them togeth here .
and final , fprintf is call .
as in the typic case that i mention , there ar addit input argument to fprintf follow the format string .
so here's the format string and here ar the addit argument .
in thi case , n , price and total .
and these three argument contain the valu that we want to be print us the format specifi in our format string here .
when there ar valu to be print , the format string will contain percent sign .
you can see them here .
there's on for each argument to be print .
first percent sign correspond to the first argument to be print .
the second on correspond to the second on .
the third to the third and so on .
in thi particular format string , there ar <num> sign correspond to the three argument .
the percent sign is call an escap charact .
you can think of it as caus fprintf to escap temporarili to escap from print each charact in the format string and instead do someth special .
in thi case , the special thing it doe is print on argument .
after each percent sign is a format specifi .
format specifi is a sequenc of charact that togeth , tell matlab the precis format to us when print the correspond argument .
the format specifi alwai end with a letter and there mayb a number often a decim number between the percent sign and that letter .
for exampl , in thi format string , the first format specifi end with a d and the other two each end with an f and the second and third specifi includ number .
the letter at the end , like the f here is call a convers charact .
it's call a convers charact , becaus it tell matlab how the valu of the argument is to be convert to print output .
the number here , the <num> in thi case , provid a bit more detail as to how the print is done as we'll learn in a minut .
thi method of specifi the format of print output and the function fprintf itself , both come from the languag c , which adapt them from earlier languag .
and thei've sinc been includ in mani other languag as well , includ c and java .
so , if you tackl these languag after you learn matlab , you'll have a head start on print out .
we ar go to look now to what these specifi did .
but first , i'm go to grab the border between the editor window and the command window and move it up a bit , so we can see everyth at onc .
there .
okai .
let look at the first specifi in our format string percent d .
right here .
the convers charact d mean print us scientif notat , except for whole number , which will be print without us either a decim point or a scientif notat .
here we see that n , thi n here , which had the valu three .
thi print as a simpl three and here it is .
three , becaus three is a whole number .
follow thi d is a space and the word item at space , then come anoth percent sign .
so we see thi space , item , space , at space .
by the wai , you can see all the possibl escap charact and all the possibl convers charact by give the command help fprintf or doc fprintf .
but we're go to give you enough inform to get you start .
the next escap sequenc is thi . 2f here .
the convers charact f , mean print us fix point notat instead of scientif notat .
so that's just normal decim notat .
it's good for smaller number .
the two after the decim point here , specifi the precis .
it mean that exactli two digit must be includ to the right of the decim point , even if thei're all zero .
if you replac that two by a zero , then the fraction part and the decim will be omit .
so we see down here , the valu in price , which wa <num> . <num> as print and there ar two digit to the right of the decim point .
after the on , come a space and the word each , which were copi from the format string .
in comput scienc terminolog , the combin of the percent sign and the format specifi , it's a special case of an escap sequenc .
an escap sequenc is ani sequenc of charact that start with an escap charact and ha special mean .
well , after the word each here , we see the by now familiar backslash n , which we've learn mean start a new line .
well , the backslash is anoth escap charact .
we've had the percent now and the backslash .
and the two charact sequenc , backslash n is anoth escap sequenc .
so , after the each , we start our new line and the next thing print .
just total space equal space dollar sign .
total space equal space dollar sign .
then up here in the format string , we hit the third percent sign .
the five in thi decim number here , mean print us at least five space .
sinc f is the format specifi , these five space can includ a minu sign if the number is neg , some digit befor the decim place .
the decim point itself and some digit after the decim point .
in thi case , two of them .
if more space ar need then more will be us .
here we need onli four space to print the valu that's in total , which is <num> . <num> .
becaus we have the eight , the decim point and the requir two digit to the right of the decim point .
in a case like thi , when fewer space ar need than ar specifi , some blank will be insert befor the number .
in thi case , just on blank is requir to us up that fifth space .
it mai have occur to you that we mai occasion need to print a percent sign or a backslash or a singl quot .
two of these ar escap charact and the last on end the format string .
so how in the world do we print em ?
well , you just put two togeth with no interven space .
here i'll show you in the command window , start with a percent sign .
here we can see that these two percent sign print it out as on percent sign , while thi singl on is treat as an escap charact introduc the format specifi point 3f , which specifi fix point represent with three digit after the decim point as happen right here .
to print a backslash , us two of them with no interven space .
backslash , backslash , like thi .
so here's a backslash , backslash , which print a backslash .
and we even ad a new line after here , which is why we need three back slash .
and do you rememb we got on more ?
how about a singl quot .
there .
two in a row doe it again .
format output and fprintf can be frustrat at first , becaus there ar mani pitfal .
most common pitfal is that strang thing can happen if the number of percent sign doesn't equal the number of argument follow the format string .
if there aren't enough argument , then print will stop at the first unfulfil percent sign and the string will be truncat right there .
let's look an exampl first with <num> sign and four follow argument , as thei should be .
that's fine , look like the begin of a recip for a big chocol cake , on with a pound of butter over here .
watch what happen if we forget the last argument that is thi <num> .
so now we just have <num> , <num> , <num> over here .
there ar four percent sign and thi time onli three valu to print .
so fprintf get to the fourth percent sign right here and doesn't know what to do .
it print <num> pound of butter , <num> teaspoon , <num> tablespoon of cocoa , <num> cup of flour , comma , and print the space .
and then there's noth left .
in thi case it follow the safest path when in doubt leav it out and it stop print right there .
there is no back slash n , so no new line .
so what happen is the , prompt just print right here at the end .
and what if there ar more argument than percent sign ?
well that's even more confus .
let's put on too mani .
there ar four percent sign , so let add a fifth argument and see what happen .
wait , i think i need to widen the command window first .
that'll be wide enough .
let me jump down on space .
and there's my command .
and there , <num> pound of butter .
that's a lot of butter .
well , what happen in thi case is that matlab recycl through the format string to print the extra argument .
so after print <num> cup of sugar , here at the end of all of thi , it's at the end of the string it find thi <num> .
it goe all the wai back to the begin of the format string and start all over .
he us thi first percent d to print the <num> .
print that <num> , then the space , lb space butter comma space , it get to thi percent d , and it's out of argument so it stop right there .
again , it doesn't make it to the backslash n again , so no new line , so the prompt show up right here at the end .
there's a reason for thi recycl featur .
it allow you to print a whole vector of number with on format specifi , like thi .
here i put the format specifi , <num> . 1f after thi percent .
then a new line .
and we've got a vector with six number in it .
so what's go to happen , is thi string here is us to print <num> .
we get to the end .
we're readi for anoth argument .
come back and print again then print again and print again and print again .
thi is a special featur in fprintf function in matlab .
both these pitfal , too few argument and too mani , will plagu anyon who print with fprintf .
i've got the scar to prove it , and there ar even more pitfal when you start print charact string or us more sophist format specifi .
on the plu side though , when it's behav itself , fprintf is capabl of some pretti fanci output .
well , while we're on the subject of fanci output , let's look at plot .
matlab ha an extrem power plot facil , and it's workhors is the built in function plot .
you mai rememb we saw it in lesson on .
well we're go to go over it again with a bit more detail thi time .
the easiest wai to us the plot function is simpli to pass a vector to it .
so let's get a vector .
thi is just a list of the squar , the number from on to ten .
and plot it is done like that .
and there we go .
there's our plot .
as we saw in lesson on , it show up as a separ window and it's label figur , figur <num> .
we dock it last time like thi , show up right here so now we've got the command window visibl .
but i'm go to undock it .
now , it cover up the command window .
but if i click in a command window , it uncov it .
where did it go ?
well , it's still there .
it's just behind .
i'm go to move thi down a littl bit , or actual squeez it down .
leav a littl room up here .
and then i'm go to resiz thi figur window .
hm , put it up here , so i can see thi figur , and i can have other figur laid out here .
i think i'll start thi on over to the left .
okai , so where wa i ?
oh yeah .
thi , so thi is a half of a parabola .
to plot both side of the parabola , we can do thi .
so there's a littl longer vector , it's the squar of the number from minu ten to ten .
i want to plot thi on in a separ figur .
if i just plot now , it'll replac the figur that i've got , and i don't want to do that .
i want to compar these .
so you mai rememb the figur command .
i can type figur and i'll get a figur <num> , or i can actual tell it i want figur <num> .
either wai , there's a new figur .
and i can plot into it .
there .
let's make thi on about the same size as the other on and you can just chang the aspect ratio too .
and let's tuck them over here right side by side .
so now we can see the whole parabola there .
and you'll notic that matlab pick a rang , pick zero to ten here to get all the point .
pick <num> to <num> here .
well you might wonder , shouldn't thi go from minu ten to ten but no , all we did wa give it the a , which is these number here and these index here , these indic go from <num> to <num> .
and thei just repres the indic of the element in a .
to properli plot a mathemat function like thi , we need to pass two vector of the same length , on with the x valu and on with the y valu .
let's do that .
t is go to be my x valu , b will be my y valu .
so t goe from minu ten to ten .
and b is just the squar of those number .
so , let's get a new figur window .
and let's move it over here , size it the same as the other .
and thi time we're go to appli it with two argument .
there .
the argument of vector , the t and the b and thei have to be the same length .
and thei give the horizont , and the vertic coordin respect .
so now we see that the rang , or actual the domain down here , goe from minu ten to ten , as we want it to do .
and the rang here , y axi goe from <num> to <num> .
again , matlab pick these for us .
it's also easi to extend thi idea to put more than on plot in a figur .
so sometim you want to compar two plot right in the same figur .
you can do thi with plot becaus it's polymorph .
it accept a vari number of argument , as we've alreadi seen .
so let's do an exampl of that .
we're go to plot x1 versu y1 , and x2 or versu y2 on the same plot .
so let's get these vector readi .
there , i had these command alreadi type out ahead of time , to save us some time .
here we've got x1 , and i space thi out so you can see it start from <num> .
it goe in increment of <num> , and it goe up to <num> pi  .
and then , the other vector , y1 , is equal to the sine of these number .
the sine is polymorph , if you give it someth of the shape of a vector , it return someth exactli the same shape .
and that's great , becaus we want x1 and y1 to be input to plot .
and thei have to be the same length .
here's anoth plot , x2 and y2 .
x<num> start at pi  over <num> .
it increment by <num> and it goe to <num> pi  .
and y2 is the cosin of those number .
x2 and y2 have the same length , so thei can be plot versu each other .
x1 and y1 have the same length , so thei can be plot versu each other .
and both these pair , even though thei have differ length from each other , can be plot on the same plot .
let's do that .
note that the order is x , y that is horizont , vertic and x , y horizont , vertic .
and here goe our plot .
note that the plot show up in figur <num> in place of what wa there becaus we didn't give the command figur again .
notic that thei're two differ color .
matlab pick the color for you .
there's a default set of color .
you can specifi the color and we'll show you how to do that in just a second .
but i want to point out that your version of matlab might us differ color .
matlab just recent chang it default set of color .
in an older version , the first on would be blue , the second would be green .
in thi version , the first on's , i would sai , blueish and the second on is reddish .
so let's chang the color to be let's make the first on bright red and the second on black .
and let's make the second on a dot line .
we can do all thi with on command .
let's get a new figur .
and i'm go to repeat thi command that i just did but i'm go to alter it a littl bit .
after the x1 , y1 , i'm go to insert a littl short string .
quot , r quot comma .
that's go to tell plot to plot thi as a red line .
and then here , for the second on , i'm go to put quot k colon quot .
thi k is for black .
why not b ?
well , b is alreadi taken up for blue .
and thi colon mean plot as a dot line .
so here we go .
and let's make thi a littl smaller .
and tuck it in over here .
i guess i'm go to have to move all of these just a littl bit .
nice and neat .
so you can see that thi is in fact , a red line .
the default is that it's a solid line .
and thi is black .
and if you look close , you can see these dot .
you can get lot more line style with the command help plot .
let's do that .
now scroll up a littl bit .
and there thei ar .
over here on the left , you see the color .
in the middl , you see the mark that you can , the marker that you can plot .
and over here , blind .
we haven't plot ani marker yet .
let's do that .
in fact we can mix all three of these togeth .
i want to plot an exampl with on from each column .
in figur <num> , let's see , do that and return here .
i pick figur <num> .
when i do that , you'll notic that figur <num> got highlight , and now , i'm go to plot .
i'm go to plot t and b again .
i'm go to us an m for the color magenta , a doubl dash for dash line and a , and an o that can be upper case or lower case to put marker that ar littl circl on there .
and here we go .
isn't that pretti ?
it's magenta , it's got the dash line and it's got thi circular marker on here .
well , we've seen up here how to plot two thing on the same figur .
other and other wai to do that .
you can call plot multipl time and us the function call hold .
let's see how to do that .
let's do it in figur <num> .
we first make figur <num> the activ figur with the command figur <num> , so there .
you can also do that by click figur <num> with the mous .
we notic that it's highlight up here , rel to the other figur .
now let's replac the current content of figur <num> with a new plot .
so we type a plot us the same x1 and y1 that we defin earlier .
and there it is .
in red , which is what we request .
now we give the command hold on .
onc that command is given , all subsequ plot to figur <num> , which is a figur that wa activ when we gave the whole command , will be made on the same ax in that figur .
the previou plot won't be replac .
so let's do that .
we'll plot x2 and y2 thi time .
and let's , as we did befor , us a black dot line .
there .
and notic that the rang of the ax were adjust accordingli .
and just like when we plot everyth in on fell swoop with on call to plot .
when we're readi to replac the current plot in figur <num> with someth els instead of ad to it , we give the command hold off .
when the command hold off is issu , all subsequ call to plot while figur <num> is activ will replac the previou plot in that figur instead of ad to it .
so watch figur <num> while i replot x1 and x2 with i don't know , green asterisk .
hm , that's a littl garish .
anywai , as we show you in lesson on , there ar addit plot option not reachabl through the plot function itself that you can get via separ function .
these option will enhanc the visual qualiti of a plot that's alreadi plot .
let's appli some of them to the plot in figur <num> .
there , that's the activ figur now .
you mai rememb that grid turn on a graph paper like grid , repeat the command turn it off and on .
and like hold , it can be us with the term off and on , as but we'll us it without thi time .
let's see grid and you see thi grid show up here .
and now grid again , turn it off .
and on more time , becaus i want it on .
there .
now it's on .
and you mai rememb the titl x label and y label command .
let's let's do those again .
and there thing ar nice decor , as you can see here .
anoth handi function is the legend command .
it'll insert a legend right there in the figur , with a note about each separ plot in the figur , let's to do that on .
there up here you see blue line here correspond with thi .
or bluish , it's the same shade .
and the word sine , and then the reddish line that correspond to thi on with cosin .
and the order of these is the same .
the order here is the same as the order in which we plot them .
so what you just need to do is rememb that the first thing we plot wa the sine , and the second wa the cosin and the legend will be straight .
if you want thi legend to appear somewher els , in thi case , it wa a nice blank spot up here , that's where it show up .
but if you want it here or here , or somewher els , even just outsid here next to the plot , you can do that .
you need to just check the option in help legend .
and final , we'll remind you that you can control the rang of the x and y axi , with the function name axi .
let's do that .
axi take on argument , which is a vector of four number , with the left and right limit , right here , of the plot , follow by the lower and upper limit right here .
pleas note that despit that fact that it affect both the x and y axi up here , it name is axi .
i probabl mistyp thi command as a x e s <num> time .
there is an ax command , but it's far more sophist than the work that on normal need to do .
you probabl won't want to us it .
anywai , watch figur <num> up here chang when i hit return .
okai ?
on , two , three .
there .
as alwai , you can get more inform about thi function or ani function with either the help command or the doc command .
okai , that's it for our second instal on plot , except for close the figur .
you can do that with the function close .
either on at a time , like thi .
figur <num> and <num> ar gone , you can't get them back , except by repeat the command that did the plot and the decor .
and you can close all the open figur at onc with the close all command , like thi .
now we've got all thi room i think i'll stretch the desktop back to full size .
and i think i'll clear everyth .
there , all done with plot .
a sad fact of life is that it's easi to make mistak when write .
human's ar pretti good at fill in the blank , so when we read a stori we can understand it even if it ha typo or miss word , grammat error and such .
when you're write instruct for a comput , you have to be veri precis .
and your grammar must be <num> correct .
a happier fact of life is thi .
the easiest program error to make ar syntax error .
and thei're also the easiest on to find and fix .
it's easi to forget a comma or a squar bracket for exampl , but when you do matlab will complain with on of those red error messag and you can fix it .
semant error ar more problemat .
you'll rememb that these happen when you , what you wrote is legal but it doesn't do what you meant for it to do .
sometim matlab can catch these semant error .
for exampl , suppos you have a ten element vector .
you want the last element , but you ask for the valu of the 11th on .
matlab will stop you with an error messag and you can fix your program .
what if you ask for the last element when you meant to ask for the first on ?
well , your program mai run just fine , everi time .
and give the wrong answer everi time .
in case like that , the result will usual be consist suspici .
and you're like to realiz that someth's wrong .
find the sourc of the problem mai be difficult , but know that there is a problem is a big step toward solv it .
some semant error mai caus problem onli occasion though .
that typic happen when onli a certain combin of input trigger the error .
thi is the hardest case of all .
first off , you mai not notic the problem and second , it's hard to find the caus .
for that reason , it's veri import to test your program with a wide varieti of input .
in fact , you should think hard about the possibl problem case for your program .
and you should test all the on you can think of .
if on of these case caus an error , then you need to find it and correct it .
mani time howev , find it can be surprisingli difficult .
fortun , matlab can help you with a tool call the debugg .
the name bug is synonym with error in comput program .
it come from the earli dai of comput when an actual insect caus a problem in on of the first comput .
the name stuck , and now ani tool that help you remov error is call a debugg .
so let's see matlab's debugg .
and if we want to us the debugg we gotta have some bug , you know , to debug .
so let's practic make some error .
you rememb what happen when we do that ?
we'll start with a few intent syntax error to refresh our memori .
wow , that's a lot of red text , but it should be familiar red text .
we made the same mistak in lesson on when we first introduc the concept of syntax and syntax error , and natur , we saw the same exact error messag .
matlab is noth if not predict .
it's tell us that we mess up the assign .
of cours , you know by now that it should have been x equal <num> and not the other wai around .
so how about thi error ?
littl less red here .
undefin function ramd .
again , matlab is not shy about tell us that we've foul up .
it can't find a function name ramd , becaus we didn't make a function name ramd , and it know darn well it didn't make on .
so of cours we got our hand slap .
well hei , we just misspel rand .
aren't you smart enough to figur that out matlab ?
becaus a matter of fact , sometim it is smart enough .
for instanc , suppos we just type an extra d in the name .
matlab yell at us in red .
then quickli calm down and polit ask us in black if we meant rand .
why ye thank you , that's exactli what we meant .
and all we have to do is hit return and the function that it guess we want run .
let's make an error that's a bit more seriou .
okai we've got y .
let's look at the sixth element .
what happen here ?
well , we creat a five element vector and then tri to access it sixth element .
there's no such thing , so matlab let us know .
it's import to realiz that thi wa not a syntax error like the previou on .
y of x is a perfectli legal matlab express .
when matlab tri to execut it , it realiz that in the given context it wa illeg from a semant point of view .
thi is call a runtim error .
becaus matlab can catch it onli when it tri to execut it .
we should be happi when we see thi red stuff , even though i'm usual not .
becaus it mean that an error that we made wa caught befor it could do ani seriou damag to the output , or , you know , to peopl who depend on that output .
now , i've spot a bug and onc we know where it is we can elimin it .
sometim , it matlab is happi most of the time when we run our program , but on some input combin it run into a runtim error .
we mayb think our program is perfect and everyth is rosi and then out of the blue .
matlab hit us with an error messag .
that's alwai discourag , but again , we can be thank that it caught a problem .
unfortun though , as we point out befor , mani bug ar such that matlab will never know that there is an error .
it simpli execut the statement we provid .
and give us the wrong answer .
the best we can hope for in that situat is perhap we can tell the result is not what we expect .
then we need to figur out where we mess up .
both of these latter error can be veri hard to find , and if we don't find them , we're doom to failur .
and that's when the debugg can be our onli hope of salvat .
let me sound over blunt .
it's not .
let's consid thi simpl function .
it roughli mimic the behavior of the built in randi function .
in fact , it us randi , as you can see here .
it's suppos to return an n by m matrix of random integ , right here in x .
and print out the last number on the last row .
it us f print f to do that .
the last number on the last row .
so it's an , it's an n by n matrix .
that's element n by n .
yeah , that look right .
but let's try it .
now it look pretti good .
it's three by three .
thei look random .
last element on the last row is three .
the onli thing i'm notic here , is that we onli get integ three and smaller .
wonder why that is ?
let's try with differ input .
well , we're in troubl right there .
index exce matrix dimens .
error in rand rand_int line three , fprintf .
so , by the wai , the first thing to notic is that these ar live link .
if i click on thi line three , it take me to line three .
well , what do you need that for ?
i mean , it's obviou these line ar number here .
well , the advantag of that is if you have a realli long function , then it'll take you right to that point and you don't have to scroll around .
when i'm look at it , i know the error is here , i know i've got an n by m matrix .
how can thi not be legal ?
how am i exceed , it'd be nice to see what the size of x is .
it wa three by three right ?
but there's no x here , becaus the work space doesn't have the local variabl in it .
it just ha the variabl in the command window .
well , i'm at a loss .
it's time to us the debugg .
the most import featur of ani debugg is the abil to put break point in your program .
you us a break point to mark a line in your code that you want the debugg to stop execut the code at .
it's call a break point , becaus it break the flow of execut at a chosen point .
to creat a break point , you simpli click in the grai area between the line number and the given line on on of these dash .
let's do that on line three .
the red circl indic the locat of the break point .
and sort of like a red stop sign , we're go to stop right there .
it'll stop befor thi line is execut , and we want that , becaus that's where the arrow wa .
and you can have more than on break point , you can have on on ani line where there's a dash .
on line two , for instanc .
there .
i think that might be a better place to stop , so let's get rid of the on on line three .
we don't need that on .
to remov it , simpli click on the red circl .
it's gone .
okai , let's go back to the command window and call our function again .
call it the same wai we did last time .
the function begin to run , then it stop and there's thi littl green arrow next to our break point .
what happen is that the debugg paus the execut of our function just as the code point out by the green arrow wa about to be execut .
now , i have sever option , we could simpli continu run the function by click the continu button up here , up here on the toolbar or by hit the f5 kei on the keyboard .
instead , let's execut just the current statement by click the step button right here , or you can do that by hit the f10 button .
so , i'm go to click that , and watch the arrow advanc , there .
and someth happen over here .
x show up .
wait a minut , m , n , and x , these ar local variabl .
we've never seen local variabl in a work space .
well , thi is a great thing about the debugg .
when you're stop insid the function , the work space that's shown over here is not the command window work space , but the work space of the function that's act .
thi is the work space of rand_int .
these ar the local variabl in rand_int .
let's see .
now that we're look at thi , x is not a three by two matrix at all .
it's a two by two matrix .
so , wait a minut .
we just gave it three and two .
oh , and note the handi littl yellow window that the debugg pop up to show us the valu of variabl that we hover the mous over .
and we know that randi make a three by two matrix in that case .
doesn't it ?
okai , mayb it's time to look at how randi work .
we can do that with the help function .
but befor we do that , notic thi blue two down here in the command window .
that number and x equal randi of n comma m told us the line at which the function wa stop by the break , and the code on that line .
the blue color in the underlin right here mean that thi is a live link that will take us to that line when we click on it .
and , more importantli , notic that the prompt ha a k befor the two greater than sign .
that k mean that you can do thing with a keyboard while a function is activ .
ye , the function's activ , but were control it .
it's like a person in a hypnot tranc who doe what we tell it to do .
ordinarili , while a function is run , you can't commun through the keyboard with it or with matlab in gener .
but you wouldn't realiz that , becaus the function is over so fast .
you will realiz it , though , if you have a function that run long enough to give you a chanc to hit a few kei befor it return .
when you do that , you'll see the charact that you type in the command window down here , but thei'll be ignor .
except for on magic combin .
you rememb what that is ?
that's the magic combin that will stop the function cold , it's ctrl c .
everyth els will be ignor .
anywai , thi k alwai appear in the prompt when the function is stop at a break point , and when it's there , we can us the keyboard to make thing happen .
for exampl , we can look at the valu of on of the variabl in the function's work space .
let's look at oh , i don't know , sai m .
well we knew it's valu wa two .
but it's fun to look at it .
you know what's more fun ?
you can chang it to make it pi  .
now m is equal to pi  , and i want to emphas that i'm talk about the m in rand_int .
the input argument that wa set to two when the function wa call ha been chang to pi  .
and look over here .
there it is , pi  .
rememb , thi is the work space of the activ function here .
of cours , if we continu thi function by hit , sai , the continu button or the step button , pi  is the valu that will be us right here insid fprintf when it is execut , and we will get a new error sai that an index ha to be a posit integ .
that would be no help , but peek at variabl like thi or chang them can sometim help you figur out what the problem is .
for exampl , if we look at x , we'd have seen that it's two by two instead of three by two as we expect it to be .
we alreadi saw that in the work space window , but it's more obviou now .
okai , let's refocu here , we were go to get help on randi .
let's do that .
let scroll up to the begin .
there .
randi , pseudo random integ from a uniform discret distribut .
r randi , imax comma n return an n by n matrix .
there's the problem right there .
the argument aren't the size of the matrix .
right , we put , what did we put ?
three by two .
that mean the maximum valu is a three .
that's what we saw .
and the matrix is two by two , which is what we saw .
there it is .
maximum valu of three .
okai , there's our problem .
we didn't know what randi wa do .
okai , let's fix our littl broken function .
first , we need to quit the debugg .
we can quit it either by type dbquit , that's for debugg quit , or by click the quit debug button up here , thi red thing .
i'm go to click that button .
and watch the green arrow when i click it .
okai ?
four , three , two , on , click .
there .
green arrow disappear .
and down in the command window , we've got our normal prompt back , you know the on with no k .
now , here's how we're go to fix our function .
we're go to chang x equal randi of n m to x equal randi of <num> and n .
note that thi break point turn grei when i did that .
thi is matlab's wai of indic that the break point ar inact and you need to save your function befor run it again .
thei'll all turn grei whenev you chang the file .
and thei'll onli turn back red when you save the file , and it's got no syntax error in it .
well , i don't think there's a syntax error here .
so , i'm go to click the littl blue diskett over here to save the file , right here .
and you'll see the break point turn red again .
here we go .
there .
well , i can almost hear you complain about the wai we fix thi function .
becaus the chang we made will mean that we've arbitrarili limit the rang of pseudo integ to go to <num> .
good point .
we can think about whether that's a seriou problem , and if it is , how we might fix it , but in the mean time , let just call that a featur of our function .
okai .
readi to see whether it work now ?
well , we'll leav that up to you .
try it .
try it with sever differ input .
if it is work , then we can sai , thank you debugg .
if it's not work , then you'll know how to find the bug and fix it .
and then you can thank the debugg .
as you might guess , matlab ha extens document on it debugg .
you can get a good start on that by type debug into the littl queri box here .
and then come down here and choos debug , diagnos problem with matlab program .
and you get lot of inform right here , exampl and so on .
well , that's it for the debugg for now .
but when we start write more complic program in later lesson , more bug will inevit appear in our code , and you'll have more chanc to practic with the debugg .
and as you write more and more code , you'll get more and more practic .
more than you might expect , and that bring us to todai's messag about life as a programm .
after you finish thi cours and begin to write more sophist program on your own , or with collabor , whether it be for fun , for anoth cours , or for your employ , you'll find that most of the time you spend on program is debug time .
in fact , it's wors than that .
onli a small fraction of program time is spent type what we think is correct code .
the great major of time is spent find and remov the error that we made while we were type what we thought wa correct code .
now , for the most import part of the messag .
program is a veri humbl experi .
it show us , as well as ani exercis i've ever seen , just how imperfect we human ar .
wait , did i sai humbl experi ?
make that humili experi .
and that can be veri discourag , too .
in fact , if you don't get discourag , then either a , you aren't write seriou program , or b , you aren't human .
if you ar human , and you can endur the humili of make <num> error befor you get on thing right , then you should make a good programm .
and you won't have mani competitor .
becaus most peopl will give up after a mere ten error .
i'm convinc that thi singl factor is the reason that programm ar paid so much monei .
everyon els get discourag and quit .
but hang in there , becaus program is also an exhilar experi .
when you final get a big program work , and it work it wai through input that it's never seen befor , make decis and do calcul that it would take a thousand peopl a thousand year to do , and when it carri out all those billion of calcul flawlessli and spit out the answer , you'll forget all the hour of humili that preced it .
and when you get there , it's a feel that is amazingli wonder .
it's , well , you just have to experi it for yourself to know what i'm talk about .
if you do , then thi cours wa worthwhil , and frankli most of the credit must go to , well , can you guess ?
right , thank you debugg .
and with that thank you , we'll end lesson four .
hi and welcom to lesson five , select .
thi week we'll be talk about how to make your program run differ base on differ condit .
so far matlab ha execut the statement that you gave it in the order that you gave them .
in other word , it us sequenti control that's it default behavior .
sequenti control is the most natur and the most common sequenc in ani program written in ani program languag .
and it's the primari exampl of a control construct .
a control construct is just a method us by matlab to select the next statement to be execut after it done with the current on .
in thi lesson , we'll introduc some construct that tell matlab to select it next statement base on some condit .
a construct that doe thi is call select or some peopl call it branch .
the most common select construct is the if statement .
let's introduc it with an exampl .
the guess_my_number function is a singl if statement .
it start with the if keyword , follow by the condit , x equal equal <num> .
thi pair of equal sign is a new oper it mean equal to or is equal to .
the statement that follow the line with the if keyword will be execut if and onli if thi condit is true .
in thi case , if and onli if x equal two .
the if statement is termin by the end keyword .
let's see thi function in action .
and here it is in the editor .
let's try it with a few bad guess .
how about run it with <num> ?
and how about <num> , noth visibl happen .
and that's how it's suppos to be sinc our function doesn't do anyth with a bad guess .
evalu the x doubl equal <num> condit here and if it's fals , as it would be , if x wa <num> or <num> , it skip thi fprintf here insid the if statement and then function return .
now let's try it with a correct number , we should see someth differ .
inde we do , we see the congratulatori print out .
the condit wa true thi time , x is <num> , x doubl equal <num> evalu to true , so we execut the fprintf statement insid the if statement and the function end again .
the control flow of the if statement is best illustr by a figur .
the blue dot repres the control statement , in thi case the if statement .
the blue line with the arrow show the possibl path that matlab can follow .
the branch that goe off to the left repres the case when the condit is true that is x equal two .
the box label block repres the set of statement insid the if statement that will be execut if thi branch is taken .
the right branch repres the case when the condit's fals .
in that case , we go straight to the next statement after the if statement that is after the end keyword that termin the if statement .
thi figur highlight in red the flow of control when the condit is true and as you can see in thi case matlab execut the block of statement insid the if statement .
thi figur show the case from the condit is fals .
thi time the red line show that we skip the block statement insid the if statement and jump past it to the statement after the if statement .
what if we want to do someth when the condit is fals as well ?
in other word , what if we want to execut on set of statement when the condit is true and a differ set when it's fals ?
let's improv our guess my number function just a tini bit by try to cheer up the poor user who pick wrong number .
both the function and the if statement start out the same wai as befor .
but after the first fprintf statement we see a new keyword , els , thi els ha <num> role .
first is signifi the end of the block of code that need to be execut when the condit is true .
and second is signifi the begin of the block of code that need to be execut when the condit is fals .
thi new statement is call an if els statement .
as you can see , our new and improv gue_my_number function print out an encourag messag if the user's guess is wrong .
the control flow of the if els statement is illustr by thi figur .
here again , the blue dot repres the control statement in thi case the if statement , the if els statement .
and again the blue line with the arrow show the possibl path that matlab can follow through the statement .
the branch that goe off to the left repres the case when the condit is true , that is x equal <num> .
the box label block1 repres the set of statement that will be execut when thi branch is taken .
these statement ar the on that come befor the els keyword .
the branch that goe straight down repres the case when the condit is fals , that is x is not equal to <num> .
the box label block2 repres the set of statement that would be execut when thi branch is taken .
and these statement ar the on that come after the els keyword .
thi figur highlight in red the actual flow of control when the condit is true .
and as you can see in thi case matlab execut onli the block of statement that come befor the els keyword .
and thi figur show the case from the condit file , thi time the red line show that we skip the statement insid block1 .
and instead execut onli block2 , which is the set of statement after the els keyword .
okai , let's try thi function in matlab .
here's our new and improv version in the editor .
let's take a wild guess and guess <num> , like we did befor and well thi time we get a littl bit more inform .
not right but a good guess , matlab of cours evalu thi exact same condit .
<num> is equal to <num> and again came up with fals but instead of just quit thi time it went to the statement or the block of statement in thi case just on of them immedi after the els keyword .
and that brought us to the fprintf which print out thi littl bit more encourag messag .
now what happen if we guess right ?
well let's do that just go right straight to that and we get the congratulatori messag .
the opposit happen thi time the condit evalu to true .
so the statement immedi after the condit execut .
to recap , when an if els statement is in our program we're guarante that it will execut exactli on set of statement either the statement between the condit here .
and the els keyword here and that's carri out when the condit is true or the statement between the els keyword and the end which close the if els statement when the condit is fals .
okai , that's it for the if els statement and guess what ?
there's on more version of the if statement and here it is in the third version of the guess_my_number function it's the last on and that's a promis .
on chang it ha noth to do with the new version , just the number <num> here seem bore so we chang it to <num> which i'm sure you'll agre is far more interest .
more importantli we see a new kei word here , els if .
thi is an if , els if , els statement .
there ha to be a condit after the els if in thi case we have x less than <num> .
just as there had to be a condit after the if kei word , x doubl equal <num> in thi case .
you can probabl guess how thi thing work .
let's suppos x is equal to <num> then we carri out thi statement here and we're done .
let's suppos it's fals then we skip that and we come to the elseif and we check if it's less than <num> we carri thi out .
let's suppos that's fals then we come down and we do the els part .
let's call the function with <num> .
the first condit , when x equal <num> is fals so matlab check the second condit , the on after the elseif keyword here .
that turn out to be true so we print the too small messag .
if we run it with <num> , you can see that we get the too big messag that's becaus x wa neither equal to <num> or less than <num> so both of these fail and we went to the els condit .
a few remark about thi version of the if statement .
first , the els branch is option just as it wa befor .
you can simpli omit the els and close the if elseif statement with the end kei word and if we leav that branch off like thi .
i'm just go to hit delet now , we're left with an if elseif statement .
second , whether you have the els branch or not you can have as mani elseif branch as you want .
thei come on after anoth , right in here .
we'll see an exampl of thi a littl later .
okai , count the if elseif statement that you're look at right now , we've seen four version of the if statement .
an if , an if els , an if elseif els , and an if elseif .
to understand how these variou version of the if statement ar relat you can think of each of them as a fork in the road when you're drive .
the most complic on is the last on we saw befor thi on , i can get back to that by come up here and hit thi undo button and there we ar .
thi is a fork in the road with three branch on , two , three .
you're go to drive down on of these fork to get to the next statement in the program .
if you drop the elseif , again i'm go to hit the delet then there's just two branch .
if you add more elseif's there will be more branch and regardless of how mai elseif's there ar even if thei're aren't ani at all .
if you get rid of the els then when all the condit ar fault you'll just detour around the fork and drive directli to the statement that come after the if statement .
okai end of remark and end of all these version of guess my number .
okai , i promis that we were done with guess my number .
but i didn't sai we were done with if statement .
i still need to show you an exampl with multipl els if branch .
i've got on here .
it's call dai of the week .
and i can pop it up in the editor just by doubl click it , and here it is .
it's a littl longer , so i'll need to have some more space , and i can get that by just stretch the editor window down like thi .
woah , how long is thi thing woah , not much command window left , but at least we can see all of our function .
our new function will the print the name of the dai of the week when we call it and give it the number of the dai of the week as an input argument .
it's number n .
and it will also identifi it as either a weekdai or a weekend dai .
we have a long if els if els statement here , becaus it ha six els if branch .
so , count it if and it els branch , it ha a total of eight branch .
after thi long if els if els statement come a separ if els statement .
as i've mention , the function take n , the number identifi the dai of the week , as an input .
the long if els if els statement then check n , compar it on by on to the number on , two , three , four , five , six , and seven .
when the first true condit is reach , let's sai n is three , we would print out the dai of the week .
in that case , would be tuesdai .
and then , we set dai type , a variabl call dai type here , equal to on , if it's a weekdai .
or two if it's a weekend dai , here is a two , here is a two .
the els branch here is just there to handl error .
if the input is not on of the integ on to seven , then none of these first seven condit can be true .
so we take that els branch .
and in that branch we print out an appropri error messag .
right here .
and then we return from the function .
we'll sai more about thi return keyword a littl bit later .
thi second if statement , thi if els statement down here is here to tell the user whether the dai is a weekdai or not .
it check the dai type variabl , and if it's equal to on , it print , which is a weekdai , otherwis it print , which is a weekend dai .
in either case after the y here of the word dai , we includ a backslash n .
thi is the escap sequenti , rememb , that put us to a new line .
we want to get readi for the matlab prompt .
notic , though , that we omit the new line in all the fprintf statement abov .
and we did that so when the name of the dai and the comma ar print out , thi text follow it , which is a weekdai or which is a weekend dai , will be on the same line .
notic on last detail about the print , we includ a space here befor the switch so that there will be a space between thi comma after the weekdai or weekend dai name is print , and thi phrase , which is a .
well it's time to try thi function out .
well , we'll note that thi is an american function .
the week start on sundai .
and , that look good .
wednesdai is what we would expect .
we would put in a <num> .
let's see , sundai , mondai , tuesdai , wednesdai .
yep , that's right .
and we can see that sundai is identifi properli as a weekend dai .
and wednesdai is a weekdai .
so far , so good .
so , we've tri a weekend dai .
we've tri a weekdai .
now , we need to make a mistak and see if we handl error properli .
well , it handl the error just right .
it's pass all the test .
i'd sai thi is a work function .
well , it handl the error just right , and it did that becaus of the return statement insid thi els branch .
return is not onli a keyword , it's an entir statement .
and it doe just what it's name suggest .
when matlab execut the return statement , it immedi quit the function and disregard all the other statement follow it .
most typic us of the return is exactli what we're do here .
we encount an error .
and it's time to quit the function .
function normal quit onli when thei reach the end of their statement .
but you mai want to have a function return earlier , either becaus of an error , just like thi case , that wa detect befor the end of the function is reach , or simpli becaus the function is done with it work befor then end is reach .
in either case , the return is what you need .
let's just remov the return statement for a second and see what happen with thi bad input .
i'm go to hit delet here .
so , let's just run it again .
sinc that's the last thing we did , all i have to do is hit up arrow and return .
and what did we get here ?
let me stretch thi up a littl bit so we can see better .
we got the error messag , number must be from on to seven .
but then thi is an ugli result , here .
thi ugli happen becaus dai_type is not assign a valu when the input is out of rang .
and , none of these els if or thi if happen , and so , none of these assign statement take place .
dai_type equal .
sinc it doesn't have a valu , matlab ha forc to step in and take charg .
thi sort of behavior is term an ungrac exit .
and it's an embarrass for ani self respect programm .
but with the return statement in there , and let's put it back .
there .
the function end gracefulli , and that's how all nice function behav .
so let's do it on more time .
there .
return statement is a conveni wai to handl thi situat .
and inde , it's a conveni wai to handl ani situat for which there's noth more that a function can do or need to do .
we've seen quit a few variant of the if statement .
let's summar what we've learn .
the simpl if statement ha a condit and a block of statement that's execut if the condit is true .
if the condit is fals , then the statement in the block will not be execut .
the if els statement let you specifi a block of statement for the case when the condit is fals , also .
so , there's a separ block of statement for each of two case .
that is true or fals .
becaus of that els branch , exactli on block of statement will alwai be execut .
the if els if statement let you specifi multipl condit that ar check on by on until the first true condit is found .
then , the correspond block of statement is execut , and matlab skip to the end .
if none of the condit is true , then none of the statement in the block will be execut .
the if els if els statement is veri similar to the if els if statement .
the onli differ is that we add an els branch after the last els if branch .
the els block at the end will be execut onli if all the previou condit ar fals .
but becaus of that els branch , exactli on block of statement will alwai be execut .
we've been do comparison in the condit of if statement with express like x equal equal <num> .
the doubl equal is an exampl of a so call relat oper .
relat mean the result depend on the relat between the operand .
thi tabl list all six matlab's relat oper .
we seen how to us these oper insid if statement , what mayb surpris is that thei can also be us outsid if statement and thei produc valu .
let's take a look at thi other wai to us relat oper .
let's see .
<num> doubl equal <num> , answer equal <num> .
<num> doubl equal <num> minu <num> , answer equal <num> .
in the first exampl , we ask matlab to calcul the valu of the express <num> doubl equal <num> and it told us that the valu's <num> .
in matlab , when the oper doubl equal find that it first operand , like <num> is not equal to it second operand , like <num> .
it return the valu zero , which mean fals .
in the second exampl , we found that the valu of the express <num> doubl equal <num> minu <num> is <num> , becaus <num> minu <num> is <num> and so <num> doubl equal <num> is true .
and when the doubl equal oper find that it first operand is equal to it second operand , it return the valu on , which mean true .
in fact , everi relat oper return zero when it express is fals and on when it express is true .
and when we sai , zero and on , we mean the number zero and on .
here's an exampl to drive home the fact that the result for relat oper is a number .
in thi express , <num> time <num> , which evalu to <num> , <num> is greater than <num> , <num> .
so the relat express in parenthesi evalu to on , which is true of cours .
we then add <num> to <num> and get <num> .
so the valu of <num> time <num> greater than a <num> , <num> is a <num> , a normal <num> .
the kind of on that you can do arithmet with not some special on that ha some special sort of truthi attribut attach to it .
the parenthes have an import effect here .
if we omit them , we get a differ answer .
thi time , the addit oper is execut befor the greater than oper .
that happen , becaus the preced of plu is higher than the preced of greater than .
so thi oper is carri out first .
in fact , all the arithmet oper have a preced than all the relat oper , we'll talk more about thi later in thi lesson .
so the result of the addit is <num> , <num> , but the valu of the operand on the left of the greater than sign , which as befor is <num> , <num> is still greater than the valu of the operand over here on the right , <num> , <num> .
so the relat oper produc the valu on , which mean true as befor .
sinc noth is ad thi time , the result of the entir express is on .
let's take a look at thi littl function call if test , which help us test what matlab consid true and what it consid fals .
thi function us an if statement to decid whether x , the input argument here is true or fals .
it's true , it print it's true .
if it's fals , it print it's fals .
let's try call with a few differ valu .
well , zero is fals and we knew that .
let's try it with ten .
ten is true , it's non zero .
what about minu <num> ?
it's non zero , but it is neg .
now , it's non zero , so it's true .
and on , well , we knew that wa true too .
what about thi ?
that is a small number .
i wonder if it's big enough to be true .
it's aw close to zero , true .
you can easili see the pattern .
if it's zero , matlab take it as fals .
for anyth els be a neg integ or not big or small .
matlab take it as true .
okai .
we're done with our if test function .
no matter , we don't need thi stuff anymor .
but we're not quit done with relat oper , there's on import featur that we need to look at .
relat oper work on arrai too .
first , let's rememb how arrai oper work .
let's do arrai multipl on two vector , like thi .
matla appli the dot star oper to each correspond pair of element .
first , <num> time <num> give <num> .
here we go .
<num> time <num> give <num> .
and minu <num> time minu <num> give <num> .
minu <num> time minu <num> give <num> and so forth .
and the result matrix is the same size as the input matric , which in thi case were five element row vector .
now to replac the arrai multipl oper with the relat oper , the greater than , like thi .
as with the dot star arrai oper , matlab appli a relat oper on by on to each correspond pair of element .
first , four greater than five give zero .
so here's the four greater than five give zero .
sinc four is not greater than five and zero repres fals .
then minu <num> greater than minu <num> give <num> .
sinc minu <num> is greater than minu <num> and so forth .
and again , the result matrix is the same size as the input matric , five element rovector .
as with the arithmet arrai oper , the upper end of the relat oper must in fact , have the same exact size , except for on special case .
it's the same special case we saw with the arithmet arrai oper .
and that's when on of the operand is a scalar , like thi .
in that case , each element of the arrai in turn serv as on operand of the relat oper .
while the singl scalar serv as the other operand .
and the result , an output arrai of the same size as the input arrai .
so , <num> , less than or equal , <num> is evalu , which is true and give <num> .
then minu <num> is less than or equal <num> is evalu , that's true , that give <num> .
then <num> is less than or equal to <num> , which is fals , give <num> , and so on .
and the result is an output arrai that's the same size as the input arrai .
and final , look at thi tricki on .
can you see what we're do here ?
we're count the element in the vector that ar equal to <num> .
as you can see , there ar two of them , here and here .
and we got the right answer , <num> .
can you see how thi work ?
first , the argument of the sum is evalu .
that's thi thing in parenthesi here .
it's an express involv a relat oper , doubl equal .
it ha it input , a vector and a scalar .
as we've just seen , the relat oper compar each element of the vector in turn to the scalar .
sinc the relat oper is a doubl equal , we'll get a on for each element , that is equal to <num> and a zero everywher els .
sinc there ar two of them equal to <num> , we get two on and four zero as our output .
now , you don't see that vector , but you know it's there .
that vector of two on and four zero is then sent to sum as it input argument .
sum add them up and get <num> .
and the overal effect is to count the element of the vector that ar equal to <num> .
cool , huh ?
thi is a great exampl of matlab program , a singl line of code that doe someth that would take five or six line in most program languag .
and if you're a matlab programm , thi version is clearer too .
let recap the subject of logic valu becaus it's a realli import concept .
if matlab is ask to consid a non zero input as logic , it'll interpret it as true .
if matlab is ask to consid the input zero as logic , it will interpret that as fals .
and when matlab output illog fault , it output the valu zero .
but when matlab output a logic true , it alwai output the valu <num> .
note that thi mean that you can give ani valu to matlab to be interpret as logic .
if you give it a valu that's neither zero nor on , sai <num> or minu <num> , that's fine .
matlab will treat it as true , but it will alwai return on for true and zero for fals .
you mai have thought about whether we can combin multipl logic valu somehow .
ye , we can , us logic oper .
the tabl here show three logic oper .
these ar the oper that matlab ha , and , or , and not .
two ampersand mean and .
two vertic bar mean or .
and the singl tild mean not .
so how do thei work ?
not is a unari oper , mean that it take onli a singl operand .
it simpli flip the valu given to it .
if you give it a true , it'll return fals .
if you give it a fals , it'll return true .
and and or ar binari oper .
thei combin the valu of two operand .
the result of and is true if and onli if both of it operand ar true .
otherwis , it's fals .
or work the opposit wai .
the result of or is fals , if and onli if , both of it operand ar fals .
otherwis , it's true .
thi tabl is call a truth tabl .
it specifi how logic oper work in a bit more formal manner .
the four row show all possibl combin of input valu .
and there ar two column of output , on for and and on for or , over there on the right .
thei show the result of the oper for each input combin .
and here's a version show the input from the standpoint of matlab , where zero mean fault and non zero mean true .
as you can see , there's a <num> , which mean true , in the and column , onli when both input ar non zero .
and there's a <num> for fals in the or column , onli when both input ar <num> .
now let's see some exampl .
suppos we want a function that take three input and return on of the follow three valu .
a on , if it three input ar in increas order , a minu on , if thei ar in decreas order , and a zero , otherwis .
well , we've alreadi written a function that doe that , call order3 , over here .
let's have a look at it .
it us an if , els if , els statement with a logic and oper , here and here .
and here's how it work .
the first condit in the if els if statement sai , x less than or equal to y , ampersand ampersand , y less than or equal to z .
thi doubl ampersand is the logic and oper .
as you mai rememb from the truth tabl , thi and oper return true onli if both of it operand ar true .
thi is the first operand , x less than or equal to y .
thi is the second operand , y less than or equal to z .
so in thi case , x ha to be less than or equal to y , and , and at the same time , y need to be less than or equal to z in order for thi condit to be true .
notic how i us the word and to specifi what's happen here in english .
it's not an accid that thi logic oper is call and .
if you think about it , these two condit togeth mean that x , y , and z ar in increas order .
well , if you think about it a littl more , though , that's not precis correct , becaus if x is equal to y , then those two number aren't increas .
and if y is equal to z , thei're not increas , either .
but at least we know that thei're not decreas .
so to be more precis we should sai that x , y , and z ar in non decreas order .
and that's a thing , by the wai , non decreas .
it's the precis mathemat descript .
anywai , if thei ar non decreas , the and oper return true .
the variabl a is set to <num> .
the if els if els statement termin , and so doe the function .
and sinc the function return a as you can see up here then the function return a <num> .
so that's what happen if x is less than or equal to y , and y is less than or equal to z .
but if either of these relationship is fals , then the and is fals and we take the els if branch .
it's condit is x greater than or equal to y , and y greater than or equal to z .
thi condit is veri similar to the first condit the onli differ is that the relat ar revers here .
we still us the and oper .
in thi case , in order to get true , x ha to be greater than or equal to y , and y at the same time ha to be greater than or equal to z .
if both of these relationship ar true , the and oper will return true and we know that the three number ar in nonincreas order .
in that case , a is set equal to minu <num> .
the if els if els statement termin and so doe the function , and sinc it return a , the function return a minu <num> .
final , if neither of the two condit is true .
thi on or thi on , we go to the els branch down here .
thi is the catch all case .
the number ar out of order , and for that case , a is set equal to zero , and the function return a zero .
okai , we've seen an exampl for the and oper .
now let see on for the or oper .
not smallest function .
a job of not smallest , is to determin whether it's first input argument is smaller than both of it's other two input argument .
it it's not smaller than both of them , than it return on , mean it's not the smallest .
henc , the name of the function .
otherwis , it return <num> .
to do thi , it us an if l statement , whose condit us the or oper , which is symbol by thi doubl vertic bar here .
as you mai rememb from the truth tabl , the or oper return fals onli if both it operand , ar fals .
to put that anoth wai , it return true if and onli if on or both of it operand ar true .
in thi exampl , the first operand right here is the relat oper x greater than or equal to y .
and the second operand is the relat oper , x greater than or equal to z .
in english , thi condit read , x greater than or equal to y or x greater than or equal to z .
and that make sens , becaus if x is greater than or equal to y or z , or both for that matter , then it's not the smallest .
in that case , the or oper return true .
thi statement is execut .
a is assign the valu <num> .
and the function return that <num> .
otherwis , we skip to the els branch .
a is assign to valu <num> , and the function return <num> .
well , let's try our function .
we'll do the last on first .
well , that make sens .
three is not smaller than two and on .
and that make sens becaus minu on is smaller than two and on .
and final , that look good becaus two is not smaller than two and on .
okai let's pull up our order three function again .
there it is .
and we'll rememb that it's suppos to give a on if thei're increas order or more specif non decreas order .
a minu on if thei're decreas or more specif non increas and a zero otherwis .
well that look good becaus thei're in non decreas order .
that's also good non decreas .
whoop .
pick the wrong function , but matlab guess what i want .
so , we'll go with that .
and that look good these ar decreas or more precis , non increas .
also non increas and let's do on out of order .
i hesit after that parenthes to give matlab enough time to give me the hint that there ar three argument for thi function .
and the three argument that i gave it were out of order which mean we should get a zero and we did get a zero .
so it appear that both our littl function ar work .
we've seen how to us logic oper , and , and , or , insid if statement .
well , thei can be us outsid of if statement too .
in the same wai , as we saw earlier , that relat oper can .
let's clear the screen and look at some exampl of logic oper us in thi wai .
we'll just type some express directli in to the command window .
no surpris here .
when both of the operand , the and oper , ar non zero , which is equival to true , the oper give true in the form of the number on .
but if either or both of the operand ar zero , which is equival to fals , then the oper give fals in the form of the number zero .
now let's give the same operand to the or oper .
here again , we get what we would expect .
when either or both of the operand of the or oper ar nonzero , which is equival to true , the oper give true in the form of the number on .
but if both of the operand ar zero , which is equival to fals , then the oper give fals in the form of the number zero .
now , let's build a more complic express and get the logic nod oper involv too .
let's see why d is zero .
sinc both a and b ar non zero , thei're both true .
so , a and b is true too .
then when the not oper is appli to that true , it's chang to fals .
the oper b and c is fals , too , becaus c is fals , as we can see here .
so the or oper here , is given two operand that ar fals .
fals , and fals .
so it give fault in the form of the number zero .
that valu of zero , is then assign a d .
let's make on tini chang .
we'll replac the second and oper here by or .
the result is differ becaus b or c , unlik b and c , give a true valu .
that true valu becom the operand of thi first or , which then give true .
all realli as we would expect .
in fact , logic oper tend to act well , logic .
thei do what you'd expect them to do .
becaus we're so familiar with the concept band and or .
but as with the relat oper , it's a bit unexpect to find that thei can be mix with the arithmet oper .
what happen here is that the express in parenthesi is true .
becaus b is equal to <num> and <num> fall between <num> and <num> .
so the and oper give <num> .
and then b is multipli by <num> to get b , which equal <num> .
okai , as we said earlier , when we were mix arithmet with relat oper , thi shouldn't be surpris , becaus on is well , you know , a <num> and <num> time <num> is <num> .
so why would you want to mix arithmet and logic ?
well , suppos you want to add up number that were between zero and ten ?
you could initi your total like thi .
and then everi time you get a new valu for b , you get at it like thi .
five is greater than zero and less than ten , so it get ad in .
the same hold for three .
but <num> fail the test , so <num> is ad .
so as you can see , b is ad onli when it's insid the limit , just what we want to do .
you can do the same thing with an if statement , but it's simpler to just do it in thi on line .
by the wai , the parenthesi ar import , becaus the preced of and , and also of or , ar lower than the arithmet oper .
and here we need and to go befor multipl .
in fact , the logic oper ar at the bottom of the list .
everyth els goe first , as we'll see when we revisit the preced tabl in a few minut .
there's on last featur of logic oper that we need to consid , thei're us with arrai .
we can see how it work with vector , so we'll start off with those .
we'll start the the not oper .
let's get a clean slate .
there .
okai here's a nice vector .
now let's appli the not oper to it .
it chang true to fals and vice versa .
and that's what's happen here .
the nonzero number <num> pi  and minu <num> repres true .
so thei're chang to fault in the form of a zero .
and the zero here is chang to a on .
sinc not oper on individu element in an arrai , it's an arrai oper .
now let's try the and oper with arrai .
hm .
operand to the or and , and oper must be convert to logic scaler valu .
what doe that mean ?
well it mean that the operand of these oper have to be scaler .
thei can't be arrai .
well , it's time to reveal the matlab actual ha two version of the logic oper .
the version you've not seen yet ar arrai oper .
here's what the arrai version of and , and or look like .
first , let's get the origin version and then we'll alter it , then we'll alter that on .
and there we have it .
as you can see , there's a singl ampersand for and , and a singl vertic bar for or .
you might expect to see a dot show up in the arrai version of these oper .
after all , for the arithmet oper multipli and divid as you rememb , each arrai version add a dot to the oper .
but for the arrai version of and , and or , there's onli on ampersand for the and oper instead of two .
and onli on vertic bar for the or oper , instead of two .
these singl symbol version of the oper work just fine with arrai , as long as there ar two operand have the same dimens , which is the same rule as for all arrai oper .
and thei work with scaler arrai combin too .
here we can see that in the first express , two wa and with each on the element of the arrai .
and in the second express , two wa or with each element of the arrai .
and let get a littl bit fancier .
befor i hit return , can you figur out the answer ?
spoiler alert , i'm about to walk you through it .
okai .
the first relat oper , <num> less than the squar root <num> , will give true , sinc <num> is a littl bit less than the squar root <num> .
insid the vector over here , the first element , which is the express pi  greater than <num> , will be true , sinc pi  is inde greater than <num> .
and the second element , minu <num> greater than <num> is obvious fals .
so the element of the vector ar true and fals .
which in the land of matlab , is on and zero .
now the true valu from thi express over here , <num> less than squar root of <num> will be and with the true and with the fals element of the vector , to give true and fals .
which in matlab land ar on and zero .
okai time to hit return .
and we get a vector with on and zero as it element .
the order in which the oper less than and ampersand ar appli ha an import effect on the result .
let's check that by insert extra parenthes around the less than oper and it operand to forc the less than oper to go befor the and oper .
thi oper befor thi on .
well , that's the same result we got without the extra parenthes , becaus thi order agre with matlab's preced rule , as we'll see in a minut .
now , let's forc the ampersand to go befor the less than .
here , we put parenthes around everyth over here after the less than right here , so that everyth insid these parenthes is done first , and then , fed in as the right hand operand of the less than oper .
and thi is what we get .
the express insid the parenthes that we ad to the right produc the vector <num> , <num> .
yet again , the less than , which as we learn earlier is an arrai oper , is appli to each on of those element .
sinc <num> is not less than <num> or <num> , the result is a coupl of fals .
in other word , a coupl of <num>'s .
now that we've seen relat and logic oper , it's time to revisit oper preced , which you mai rememb is the set of rule that govern the order in which oper ar execut .
thi preced tabl show that order .
lower number mean earlier execut .
for exampl , relat oper at six ar execut befor logic oper at seven , eight , nine , and ten .
an addit at four is execut befor the colon oper at five .
rememb that surpris exampl a few lesson ago ?
chanc ar , you're not go to learn thi tabl by heart .
but you can get it ani time you want it by give matlab the command help preced .
thi is the tabl that show up .
it omit parenthes , but it's pretti easi to rememb that thei outrank everyth els .
by the wai , when you're not sure about preced , you should probabl us parenthes to forc the order that you want , becaus it'll improv the readabl of your program .
rememb , how we said that at ani branch of an if statement , we can have a block of code that we execut by matlab if the condit ar such and such ?
guess what ?
that block of code can contain if statement .
when it doe , the outer and inner if statement ar call nest if statement and put on if statement insid anoth is call nest for short .
let's revisit our ultim question function .
it us an if , els if , els statement as you can see here .
here's a version that us two nest if , els statement , instead of on if , els , if els statement .
it's similar to the previou version , but now we have two separ if statement , on nest insid the other .
note how the indent here make the nest organ clear .
the second if statement , becaus it's indent further than the first on seem nest insid the first on as it in fact is .
and note that each els keyword is align with it correspond if keyword .
matlab doesn't care about indent , but it help the human reader a lot .
it make your code more readabl .
the matlab editor will actual indent your code like thi automat as you type it , but you should alwai check it indent to make sure that all statement that correspond to the same block of code line up properli with each other .
here's yet , anoth version of the same function with a second wai of nest the two if statement .
thi is now not so similar to the origin version with the singl if , els , if els .
thi still produc exactli the same result .
the layout of nest if statement is more flexibl in a singl if , els , if els statement , becaus it allow you to combin condit in multipl wai .
back in lesson four , we introduc polymorph function .
rememb that polymorph function ar function that behav differ base on the number of input argument or output argument that thei're call with or even the type of input or output argument .
mani built in function of polymorph , such as the squar root function , max , size , plot and on and on .
it's on of matlab's strongest featur .
how we make i function polymorph ?
what's actual quit simpl , realli ?
the reason we wait until now to show you is we realli couldn't do it right without if statement .
now we'll combin if statement with a coupl of built in function that we haven't mention yet .
first on's nargin or nargin , which mean number of argument input .
it give the number of actual input argument that the caller pass in .
the other on nargout or in nargout .
it return the number of actual output argument that the caller request .
these two function can be call from insid our function to make our function polymorph .
here's a function declar of a function call call multabl with two output argument and two input argument .
it return in n by m multipl tabl in the output argument call tabl .
option , it can also return the sum of all element in the output argument in the variabl summa .
if it's call with onli on input argument , it return and n by m matrix .
so let's see the code .
first , we check to see whether the function wa call with on or two argument .
if nargin is smaller than two , then it wa call with onli a singl argument .
a singl argument is alwai put in the first posit , which in thi case is the variabl n .
when m is omit , we're suppos to return an n by m matrix , so we set m equal to n .
thi is a classic exampl of set a default valu for an input that's omit .
now we're readi to comput the multipl tabl .
it's actual pretti simpl .
we creat two row vector , on go from on to n and the other from on to m .
we transpos the first vector to be a column vector and us matrix multipl to creat the tabl .
now , it's time to determin whether we need to comput the sum of the matrix as well .
we need to do that onli if the user request a second output argument .
so we check nargout .
if it's two , we call the sum function .
rememb that sum comput the sum of the column of a matrix and return them in a vector ?
well , that's not what we want .
so here , we us the column argument to creat a vector from all the element of the tabl .
that's done with a colon .
and then we sum and give that to sum and it'll add them all up .
if nargout is on , then we avoid sum entir .
but there's no harm in comput summa , even if the caller doesn't request it .
if we calcul it when the user doesn't request it , matlab will simpli discard it when the function return .
so , all we've done is save a few microsecond of calcul time here .
but you will definit want to us nargout to avoid long calcul , perhap mani minut when the user doesn't ask for them .
in ani case , here's our first polymorph function .
let's see it in action .
well , here's our mult tabl function in the editor all readi to go .
let's pitch it a few differ input to see how well it doe .
there we gave it three by four and it give us a three by four arrai and that look like a multipl tabl .
let's ask it for a coupl of output .
there's a tabl and there's the sum and that's the correct sum .
okai .
thi time , we're just ask for on output and , but we onli gave it on input argument and you'll rememb that , that default to five by five instead of just five .
so far so good .
it's hit them out of the park .
let see how it handl a curv ball .
well , we manag to make it fail by give it no argument at all .
matlab tell us the line on which the failur occur and we can see what happen on that line right here .
when matlab tri to look up the valu of n , it found no valu of n , becaus we gave it no valu .
well , it might seem like cheat , more like a spit ball than a curv ball .
let's be a littl more fair .
let's give it some argument .
well let's do thi .
hm , i've got the empti matrix back .
clearli , we didn't plan on neg input , but can you see where the empti matrix came from ?
well , the colon oper here , on to n on line seven becam on to minu <num> , becaus we gave a minu <num> for n .
and the on colon m becam on colon minu <num> .
and as we saw wai back in lesson two when the end is less than the begin and we don't get , includ a neg increment with it , the result's an empti matrix .
here we've got two of them .
and now we see that the product of two empti matric is also an empti matrix .
so now we can understand why we got the empti matrix here .
and we can also understand why we got thi error .
but both of these case repres trap for the user , we should do someth about them .
so we got in troubl call the multabl with no argument , we got strang result when we call it with the wrong argument .
well , how can we avoid these problem .
first let's note a limit of the function declar .
a function declar specifi the name and the number of input and ar , output argument .
but in our head , and in our code , we make addit assumpt about our function , that aren't specifi in the declar .
and we write the code and the document for the function , which specifi the rest .
what the function doe .
what type of valu should be in the input argument , and what those valu repres .
so rather than just assum that the caller of the function will compli with the assumpt in our code , we need to write our code so that it check it input .
if a function check all it assumpt about it input and output , and provid a meaning error messag when thei're violat , it's term a robust function .
all built in matlab function ar written in thi wai .
in gener , you should alwai check that the function is call correctli .
that is , in accord with your assumpt about the input and the output .
thi can make find bug later much easier .
but how do you do it ?
well we do it with the if statement .
let make our mult function tabl robust .
first we check whether the function wa call with at least on input .
if nargin is smaller than on then no input argument wa provid in that case we call the built in error function .
it print out the messag we give it in red and then termin the function .
that's how easi it is and we get to print in red .
that's the onli wai to do that .
next we check to see whether the function wa call with m just as we did in the earlier version of the function but thi time we add an elseif to check for the correct type of m .
the type we want is a posit integ .
the elseif us a combin of three condit .
if ani on of them is true , m is not a posit integ .
we us the or oper to combin these condit .
the first condit us the built in isscalar function to check whether m is a scalar .
it return true if it argument is scalar and fals otherwis .
so we need to us the logic negat to turn that around .
by put the tild in front of isscalar , becaus not scalar is the error case .
then we check for the error m less than on , and then we check for non integ .
here's how we do that .
we us the built in fix function , which round it argument to an integ .
if m is not an integ then it round valu won't be the same as m itself .
if ani of these condit is true then we have an error , so we us the error function , tell the user that m need to be a posit integ .
and then error automat quit the function .
now we repeat the same check for n that we did for m .
at last , we can comput the multipl tabl .
it's funni how the error check wa more pain than the actual comput .
that's not that unusu .
but it's worth the pain now to avoid pain later when assumpt ar violat dure actual function call .
final , we comput the sum , if request by the caller , just as we did befor .
and that's our new and improv , and most importantli , robust function .
but we're not done .
we got a robust function , but it's not a good program yet .
there's more to good program than good code .
we need to includ an explan of our assumpt in human languag and not just in matlab code .
well , can we do that ?
you can probabl guess the answer .
ye , we can .
we can do it with the help of comment .
a comment is extra text that's not part of the code , so matlab simpli disregard it .
you creat a comment us the percent sign .
a matlab editor will then show that percent sign , and everyth that follow it , in green .
anyth after the percent sign , includ the percent sign , until the end of the line becom a comment and matlab ignor it .
the purpos of a comment is to provid extra inform for human user .
you us comment to document your code .
it's typic us to explain import or complic part of the program .
for exampl , you should us comment at the begin of your function to explain what the function doe .
and what it's input ar and what it's output ar .
and guess what , and thi is veri cool .
if we do it thi wai , that is if we insert these comment after the function declar but befor the function code , just as shown here for the multabl function .
the built in help function in matlab will work for our function just like it doe with it built in function .
it'll print out all the text we've provid in these comment .
so your function will behav just like a built in function .
let's try it and see it for ourselv .
here's the improv version in the editor .
you can see all the chang that we've made here .
let's ask for help with it , just as if it were a built in function .
but befor we do that , we hardli have ani room here for our command window .
i think i'll get rid of the work space over here by click thi littl arrow and click close .
that's gone .
and mayb i can move the command window over here somewher , like that .
and let's make it a littl bit bigger .
i don't need as much space there .
let's get thing , you can get thing set up the wai you like them .
and then go from there .
so , let's try ask for help .
look at that .
it look just like we've written a built in function .
you see how you get bold type wherev you us all cap ?
that's just so cool .
so , it tell you what you need to do .
and the user feel comfort , try out thi function .
but , now we've got to see what happen if we give it the wrong input .
so let's try a few thing here .
no input .
now we're print the red stuff out .
to the user must have at least on input argument .
so far so good .
m need to be a posit integ .
let's give it a fraction .
hm , need to be a posit integ .
that's not an integ .
it's posit , but it's not an integ .
let's give it a vector .
well , a vector is not a posit integ .
mayb we should add an error messag that sai , what part of posit integ do you not understand ?
that would just be mean , we won't do that .
and anywai , we'd need to count the number of time a user call it with a bad input .
how in the world would you do that ?
anywai , in how is a help page that provid meaning error messag for ani input that violat the assumpt made about it in that help page .
and doe it still work correctli for valid input ?
let's check that .
yeah , whew , good .
we didn't break the thing when we ad all that error check .
you know , i think we can congratul ourselv now .
we've written a function that's robust , and doe what it sai it'll do .
so far , we've us local variabl a lot , and we briefli introduc global variabl .
well , there's a third kind of variabl , the persist variabl .
a persist variabl is a local variabl , so it's onli visibl insid the function which is defin , but it valu persist across function call .
in other word , matlab doesn't discard the valu of a persist variabl when the function return the wai it doe with a regular local variabl .
it keep that valu until the next call .
thi can be us in a few special case , for exampl , when we need to know how mani time a function's been call .
the onli other wai to do that would be to us a global variabl , but it bear repeat that we're discourag you from us global variabl until you've gain a lot more experi .
and even then , mani time all you need is a persist variabl , and thei don't caus the mischief that those sneaki global variabl do .
so let's see how to us persist variabl .
here's our first function that us a persist variabl .
hi job is simpli to keep ad up the valu of it singl input argument everi time it's call , and it return the total of the argument enter so far .
it's like a bank account that you add monei to .
let's try it .
okai , we start by ad three , and the total in our bank account is three .
let's add five more .
and let's put in ten , and you can do neg .
there , we took out <num> .
oop , we're overdrawn .
anywai , the kei to thi function is the persist variabl , summa , here , which is declar us the persist keyword right here , which show up in blue , sinc it is a keyword .
when a function is save in the editor , ani persist variabl in it ar initi to the empti matrix .
so we have yet anoth us for the if statement .
we can us it to determin whether thi is the first time the function ha been call .
if it is the first call , we set summa equal to the input argument n right here .
we check if it's empti .
we know it's the first call .
then we set summa equal to n .
it's an error to declar a variabl persist that alreadi exist in a current workspac .
that's why we couldn't us the output argument total to store the valu insid accumul .
we need to introduc the new variabl , summa .
it's clear that we could not accomplish what accumul doe with regular local variabl sinc thei're delet everi time a function return .
all persist variabl within a function can be reiniti to the empti matrix in ani of these three wai .
by resav the function in the editor , by clear the function with clear , we come over here and give the command clear accumul like thi or by exit and restart matlab .
let's see if that did reset summa to the empti matrix .
if it did , then accumul should start over from zero .
ye , it did .
so now you know how persist variabl work .
but you know what a persist variabl would be just perfect for ?
rememb when we were sai that mayb we should add an error messag to multabl that sai , what part of posit integ do you not understand ?
you know , when the user keep do it wrong over and over ?
well , we said we wouldn't do it becaus it would be mean , but now that we know how to count thing with persist variabl , it's just too tempt .
let's try thi version .
it's call snarki multabl , and it us a persist variabl right here .
it's call error count .
we're go to let you studi it on your own but let's try it out .
we'll give a correct input , and it look like it work just fine .
and now let's give it some incorrect input .
we gave it <num> minu <num> befor .
well , that's what the non snarki version did when we gave it a neg number .
let's try the fraction number .
that's also the non snarki respons .
let's try that vector .
okai , now we're in snarki land .
what part of posit integ do you not understand ?
the user ha made three mistak in a row .
it calmli handl the first two error and then unload on the user on the third on .
you can do thi sort of thing , and it might be kind of satisfi , but we know better , don't we ?
we should be nice .
go ahead and look at thi function to see how it work , there is a coupl of interest thing in here .
here you see we've put an if statement all on on line by us a comma here .
here's an inlin comment .
let's see down here we check if we've actual had three error .
that mean we give thi nasti error messag here .
we set the count back to zero to get start all over again .
so the next error the user get the non snarki respons .
so you can do thi .
and you shouldn't though .
well , we'll end lesson five now .
hi , and welcom to lesson six , loop .
thi week , we'll be talk about a power program concept , loop .
a loop is a new control construct that make it possibl to repeat a block of code a number of time .
so far , everi statement and everi function ha been execut exactli onc , or if some condit wa fals , not at all .
while thi is us , it doesn't exploit the real power of a comput which is the abil to execut million or billion of instruct per second .
with what we've learn so far , to get our comput to execut a billion statement , we'd have to type a billion statement , and we'd be type for mani centuri just to get a program to run for on second .
fortun , we can avoid all those centuri of work by us loop .
in fact , we've alreadi been us loop in matlab without even know it .
to carri out the command n equal <num> colon <num> for exampl , matlab us a loop intern to creat the vector <num> , <num> , <num> , <num> , <num> .
and to carri out the command total equal sum of n , it us a loop to add all those five number .
these ar implicit loop becaus we didn't us ani explicit loop control construct .
let's comput the sum of <num> through <num> without us the built in sum function .
we'll us a loop .
and we need to design an algorithm that includ the loop .
an algorithm is just a comput scienc term for a step by step procedur that solv a problem .
and thi figur , show a veri simpl algorithm that will solv our problem .
it us a variabl call total to store our sum as we comput it .
and it start by initi total to zero .
the larg light blue box repres the loop .
it specifi that the statement add in the total be execut repeatedli as n take on the valu <num> to <num> , on by on .
so the add n to total statement will be execut five time .
after the fifth time , the loop end and the program continu to the next statement after the loop .
that statement print out the valu of the variabl total , which is a result we want .
note the curv line with the arrow on it .
it show that after add n to total is ex , execut , control circl back and doe it again , and it show why thi control construct is call a loop .
that littl circl look like a loop .
let's look at the execut in detail .
warn , thi part is realli bore .
we start by set total to <num> .
thi step is call initi and it happen outsid the loop .
now we enter the loop .
sinc the loop must repeat in , for n equal to each item in the list , <num> , <num> , <num> , <num> , and <num> , the first thing that happen when the loop is enter is that n is set to the first item , on .
then n is ad to the total .
sinc total is <num> , n is <num> .
total equal <num> plu <num> which equal <num> .
that complet the first repetit of the loop .
a repetit is call an iter , and now it's time for the second iter .
thi time , n is set to the second valu on the list , which happen to be <num> .
again , n is ad to total .
now , total equal <num> , and n equal <num> , so , total equal <num> plu <num> which equal <num> .
that complet the second iter of the loop .
bore yet ?
me too .
don't sai i didn't warn you .
but we need to go through thi for at least on loop .
okai , for the third iter , n is set to <num> .
again , n is ad to total .
total equal <num> , n equal <num> , so total equal <num> .
that complet the third iter of the loop .
for the fourth iter n is set to <num> .
and as in everi iter n is ad to the total .
now total equal <num> , n equal <num> , so total <num> plu <num> equal <num> .
and that's the end of the fourth iter .
for the fifth iter n is set to <num> , again n is ad to the total .
now total equal <num> , n equal <num> so total becom <num> .
that's the end of the fifth iter and we've hit the end of the list of valu for n , so that loop end .
and final , we get to the statement after the loop , which print <num> , and our algorithm is done .
you mai sai thi wa a complic wai to add five integ , and you're right .
sure , type <num> plu <num> plu <num> plu <num> plu <num> would have been simpler .
suppos we want to add the first <num> , <num> number .
us a loop , we can just chang the five to <num> , <num> and it will add them all up in an ey blink .
now we're readi to see how we can implement thi algorithm in matlab .
the most frequent us loop construct in matlab is call the for loop .
and that's what we need .
let's see how we can us it to add on through five .
we start by initi the variabl total to <num> just like we did in our algorithm .
then come our for loop .
it start with the keyword for , and to the right of that is what look like an ordinari assign statement , but it's not .
it left , it left hand side is a variabl call the loop index .
in thi case the loop index is n .
on it right hand side is a vector .
but here's where the differ from an ordinari assign statement come in .
the vector will not be assign to n .
instead , the mean of thi special assign statement is that the index n will take on the element of the vector on by on .
at each iter of the loop , n will get the next element of the vector , stop with the last on .
that's exactli what we want here .
n will be equal to <num> , then <num> , then <num> , then <num> , then <num> .
at each iter , n is ad to the current valu of total .
so , just as for our algorithm , total keep accumul with sum , becom equal to <num> , then <num> , then <num> , then <num> , and final <num> .
onc the last element of the vector is assign to the loop index , and us in the block of code insid the loop , the loop end .
and then fprintf print the valu the total , which is <num> .
okai , let's see thi exampl insid matlab .
here's our sum algorithm insid a function call sumintup .
but instead of ad the integ from <num> to <num> we add up from <num> to n where n is the input argument .
if we run it like thi .
we get <num> , as we've just seen .
the good thing with a function , though , is that it's easi to run our loop with differ number .
let's try <num> .
sum from <num> to <num> give <num> .
what about <num> ?
that give <num> , <num> and so on .
let run the function with five again .
first , let's set a break point right here .
on the second line , i just click the littl dash here , and the red circl show me that my break point is set .
then we can us the debugg to step through .
okai let run it with five as the input .
the green arrow here mean that execut ha been suspend right where we put the break point and that we're readi to execut line two here .
at thi point , we have not execut thi line yet .
so the variabl total is not yet appear in the workspac .
but there's alreadi a capit n there , and it's equal to five .
rememb , that's our input argument .
and it get it valu from the function collar down here .
and it come into exist when it assign the input valu , which in thi case is five .
and that happen befor line two is execut .
let's execut line two by click the step button .
to get that button to show up , click the editor tab .
that tab contain all the debug tool .
here's the step button right here .
befor i click it , you mai rememb from our introduct to the debugg that you can also take on step by click the function kei f7 on a macbook or f10 if you're us window .
okai , as i click step , watch in the workspac to see the variabl total appear with the valu we're assign to it .
which is zero .
there .
now we're at the begin of the for loop .
okai , i'm go to execut the first line of the for loop .
click step execut that line .
there .
the workspac show that we now have the variabl lowercas n here , and it's been assign the valu on .
which is the first element of the vector on colon n here .
thi is a kei concept for the for loop , so it's worth repeat .
a loop index is assign the first element of the vector produc by on colon n , not the entir vector , at least on the first iter .
on subsequ iter , it will receiv subsequ element of the vector .
now we're readi to execut the bodi of the for loop here .
with the loop index set to on .
the bodi compris just line four and that line add n to total .
the workspac show their valu befor we take the step .
zero and on .
okai .
i'll click step now , and we see the total ha chang to on .
click step again here at the end statement result in matlab take the next element of the origin on to five vector and assign it to littl n .
we'll see that happen right now , there .
note that we did not see the green arrow go back up to the for line at the top of the loop .
that will never happen again through the entir iter .
that line is actual execut onli onc at the begin of the loop .
it calcul the vector valu , in thi case , on , two , three , four , five , and it set the loop index to it first valu , which is on in thi case .
then , after the first iter , the next index is actual set at the bottom of the loop , it is the same as if it were set at the top but that is why you won t see control jump back to the for line .
anywai , now were readi to execut the next addit .
total is equal to on and n is equal to two so after execut thi line the total will be equal to three .
and three it is .
as we continu click the button to step through the code , we can watch the workspac to see how n goe through all the valu to five .
and how total reach <num> .
now let's do that .
click , now n is equal to three .
click , total is equal to six .
click .
n is equal to four .
click total is equal to ten .
click , n is equal to five .
click total is equal to <num> .
and we take on more step , and we're out of the loop .
the next step , will print the result in the command window .
let's do that .
click , and we see the result show up in the command window down here .
take anoth step .
you see thi arrow point down , mean we're about to leav the function .
the function end .
the step button disappear and we're done .
let's look at thi exampl on more time .
the express with the for keyword is call the control statement .
thi is where the index variabl is defin and it's subsequ valu ar specifi , and it doesn't need a semicolon at the end .
the block of code between the control statement and the n keyword close loop , is the bodi of the loop .
it's the bodi that get execut repeatedli us success valu of the loop index .
here the bodi's a singl statement but in gener there can be ani number of statement in the bodi of a loop .
most of the time the vector to the right of the equal sign and the control statement will be form with a colon oper as it is here .
but it doesn't have to be .
here is anoth exampl .
instead of a colon oper , here we simpli us anoth variabl that alreadi contain a vector .
in thi case , it's a vector of five random number .
thi is perfectli fine .
the loop index will be assign the element of thi vector on by on .
the bodi of thi loop is a singl if , els statement .
it print out on of two messag depend on whether or not the current valu of the loop index , which is on of those five random number , is greater than on half .
we ran thi program and thi wa the result .
note that depend on when and how the pseudo random number gener wa initi , you mai get a differ random number set when you try .
and unlik myth buster , we do encourag you to try thi at home .
consid thi slightli variat , slight variat of the previou exampl .
we elimin the variabl name list .
becaus you can call a rand function or ani other function for that matter , right in the control statement itself .
in fact , ani valid express can go to the right side of that equal sign .
the valu assign to the loop index don't have to be integ , thei don't have to be regularli space , or even assign in increas order .
in fact , thei don't even have to be scalar .
the gener rule is that the loop index will be assign the column of the arrai gener by the express on the right .
of the equal sign .
if that arrai is vector , then those column will be scalar .
as for the bodi of the for loop , ani control construct can be us .
if statement , other loop , and so forth ar just list of statement .
let's see the second exampl in the editor .
and let's us the debugg again to watch it work .
place a breakpoint right here on line <num> and call the function .
well , we've stop at line <num> .
noth's realli happen yet , there's noth in the workspac .
so , let's take a step .
now we see n is equal to <num> over here .
that happen right there on line <num> .
now , we've gotten a set of number into list by call rand <num> , <num> , becaus n is equal to <num> .
and here's our list number .
there .
on , two , three , four , five number .
let's enter the bodi of the for loop .
x get the first number .
bodi of the loop consist of a singl if els statement .
see what happen , let's see a , ahead of time .
x is greater than <num> , right ?
so that mean the if branch will be execut instead of the els branch .
and we're in that branch .
and the fprintf execut and sai that it's larg .
now we're down at the end statement .
when we click on that , x we'll get the next valu , <num> . <num> .
so let's do that .
now , we see x ha the next valu .
that's also greater than <num> , so thi statement will execut again .
and there we have it .
the next step , set x equal to the next element , <num> . <num> .
x is not greater than <num> , so we'll be in the els branch .
and there we ar .
now we're in the bodi of the els branch .
we'll carri out thi fprintf , which sai that thi number is small .
and we'll keep go in that wai .
you can see x go progress though the list .
now it's on the last on .
that's also larg .
so , it just so happen that in thi posit in the pseudorandom sequenc , we had four larg number and on small on .
anoth step get us out of the for loop .
and on more get us out of the function .
by the wai , befor we start , the pseudorandom number sequenc wa initi to the state it ha when matlab start .
so , if you call rng of <num> befor you call rand_check , like thi , then you'll get the same number .
otherwis , you'll get a differ sequenc .
an interest question aris when the loop index is assign a valu explicitli by a statement within the bodi of the loop .
the question is thi .
what's the valu of the index on the next iter ?
the answer is that it's the next valu in the list of valu given in the control statement , up here .
assign to the loop index insid the bodi of the loop ar temporari , thei last onli dure the iter which thei take place .
there's no effect on the origin list of valu given on the if line at the top of the loop , or on the next valu to be assign in the loop index for the next iter .
let's see an exampl that illustr thi point .
a modifi sum int up function that we've name loop_test .
insid the loop , we first displai the current valu of n , then we add <num> to n , and then we add n to total .
let's run it .
why don't we give it the valu <num> .
so what do we learn ?
the function print the origin intend valu for n , as given by <num> to n here , a <num> <num> express .
we chang the valu of n from <num> to <num> .
but at the next iter , we got the origin intend next valu from here , which wa <num> .
as we said , chang the valu of the loop index is temporari .
it appli onli to the current iter .
there wa an effect of ad <num> each time , though , you can see in the total down here , which is <num> .
we ad an extra <num> to n each time through the loop , so the total should be <num> more than the sum of the first five integ , which is <num> .
and we did get <num> .
thi rule is ironclad .
at the begin of the nth iter for everi for loop , loop's control statement will assign the loop index the nth term in it list of valu , regardless of ani valu that mai have been assign to the loop index within the bodi of the loop dure the previou iter .
final , a word of caution .
don't chang it .
don't chang the loop index insid the loop if at all possibl .
it'll just caus confus when you read your code later , or when someon els read it .
there's veri rare a need to do so , and even then you'll be better off us an addit variabl than mess with the loop index .
let's talk a littl bit about handl vector with loop .
let's look at thi exampl .
here , matlab handl the subtract of the element <num> from the element <num> and got <num> .
it handl the subtract of the element <num> minu <num> , got minu <num> .
<num> minu <num> gave <num> .
<num> minu <num> .
it handl everi on of these subtract element by element .
well , it did that with a loop .
loop behind the scene .
we didn't write the loop , so we call it an implicit loop .
matlab doe that a lot of time .
but we can do it too , out here , in front of the scene .
let's do it .
as soon as i hit return , my work is done , and the result ar the same .
the for loop doe exactli the same thing that the arrai subtract oper did .
we visit everi element us the for loop index , which index into u , and index into v , and index into w .
we get the same result .
we had to us the length function here .
to find out how far to carri the loop .
in thi case , there's realli no reason at all to us an explicit loop instead of the implicit loop .
implicit loop run faster in gener , it's easier to program in gener , and it attract fewer bug in gener .
you should us it wherev you can .
but , explicit loop is much more versatil than implicit loop .
in addit to be abl to do everyth that arrai and matrix oper can do , for loop , loop in gener can do mani thing that arrai and matrix oper can't do .
sinc we often need to do these addit thing , matlab includ explicit loop as part of it languag .
as an exampl where we must us an explicit loop instead of an implicit on , consid the fibonacci seri .
it's defin as a seri where the first two element ar on , and all success element ar the sum of the previou two element .
we got a function here that creat the first n element for fibonacci seri call fibo .
let's see how it work .
first of all , we do some error check to make sure that the user ha pass in a scalar , a number that's greater than or equal to <num> , and a number that's an integ .
in other word , a posit integ .
we've done that befor .
and down here , we set the first element to <num> and the second element to <num> .
you'll rememb the definit of fibonacci seri is the first two element ar equal to on and the success element ar each equal to the sum of the two previou element .
well now we enter a for loop that goe from <num> to n , n is the input .
why <num> ?
well we've alreadi done <num> and <num> .
and as you can see on the left side of thi assign statement , we're do f3 and then f4 and then f5 and so on .
on the right side let's sai we're at three .
<num> minu <num> is <num> , <num> minu <num> is <num> .
so thi is element f1 .
thi is element f2 .
so f1 plu f2 give f3 .
let's do on more .
doubl i , the index , becom <num> .
so f of <num> is equal to <num> minu <num> , that's <num> .
and f of <num> minu <num> , that's <num> .
so f of <num> is equal to <num> plu f of <num> .
and so it goe .
here we had to us an explicit loop sinc there's no built in oper or function that could have done what we need , sum up the preced element of the vector to comput the current on .
so the fibonacci seri serv as a simpl exampl of why we need explicit loop .
the bodi of a loop can contain ani valid matlab statement , and that mean that a loop can contain anoth loop .
in other word , we can nest for loop .
that's in fact what we need to do if we want to perform an oper on everi element of a matrix instead of a vector .
let's do thi .
there we got some random number and a , all integ .
and let's do thi .
of cours you know what's happen here , we've us the arrai multipl oper , so everi element in a ha been multipli by the correspond element in a .
matlab did thi with implicit loop .
just as with vector , howev , we can write equival code to do the same thing with loop .
i've got an exampl right here in a file call mul . m .
let's see it .
there .
thi is a script , by the wai .
you'll rememb us talk about script at the end of lesson three .
a script is a file that contain just a list of command instead of a function .
you can run it by give it name as a command in the command window , and you can also run it by click thi run button up here , with the great big green arrow .
let's click the arrow .
there it show that mul is carri out in the command window as if we'd type it in there ourselv .
well , let's see what valu it gave to p .
good , same as the arrai oper did with it implicit loop .
we didn't make an error in our script up here , that's good .
but let's look at the command in the script .
first we us the size function up here to find out the dimens of a , and we put those dimens in row and col .
so row ha the number of row and a , col ha the number of column .
then we enter a for loop here , whose index r would suggest row goe from on to row , so it scan through all the row of a .
well you can have , as we mention , ani matlab command , in the bodi of the for loop , and so we have , a for loop in the bodi of thi for loop .
thi inner for loop is said to be nest in the outer for loop .
thi for loop's index c , which suggest column , scan all the legitim column indic in a .
the actual calcul is done in the bodi of thi inner loop , and that bodi consist of just thi on statement .
it's a multipl , and multipli element r , c of a by element r , c of a .
when we exit thi for loop , we've done all the column for a given row .
we repeat by chang the row index by on and carri out thi loop again , for all the column , of that new row index .
and we repeat again , for a new valu of r , and we carri out thi inner loop for all these valu of c for that given valu of r , and so on .
when we exit the outer loop , we're done with the script .
note that we've carri out the outer loop row time , and for each on of those we carri out the inner loop call time .
so thi bodi here , the singl statement wa execut the number of time it's equal to row time call .
and that's the same number of element that there ar in the matrix a .
so that's all there is to it .
or i should sai , there's a lot to it .
i sai that becaus thi script is a lot more complic .
in a dot star a .
if we want to follow the order in which the element ar multipli , we can insert a line right after the multipl , like thi , that print thing out .
it'll print the row and the column in parenthes , us the percent d format with a space between them , and then it'll skip to a new line .
let's try it .
and i'm go to need more room than thi i think i'll sacrific my workspac .
so i'll close that and then move the command window over here besid the editor window .
there .
so let's try it again .
thi time , i'll type mul in the command window .
there you can clearli follow what happen .
rememb the first element is the row .
so we did row <num> column <num> , row <num> column <num> , <num> , <num> , <num> , <num> .
we're done with row <num> .
now we move to row <num> and do column <num> , <num> , <num> , <num> .
then we move to row <num> and do column <num> , <num> , <num> , <num> .
when we're do these column , we're stai insid thi inner for loop .
when we're done with the inner loop we go to a new row in the outer loop and then repeat the inner loop .
and we do that over and over and over .
while we're at it , we could also insert anoth fprintf statement right here .
like thi .
it'll print work on row , space , and then it will print the row number r , us the d format , dot , dot , dot , go to a new line and then print all thi stuff out .
let's try that .
there .
work on row <num> .
well <num> , <num> , <num> , <num> , that is row <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , and so on .
thi make it nice and clear .
thi is call row major order , it mean that you visit everi element of the first row , then everi element of the second row , etc .
you can't do thi sort of thing to look insid an implicit loop that matlab provid .
but as a matter of fact , for implicit loop matlab us column major order .
let's consid anoth exampl for nest for loop .
i've got an exampl right over here in a file call asterisk , there it is .
let's run it and see what we get .
well what we get is a pretti littl half of a tree depict in asterisk .
in the first line , see that we get on asterisk .
the next line two , then three , then four , then so on until we get to seven asterisk on the last line .
well over here in the code , there's nest for loop here .
and in the insid loop , we see that it print on asterisk each time through the loop .
it index goe from on to mm , and as mm get bigger , it print longer and longer line of asterisk .
you can see the outer loop chang mm from <num> to n which happen to be set equal to <num> , which is why we get seven line with seven asterisk on the last line .
and you'll notic that after each of the inner loop is finish , thi fprintf take us back to the begin of the next line .
the trick here wa that we us the valu of the outer loop index , to control behavior of the inner nest loop which gave us these longer and longer row of asterisk .
thi again is someth that we cannot do with implicit loop .
for loop work well when we know the maximum number of necessari iter befor enter the loop .
in a control statement , the express is evalu and then the loop index will receiv the element of the vector or the column of the arrai on by on .
maximum number of time the for loop bodi will execut is fix at thi point .
why maximum ?
becaus we can alwai quit earli with the a break statement .
what if we don't know the maximum number of time the loop need to iter ?
consid thi problem .
how mani posit integ do we need to add togeth to exce <num> ?
the onli wai to solv thi with a for loop is to guess a larg enough number for the number of iter and us a break statement to stop the loop when <num> is exceed .
you can do that .
it's not that hard for thi simpl problem .
but there's a better wai .
on with no guesswork at all , a while loop .
check thi function out , we call it possum , for posit integ summat .
it take the limit that we want to exce as an input argument .
it both print and return both the number of posit integ we need to add togeth to exce the input valu and the sum of those integ .
we start by set both n and total to zero .
then we us the new while keyword follow by a condit .
the mean is simpl .
if the condit is true , we execut the bodi of the while loop .
the bodi is the set of statement between the while line and the end keyword .
onc we execut the bodi , we go back and check the condit again .
if the condit is fals , the while loop is done , otherwis it continu .
the bodi in thi exampl increment n by <num> and then add the result to total .
onc total exce limit , the while condit will be fals , the loop termin , and we print the result .
the function then termin and return it output argument .
if we run the function with the input <num> , here's the result .
the first line of the printout came from the fprintf insid the function .
then matlab caught the first output argument in it and variabl , and echo the result .
the second output argument wa discard .
well we've seen the while loop in action .
let's take a closer look at it form .
just like the for loop , the while loop ha a control statement and a bodi .
howev , the control statement of a while loop is a condit like , for exampl , total less and than or equal to limit .
it valu is either true or fals .
if it's true , we execut the bodi .
then , we check the condit again .
if it's fals , we quit .
you might have notic that the gener form of the while loop is veri similar to that of the if statement .
in fact , syntact , the onli differ is the differ keyword , while , instead of if .
but semant , thei ar veri differ .
the if statement's a on shot deal .
if the condit's true , we execut the bodi and we're done .
but the while loop keep check the condit and execut the bodi over and over and over until the condit becom fals .
thi is a veri power and veri flexibl wai of loop .
let's look at thi exampl in matlab .
here's the possum function in the editor window right here .
let's run it .
okai let's check it answer .
let's look at the last exampl first .
we can do that by check the sum of <num> through <num> and then the sum of <num> through <num> .
like thi .
okai , <num> isn't larg enough to get the sum abov <num> , <num> , but <num> is .
and the sum to <num> is <num> , <num> .
which agre with the answer up here .
so the answer ar correct .
you can check the other exampl , too .
you'll find thei're all correct .
thi function work like a charm .
but befor we leav it , let's talk a littl more about it form .
we point out how similar a while loop is to an if statement .
but notic how similar thi particular while loop is to a for loop .
not onli doe it iter , but like a for loop , on each iter , our while loop increment in , right here .
which is a kind of loop index .
and it start out in initi valu , here .
and termin when it reach it's last valu .
i sai kind of , becaus thi so call loop index you're in is not an integr part of the while loop control statement up here .
in the wai that an index of a for loop is .
the index of the for loop is an integr part of the for loop control statement .
the syntax requir it .
and the for loop semant is base on it too , becaus the number of iter is complet determin by the list of valu for the for loop index given in the control statement .
and then the index is assign a new valu from that list on everi iter .
in fact , as we show earlier in thi lesson , you can chang the for loop index to whatev you want in the bodi of the loop and on the next iter , it'll be chang right back to the next item of the list by the for loop control construct .
the while loop on the contrari , doesn't provid a list of valu for an index and it doesn't increment anyth on ani iter .
if we want to increment someth , we've got to do it ourselv .
explicitli , with a statement in the bodi of the loop as we have here with thi n equal n plu <num> statement .
the index is not part of the while loop syntax at all or the while loop semant .
and to drive that point home , i'm go to show you a perfectli good while loop with no loop index at all .
it's in a function call approxsquareroot .
right here .
as it name suggest , thi function comput an estim of the squar root of it input argument x here .
there's just on statement in the bodi in thi while loop .
it comput the valu of a variabl call y .
i'm go to remov thi semicolon .
you wouldn't ordinarili want to do that , but i want to see y's valu chang each time we iter through thi loop .
let's also go over here and chang the format to long , like that .
so we can see more decim and ys print out .
okai , let's calcul the squar root of <num> .
there .
now , as you can see , it took onli on , two , three iter .
and then it gave us back the answer .
and that answer , <num> . <num> , seem like it might be pretti close to the correct answer .
let's compar it with the built in function .
yeah , that's close .
differ by two millionth .
if we test on a larger number , we'll see it take a few more iter .
let's try <num> .
now , thi time it took on , two , three , four , five , six iter , instead of three .
let's see , how close it is thi time ?
oh , not as close , but still pretti good .
that's three thousandth .
well , let's look at the function itself , over here a littl more carefulli .
let's look at the condit here .
first thing that happen is the absolut valu of the differ between y squar , and x is calcul .
y of cours is suppos to be the squar root of x , that's what we're try to make it equal to .
and if you squar the squar root of x , it should be equal to x .
so the differ here , ideal , would be equal to zero .
if it's bigger than zero , then we might want to do a littl more work .
so , what we do in fact is check to see , if it's bigger than a thousandth of x .
if it's bigger than that , then we carri out the bodi of the loop again .
and we check thi again , and we keep do that until the differ between the squar of y and x is absolut valu , no greater than a thousandth of x , and then the loop end .
we can talk about thi combin of x and y , that give us a better estim of y , if in a current valu of y .
but i'm realli more interest in thi condit .
the kei thing to notic here is there is no loop index .
i mean , where is a counter that count up the number of time that we go through ?
where is a list of valu that it's set to ?
where is an increment of n ?
there is no n .
there is no loop index .
it's absolut unneed , we don't care how mani time we go through thi loop .
we just care that we go through it , while thi number is bigger than thi number .
we stop , and that's no longer true , and declar that we've got a good approxim to the squar root of x and we quit .
and if we think we're quit to soon to get an answer that's accur enough .
we can increas the accuraci by chang the on thousandth of x threshold to someth smaller sai , make it on ten millionth of x .
so , it took six iter for on thousandth of x .
now , we've increas the requir accuraci by a factor of <num> , <num> .
wonder how mani more iter it's go to take now ?
better get comfort .
thi could take awhil .
wait .
on , two , three , four , five , six , seven iter .
onli on more iter ?
let's see , how accur thi on is , actual compar to the built in function here ?
three ten millionth .
we went from three thousandth , and six iter to three ten millionth , and seven iter .
thi thing is converg fast .
by the wai , if you're wonder why we aren't at on ten millionth , sinc we have on ten millionth here .
rememb , that thi wild loop condit is check the accuraci of the squar of y , while down here we're check the accuraci of y .
well , let's put that semi colon back in , now that we've seen how thi thing work .
and let's see , how accur we ar on someth we know the exact answer to .
like the squar root of a million .
now , that's pretti accur .
look at that .
it should be <num> .
huh , ten to the minu eleven .
excel .
let's see the built in function try to beat that .
zero .
you know , matlab , no bodi like a show off .
okai , our littl function mai not be quit as good at calcul squar root as the built in function .
it's a lot better than the built in function that's show you how y loop work , which is after all it's purpos .
let's get back to that by give it anoth input .
let's try to minu <num> .
okai , well , it's not do anyth here .
where's our prompt ?
well , here's a hint of what's go on , look over here , you see the word busi .
thi mean that matlab is actual still work on our function .
it hasn't croak , it hasn't stop , it's still go , it's in thi wild loop , and it's go over and over .
and it'll go forev becaus the condit in thi wild loop , will never be fals .
thi will alwai be greater than that .
so we need to stop thi thing .
do you rememb what we said earlier , that you should do in a case like thi , to stop matlab ?
you could click the littl red button up here , or over here , depend on your oper system , and stop matlab entir , and start all over again , but that's not necessari .
ctrl c will stop thi loop .
let's do that .
i'll pop up a keyboard viewer , so you can see what im do .
and i'll press the ctrl kei on your keyboard , it might be ctrl on the kei , or it might be control , and here it's thi littl carrot , so i'm go to press that .
there you can see i press that , and while i hold that down , i'll press the c kei .
okai , and when we did that , everyth's stop , we got thi red messag , and we've got our prompt again .
the red messag is for onc not a slap on the wrist by matlab .
thi messag sai that the user stop it , while it wa work .
mayb it's mad becaus we stop it .
but it tell us where it wa , when it stop .
on line five of the function approx_sqrt , that's right here .
that's the end statement of the loop , and that's where matlab typic stop , when you us ctrl c , while it's loop .
let's remov the semicolon here , and run it again , so we can see thing happen .
and you can see valu of y stream out on the screen .
it's work hard , but let's go ahead , and stop it with ctrl c .
okai , our function clearli doesn't work for thi case .
the algorithm work onli for non neg input .
the squar root of a neg number is a complex number , and we didn't do anyth to produc a complex number in thi short function .
if you're familiar with complex number you know thei have a real part and an imaginari part .
matlab handl complex number with eas , which is a good thing , becaus thei come up in some applic in engin and physic .
we're not go to deal with them except briefli in thi cours .
first , let's see what the built in squar root function doe with minu <num> .
you see the letter i at the end here ?
that mean imaginari .
the squar root function is tell us that squar root of minu <num> ha a real part that's equal to <num> , and an imaginari part that's equal to , well , all thi .
we can produc complex number , too .
there ar a coupl of wai .
here's on .
i just type an i after the three .
and i got a complex number that ha a real part equal to <num> and an imaginari part equal to <num> .
here's anoth wai to do it .
thi time i put <num> plu <num> time i .
matlab set the variabl i equal to the squar root of minu <num> .
and you can us it to make an imaginari number .
if you set i equal to sai , <num> in the meantim , and then try thi again .
well it us the <num> .
if you want to get i back to mean the squar root of minu <num> , clear it .
now let's just look at it .
now you see i is equal to the squar root of minu <num> which is the imaginari <num> .
that's how you can produc complex number , and it wouldn't be hard to fix our function so that it would return the correct complex answer for a neg input .
but we didn't do that and as a result , the condit in the while loop will never becom fals for a neg input .
so matlab get stuck in thi loop .
a loop that'll never end is call an infinit loop , and it's a featur onli of while loop in matlab becaus that's the onli place it can happen .
a for loop can never becom an infinit loop becaus a loop will alwai quit when the loop index reach the end of it list of valu .
and there's no wai to set up and infinit list of valu , accident or on purpos .
but sinc while loop ar suscept to thi problem , we have to be veri care how we set up the condit of a while loop , and how the variabl in the condit ar chang in the bodi of the while loop , so that eventu the condit will becom fals .
while we're develop a program with on or more while loop , it's veri common to make mistak that caus on of those while loop to get stuck in an infinit loop .
when matlab is seemingli not do anyth , alwai rememb to check the bottom left corner for a busi messag .
if you see that , you know matlab is not dead .
it's still work on your program .
by the wai , some veri complex comput can run for a long time , even on todai's fast comput .
so whether you're us for loop or while loop , matlab mai still take a veri long time to finish your function .
in that case , you'll see the busi sign , and you'll know it's work .
but if it's take too long , you can alwai us ctrl c to stop the program , whether it's caught in an infinit loop or it's plow through a calcul that you just don't want to wait for .
sometim , dure the iter of a for loop or a while loop .
after some of the iter ar done , the rest of them should just be skip .
let's look at an exampl of thi situat and some code that take care of it .
the code is in the file name breakexampl over here .
and it look a littl differ from file that you've seen befor .
first of all , there's no function keyword in the file , so it's a script .
and also , thi script , unlik the other script we've seen in thi cours , is divid into section .
here , let me have a littl more room and i think i'll just clear the screen here .
there .
thi is a section , thi is a section , thi is a section and so on .
a section is a set of line that begin with two success percent sign .
the section end when anoth section begin , or at the end of the file , like thi on .
you rememb that the percent sign signifi that it and the text that follow it on the same line ar part of a comment , which is there onli for human to read .
matlab color a comment green .
when there ar two percent sign in a row , it mean that a new section is begin .
matlab indic that there's someth special about that with a bold font .
thi font and thi font is bold compar to that on .
the signific of section is that each section can be run by itself , as if it were the onli thing in the script .
you do that us special button on the editor .
thei're up here , we'll look at them in just a minut .
but first , let's look at the first section of thi script .
not thi on , actual the second section , which ha a while loop in it .
it set all the valu in the vector name read , thi vector here equal to <num> until it's reach the first valu with exce <num> .
the condit here in the while loop make thi happen with two part .
the first part here befor the ampersand , ampersand , allow the loop to continu onli while the index is not greater than the length of read .
and the second part allow it to continu onli while the read ar less than or equal to <num> .
you mai rememb that a major differ between a script and a function is that a script ha no argument , and it ha no local variabl .
it us the variabl in the command window workspac .
sinc the script here read the variabl read , we need to give read a valu .
let's give it a row vector of <num> random integ , and we'll reset the random number gener first , so we can regener the same set of pseudo random number for the next two exampl , and so that you can easili repeat thi exercis with the same result .
i've gener number , you know , rang from <num> to <num> here , want to get at some number abov <num> .
and i see i've got some here .
first on appear to be on on , two , three , four , five , six , seven , eight , at element nine .
now let's run exampl on .
i click anywher insid thi section .
and when i click in that section , it's highlight in yellow .
then i come up here to the ribbon , and i click the small green arrow with the tini yellow page of text behind it here .
it sai , run section .
well , it didn't seem like anyth happen but let's take a look at read .
ah hah .
we can see that the on , two , three , four , five , six , seven , first eight element ar now zero .
and noth ha happen beyond there , becaus , over here the while loop got to element nine , realiz it wasn't less than or equal to <num> , so it skip the rest of the iter .
it did the first eight iter , skip all the rest of them , which is what we want it to do .
well , thi work fine .
but , the condit of the while loop seem a bit cumbersom , all thi here .
or , at least let's call it cumbersom to give us an excus to show you anoth wai to do thi .
exampl two provid anoth wai .
let me highlight it .
first of all , it us a for loop instead of a while loop , which you can see here .
it control statement easili enforc the requir that the index stai within the rang of indic of the vector read .
but there is no possibl for the control statement of ani for loop to check ani condit whatev , the wai there is with a control statement of a while loop up here .
so it seem at thi point , that the loop will scan all the element .
the bodi of thi for loop contain just on if els statement .
that statement check the valu of element ii read here to see if it's greater than zero .
if it is , it execut thi break statement .
otherwis , it set the element equal to zero .
word break here is highlight in blue becaus it's a matlab kei word .
and thi same kei word is us in the same wai in mani other languag .
it's not the same thing as a break point , these thing we've set when we click up here and make a red circl to tell the debugg to stop on a given line .
now thi break statement is an execut statement that caus the loop to end immedi .
and it work for both while loop and for loop .
and it's a more power mechan for end a loop than a while condit becaus , in addit to skip the subsequ inter , it can skip the rest of the statement in the current iter .
here for exampl , there could be more statement after thi if els statement .
and everi on of them would be skip if thi break statement were execut .
in short , the loop quit as soon as that break statement is execut regardless of where it occur in the loop bodi .
let's try thi exampl .
first , we give our vector read the same pseudo random number sequenc as befor .
see if i can find that , there .
and now we click anywher insid the next section of code , thi on , exampl two .
last time we did exampl on .
and we hit the run section button again .
now , let's see if it work .
we have to look at read .
and it look like it work again .
all these valu befor <num> , which were origin less than <num> , ar now set to <num> , and the rest have been untouch .
let's go over on more time how it work .
we enter the for loop , and it appear that we're go to process each element of the vector becaus of the phrase ii equal <num> length of read .
that doesn't happen .
as long as thi if statement find that the valu of element ii of read is not greater than <num> , then the els claus dutifulli set that element to <num> .
when the if els statement find that the valu is greater than <num> , it enter the if claus and hit the break right here which end the loop immedi .
by the wai the break statement can appear onli insid a loop .
in fact matlab will stop the program and print an error messag if it encount a break anywher that's not insid a loop .
okai , both these exampl work , but we've got anoth exampl .
it also us the break statement as you can see here , but it take advantag of matlab's answer to an ag old question in program languag .
when the loop end , what happen to the for loop index ?
well in most languag and matlab is on of them , it's still there and it keep the last valu it had while the loop wa execut .
and that's true whether the for loop end normal or end with a break and whether it wa set by the for loop control statement or by a statement insid the bodi , et cetera .
occasion we can take advantag of the fact that the loop index keep it last valu .
for exampl , suppos the problem is simpli to find the first index with a valu greater than <num> , without set smaller valu equal to <num> .
exampl <num> wa design to do just that .
it start out with the appar intent of scan through all the element , of the read , with ii <num> length of read .
it bodi is an if statement though .
and it us a break statement to exit the loop at the first element that's greater then <num> .
after the loop come thi fprintf statement which tell us the index of the first read abov <num> .
look pretti good , let's try it .
we'll gener the same valu onc again .
you recogn them by now .
and we click in the last section , and then click the run section button to run the code .
and over here we see it sai , first read abov <num> is at index <num> , and that's correct .
thi seem to work well .
but there's a bug lurk in thi code .
can you see it ?
it will give the wrong answer in mani case .
let's try on of those case .
we just need to give it valu that ar all less than or equal to <num> .
there , now let's run it again .
hm , it seem to think that the last element is greater than <num> .
but , it's not .
well , let me see if i can figur out the problem .
gosh , i'm kind of tire , though .
hei , i know what .
i'll let you fix it .
it'll be good exercis for you to extermin thi bug .
and , sinc you're go to take care of that , we're done with our littl script and it section .
i got to show you on featur of script with section that is quit cool .
let's go up here to the ribbon and click on the tab label publish here .
there ar lot of thing you can do here , but i'm go to show you just on .
let's click thi button label publish .
and what show up is a web page version of your script with fanci type set and layout and link and so on .
let's compar the two .
here we have the top label , might call it a titl .
it's been put in red , nice , larg type .
the version of matlab you have mai vari thi a littl bit .
thi is the latest version as i'm speak here .
and then there ar these section here .
each on of those is put insid thi thing call content , and if we click on these we see that thei ar link .
like , there's exampl <num> .
if we click there , we're on exampl <num> .
you can see the code .
here's the comment i've got in exampl <num> .
skip is accomplish with a break statement .
that's go to exampl <num> down here .
show that the for loop index look veri profession and even run each on of these .
there wa no output with the first two .
but thi on ha output .
first read abov <num> is at index <num> .
hm , well , that remind me that bug is still there .
you haven't fix it yet .
mayb we don't want to show thi .
but if we did , you can link it into other web page .
you can email it .
you can show it to your friend .
i think that's quit cool .
and by the wai , thi webpag is store in a littl folder insid the current folder .
that's gener by publish .
if you go in here , you can see breakexampl , which wa the name of thi m file , . html .
let's go back up to where we were befor .
okai now , what were we talk about ?
oh ye , you were go to get rid of that embarrass bug , you know , that we discov when we ran thi third exampl .
and speak of bug , there's an extrem common bug that show up when break statement ar us in nest loop .
it's a big problem for novic programm .
not that , you know , be a novic programm is like a bad thing .
me and my favorit peopl over the year have been novic programm .
i us to be a novic programm myself .
the fact remain that novic programm have troubl with thi problem .
the problem is that the break statement break out of onli the innermost loop .
mean that it will caus the loop it appear in to termin , but the outer loop will continu .
that is often not what the new programm expect .
we're go to look at an exampl that work with a two dimension arrai .
so let's gener on .
there is a nice arrai .
we want to look at each element in row measur order , that's first row , then second row and so on , and set the element equal to zero until we find the first valu that's greater than <num> , and we want to leav that element and all the other element after it as thei ar .
so in thi case , we want to put all zero on thi first row becaus there's noth greater than <num> there .
then we move the second row , and we put zero here and here , but when we get to the <num> , we stop , we don't put a zero there , and we se , leav everyth els as it is , and we're done .
thi is a job for for loop , and sinc we want to be abl to stop befor we get to the end , but we can't know where we want to stop until we get there , it's also a job for the break statement .
here's our first try in thi file call bad break .
as you can see , there's a for loop here whose index ii goe from <num> to the size of a , <num> .
size of a , <num> mean the first dimens of a , which is the number of row .
then there's an enter loop whose index jj goe from on to the size of a , <num> .
size of a , <num> return the second dimens of a , which is the number of column .
so ii is set equal to on , and we go in here , and jj goe from on to eight becaus there ar eight column in a .
and it check the valu of the element ii , jj against <num> , and if thei ar less than or equal to <num> , it set them to zero , els it break .
well , that look pretti good .
let's try it .
we can run it by type it name .
we can also run it by click on run up here .
that work well for script , so let's do that .
so bad break ran and let's take a look at a .
someth's wrong .
we should've set the first row equal to zero , we did that .
then we should've set these two equal to zero , we did that , and stop with the <num> , and it look like we're stop .
but then , we seem to start up again on the third row , two more zero .
and wait a minut , thi <num> here got set to zero , too .
thi is exactli the problem we were talk about .
the break statement stop the inner loop , but not the outer loop .
well , thi exampl is just complic enough to warrant the debugg .
first , i'm go to clear the command window becaus i want to print some thing in there , and then i'm go to set a back to the valu it had befor .
there .
okai , i'm go to set a break point , but befor i do , i'm go to remov the semicolon here , after thi zero becaus i want a to print out .
and i want it to print out each time through the inner loop , and that will make it do it .
now i'm readi to set a break point , i'm go to put it right here at the begin .
woo , it's grai , that mean i have to save thi .
it mean that the file that i'm break is not the same file that i'm , that i'm look at here .
okai , we're readi .
let's run it .
i'm go to click run .
and we see that bad break is run and k mean we ar in the break system , and so thi littl green arrow , which point to the next statement , is go to be execut .
we haven't done anyth yet .
we ar about to enter the outer loop , so i'm go to take on step .
when i do thi , you see that littl hint there that that show you , depend on your oper system , a shortcut you can us for thi on the keyboard .
i like to us the button , so i'm go to do that .
so we go in here , and ii is set equal to on .
if you hover over the ii you can see it valu is on .
now we're about to enter the inner loop .
let's do that .
now we see that ii is still on , jj is on , and we're check the valu of a , ii , jj , which is a on on .
it's <num> .
if it's less than or equal to <num> , we'll set it equal to zero .
and of cours it is , so we're go to enter thi if branch and set thi equal to zero , so let's carri that out .
and when we do , you'll see the whole arrai a print out .
that's what happen when you assign ani valu to an arrai and leav the semicolon off the assign statement .
not just the element that you assign , but the whole arrai print out , and that's kind of nice for us here .
we can see what the arrai look like and we can see how it wa chang from the last time .
just thi zero show up here .
okai , we're readi to complet that iter of the inner loop .
and now , here we ar at the second iter .
the outer loop still ha ii equal to on , the inner loop now ha it at two , and we're about to check the element on two , which is also less than <num> .
and you can see it's set to zero .
and we can continu in thi wai , go all the wai through , the first row .
everi singl thing on that row get set to zero .
now we finish that row , and that put us at the end of the inner loop , and we're down here at the end statement of the outer loop , and you know , the end statement will caus the ii to take on it next valu , which is two .
so let go forward on step .
okai , we're now back at the top , and we're about to enter the inner loop again .
thi time ii is equal to two .
be a littl more care here .
so now we've enter that loop , ii is equal to two , jj is equal to on .
so we're go to be look at thi element right here , which is equal to <num> .
it is less than or equal to <num> becaus it's equal to <num> , so we'll go into thi branch again .
there we did , and we'll carri it out , by set that element equal to zero .
let's do that .
and it got set equal to zero , as you can see here .
so we're at the end of that iter .
let's take anoth step .
ii's still equal to two , we're still on the second row .
jj is now equal to two , so we're look at thi element , it's <num> , it'll be less than <num> .
so we enter the if branch , we set it equal to zero , you saw it becom zero there .
now let take on more step .
we've enter the third iter of thi inner loop .
ii is equal to two , jj is equal to three , so we're about to look at thi element .
thi element is not less than or equal to <num> , it's <num> , so we'll go to the els branch .
there we ar .
we're about to execut the break statement .
in the break statement , we were expect to exit the whole thing but it's onli go to exit the inner loop .
so let's watch that happen .
there .
we jump down .
we're out of the inner loop .
we've jump down to the next iter of the outer loop , ii is now equal to <num> .
so we're down here on the third row .
now we see the problem .
we need to break out of the outer loop at the same time we broke out of the inner loop .
we need to break out of thi loop when we broke out of thi loop , with thi break statement .
well , now we know what went wrong , so let's quit our debug session .
we can do that by click the great big red squar here label quit debug .
there , bug session is over , and on indic that it is , is there's no green arrow here , and anoth on is that we don't have the k in front of our prompt anymor .
we've establish that we need to break out of the outer loop as well as the inner loop when we find what we're look for .
so how do we do that ?
well we've got code here that doe it in goodbreak . m .
let's take a look at that .
well first , we see a new variabl here call found .
we set it equal to fals befor we even enter the outer loop .
then , insid the inner loop down here is where we have the break .
we set found equal to true befor we execut the break .
and then in the outer loop , after we're done with the inner loop , we check found to see if it's true .
there ar two version of the condit for check the valu of found .
the first version is found doubl equal true , like thi .
that certainli check to see if found is equal to true .
and the second version is the on we've got here .
either case work becaus in both case , the condit will be true if and onli if found is equal to true .
if found is true , then we break out of the loop .
we've alreadi broken out of the inner loop right after we set found equal to true , and so we break out of the outer loop and we're done .
the variabl found which show up in three place typic is call a flag .
a flag usual ha onli a few valu , and most often just two valu , like thi , true and fals the most common .
and it serv as a signal that affect the behavior of the program .
here , the behavior is to exit the outer loop or not .
and the flag is the standard solut to the problem of exit nest loop .
there is anoth wai , but it can onli be us when a , the nest loop is insid a function and b , it's appropri to exit the function when you exit the nest loop .
you just replac thi break in the inner loop with a return .
and you can forget thi part .
and thi part .
and thi part .
in other word you can forget all the break and all the flag .
return leav the function for good , regardless of how mani nest loop there ar .
if you have work to do in the function after the nest loop ar done , then it's not appropri to exit the function when you exit the nest loop and it typic is inappropri , so you should rememb how to us a flag .
well , let's get our nest loop back the wai thei were by do a few of these undo .
there .
and with that , we're done with the break statement , but there is a relat statement call the continu statement .
it's similar to the break but instead of us the break keyword , you us the continu kei word .
and instead of quit the loop , it skip what's left of the current iter of the loop and move to the next iter .
in a for loop the loop index take on it next valu and next iter begin .
in a while loop , it just goe to the begin and check the loop condit again .
what probabl the biggest differ between the continu statement and the bracket statement , is that the continu statement is just not us veri much , and the break statement is us a lot .
so we're not go to cover the continu statement in thi cours , but if you're interest in it , check it out in the textbook .
we've seen the power and flexibl of loop .
now , we're go to see anoth power featur , on that's uniqu to matlab .
it's call logic index .
let's start with a problem and it tradit solut .
given a vector , v , of scalar , creat a second vector , w , that contain onli non neg element of v .
doesn't sound too complic .
in fact , though , there ar a coupl of subtl thing in thi problem that you might not get right the first time you try solv it .
here's a solut .
let's go through it line by line .
first , we initi w to be the empti arrai .
we've got to do thi becaus that's the answer we need if there ar no non neg element in v at all .
we don't initi w , then for the no non neg element case w will end up be undefin at the end of our program .
in the second line , we introduc a new variabl call jj and set it to <num> .
jj is necessari becaus , we'll need to add element to w on by on .
and we'll us jj to specifi the posit in w at which to add them .
it can't be the same index that we us for v becaus thei won't remain in sync as we copi some element of v , but not other .
so we've got to have two differ indic for the two vector .
and we got a simpl for loop , whose loop index ii can be us to index into v .
we need to hit everi element of v , so ii goe from <num> to the length of v .
at each iter of the loop , we need to check whether the current element of v is non neg .
in other word , whether it is greater than or equal to <num> .
we do that with an if statement .
if v ii is non neg , we need to insert it into w .
we do that by first increment jj by <num> .
rememb , it start at <num> .
and we need to do that everi time there's a new element to add .
then , we copi the number into w at the correct posit .
w jj equal v ii .
again , notic how we us on index for w , and anoth on for v .
and that's it .
the remain two line ar just the end keyword close the if statement and the for loop .
handl jj is a littl tricki .
but it's not terribl complic .
and thi is the wai you do it with the typic program languag .
but matlab is not a typic program languag .
matlab provid a much more eleg intuit solut .
a solut that's more , well , matlab like .
let's start with the solut that we've come up with so far .
well , with matlab , we don't need to mess with jj at all .
let's get rid of that .
there , jj's gone .
and now we're assign v ii to w .
that's not we want .
what we realli want to do is stick v ii onto the end of w , like thi .
the hard work is done by the singl express on the right of the equal sign .
it construct a vector that ha all of the element that ar current in w .
follow by v ii .
left bracket , w , v ii , right bracket .
and we assign thi new vector back to w .
it's much clearer here that we ar append v ii to the end of w than it wa with the other version .
not to mention it's shorter .
matlab is just so nice to work with .
and folk , it get even better .
the ultim matlab solut to thi problem and mani like it is on singl line of code .
in fact , it's less than ten charact .
if i could have the drumrol , pleas .
realli ?
okai , we don't have the drum .
anywai , here it is .
it's concis , it's eleg , and it solv the problem .
if you don't believ me , just paus thi video and try it out in matlab .
i'll admit that thi syntax look a bit unusu .
thi is an exampl of logic index , and it definit need some explain .
what it sai is that the element of w ar set equal to the element of v wherev those element ar greater than or equal to <num> .
in order to understand how it work though , we first need to look at logic arrai .
we've actual seen logic arrai alreadi .
we just didn't call them that .
last week , we saw that matlab consid everyth that's non zero as logic mean true and zero as logic mean fals .
and when we ask matlab to give a logic true valu , it return <num> .
the greater than oper wa appli to each correspond pair of element in the two vector .
like <num> and <num> , <num> isn't greater than <num> , so it gave <num> for fals .
minu <num> is greater than minu <num> , so we get a <num> for true , and so on .
in effect , it goe through each pair , assert that the left element of the pair is greater than the right element , and it return <num> when the assert is true , and <num> when it's fals .
the result is a vector of logic valu .
these ar not just ordinari number .
the on and zero that ar output by the greater than oper or by ani other relat oper ar special .
thei belong to a special type of valu call the logic valu .
we'll see later that there ar lot of type of valu in matlab .
but for now , we'll just point out that we've seen ordinari numer valu like you get when you do arithmet .
we've seen charact and now we've seen logic valu , like you get from the relat oper .
and we just got a logic arrai in the form of a vector .
well , there ar other wai to produc arrai of logic valu too .
consid thi command .
so what happen here ?
the first element of thi vector is true , <num> is greater than <num> .
so , we return a <num> for true .
second element is fals .
so , here come a zero .
these ar logic valu .
and what about the third on ?
well , we've got <num> greater than <num> , that's true .
and <num> greater than <num> , that's fals .
so , true and with fals give fals .
but , then we appli the not oper here , symbol by thi tild , to the fals .
and that turn is into true .
and well final , we get a true here .
now , we knew that these result here were logic valu becaus the relat oper give logic valu .
well , now we'll tell you that the logic oper , in addit to the relat oper , return , well , of cours , logic valu also .
so thi is an arrai of logic valu .
it's a logic arrai .
we can also creat a logic arrai us a built in function .
can you guess what it name is ?
well thi ought to give you a clue .
no , the name isn't holm .
the name is logic .
and it take each on of these input in thi vector .
and it look at everi element in thi vector .
and everi element that is non zero is turn into true as a on and the zero becom logic zero .
all of these ar of the type logic .
a veri nice featur of matlab is that let you index into an arrai us a logic arrai of the same size .
let's gin up a row vector with <num> element , call a .
easi .
now we ar go to index into a , us the logic vector of the same size .
name c .
so what doe a , so what doe a left parenthesi c right parenthesi mean ?
well , to matlab , it mean that it should select those and onli those element of a where c ha logic valu true .
so it did that , and the result is a two element vector consist of the first and third element of a .
when an arrai of logic valu , instead of ordinari number , is put in parenthes after the name of an arrai , thi is alwai the wai it work .
the output is an arrai of valu locat at the posit where the logic valu ar true .
the output arrai is usual smaller than the input arrai , as it wa here .
it's call logic index .
here the first and third element of the vector c were true .
first and third here .
the second wa fals .
so in thi case , matlab return a two element row vector consist of the first and third element of a .
let's put holm to work on anoth case .
we got a random set of integ in r .
and as usual i have initi the pseudo random number gener to make it easier for you to reproduc what i'm do .
i'll do that everi time .
let's look at holm again , there .
two on , two zero , two on .
and now , let's do thi .
as you can see the on pick up the <num> here , the <num> here , the <num> , and the <num> .
and the zero caus the <num> and the <num> to be omit .
so the output is <num> , <num> , <num> , <num> .
thi sort of index can be quit a mysteri at first , but onc you see what holm is actual do here , it's not hard to understand at all .
in fact , you might sai it's elementari .
and now we're readi to us logic index to do someth us .
suppos we've measur ten voltag and save them in a vector v .
furthermor , suppos we know that if our measur process were perfect , there wouldn't be ani neg number .
so we want to remov these two neg valu here , minu <num> and minu <num> .
well we could of cours just remov them by hand from thi littl vector .
but suppos that thi is a realli long vector , mayb thousand of element .
so we need a code that will do it automat .
well , we can do it thi wai .
first , we make a logic vector like thi .
let's look at thi statement carefulli .
we know thi is an assign statement becaus of thi equal here .
on the left is the variabl keeper , on the right is the express we're go to evalu , and then assign the result to keeper .
well , that's v greater than or equal to <num> .
well , the greater than or equal , i call the relat oper , is an arrai oper .
so the zero is compar to everi element , in turn , of v .
and we get that the first on and the second on ar greater or equal to zero , but the third on , as you can see , minu <num> here , is not .
the fourth , fifth , sixth , seventh , we get to the eighth , that's the minu <num> .
it's not .
and the other two ar , so we've got all these on and zero repres the truth and fals of the assert that v is greater than or equal to <num> , which mean each element of v is assert to be greater than or equal to <num> .
now we can us keeper to do logic index on v like thi .
we're go to set the result into w .
these two zero , in other word , fals , caus the correspond element in v , the minu <num> and the minu <num> , to be omit , and then thi shorter vector is assign to w .
we did all thi with just two command .
that's pretti good .
but on command would be better .
on line , on command , same result .
it ha to be the same result becaus we're do exactli the same logic index .
we just avoid the step of store the logic arrai produc by the express greater than or equal to <num> in keeper .
and we us it directli in the logic index here .
you should recogn thi command , by the wai , becaus it's the same command that i show you on the slide that replac eight line of for loop code .
thi version is a lot easier to program than the for loop version , and it run faster .
ten to <num> time faster .
we'll show you how to time code in just a littl bit .
in thi speedi littl command , we us the vector v in relat express here to construct a logic arrai that we us to index into the same vector , v .
but the logic arrai doesn't have to be deriv from the arrai index .
for exampl , suppos that when the voltag in v were measur , there wa a detector run that measur a confid valu for each measur , and the valu rang , sai , from <num> down to zero .
like thi .
we can us thi vector to discard valu in the vector v for which we have low confid .
let's sai we want to keep onli the valu in v for which the measur confid wa at least <num> .
we can do that with thi command .
so what happen here , confid wa compar with <num> .
thi is an arrai oper , so each element of confid is check to see if it's greater than or equal to <num> .
and if it is , we get true , otherwis , we get fals .
so we get true , true , true , true , true , true , fals , fals , and then a true .
well that's us to index into v .
everywher there's a true , we get someth out of v , when there's a fals , well , it's omit .
and let's see what v look like , here's v .
so that's go to be true , true , true all the wai till we get to these next to the last element , these two here .
and thei ar omit , as you can see between the <num> and the <num> , those element ar gone .
if we want to keep , sai , the on with a confid of <num> or more , like thi , then fewer element in v surviv .
so now you know how to us logic index to omit element that ar smaller than some threshold valu .
now , of cours , you could omit them if thei were larger than the threshold , or if thei were equal to some bad valu , et cetera .
but there's anoth wai to select element to omit .
let's look at thi exampl .
there , we have anoth ten element row vector call v0 .
now look at thi statement .
here we're us v and v0 in thi relat oper here , to compar each element of v with the correspond valu in v0 .
we can think of v0 as a whole vector of threshold valu , on for each element in v .
and we'll get true onli if v's element is greater than v0's for each element .
sinc we're us the result logic vector to index into v here , we get rid of each element in v that's not greater than it particular threshold .
so if we look all the wai back up here at v , first element of v , <num> , is greater than the first element in thi threshold vector , so it get kept .
the next element , <num> , is not greater than the threshold <num> , so it disappear .
the minu <num> , now , it's bigger than minu <num> , so it show up , and so on .
okai , we've kill off a lot of element with logic index , but it's import to point out that the vector that we've been index into ha not chang .
the omiss take place when the express on the right of the equal sign is evalu .
so up here for exampl , v confid greater than or equal to <num> , that's evalu .
and we come up with some truth and fals .
and that's appli to v , and the express produc thi vector .
thi vector is then assign to v10 .
but v remain unchang .
well , there is anoth wai to us logic index that doe affect the vector be index into .
the effect is not to remov element though , but to chang their valu .
you do that by us logic index on the left side of the assign statement .
so suppos , for exampl , that you want to replac all the neg valu of v with zero .
first , let's remind ourselv what's in v .
there .
now let's replac all the neg valu with <num> .
that's these two , the minu <num> and the minu <num> .
we're go to replac those and here's how we do it .
sure enough , minu <num> is now <num> .
the minu <num> is a <num> , everyth els is untouch .
so here , v minu <num> produc a logic arrai again , with true valu onli where the valu of the element ar less than <num> .
and the mean of thi statement is that the valu on the right side , the <num> , is copi into those two element , and onli those two element .
notic that no element in v ar lost .
we still have a <num> element vector here , but some of their valu ar chang .
two of them , in thi case .
thi might be a help summari of what's go on with these two differ wai to us logic index .
logic index on the right , okai , over here , produc a subset of element .
logic index on the left chang the subset of element .
in thi case thei were chang to zero .
but you can also chang each on to a differ valu .
let's see how to do that .
start with the same v again .
now let's assign <num> to the first neg element , and <num> to the second on , us logic index .
when you have a vector of two or more valu on the right , as in thi exampl , the link to the vector ha s to equal number of valu that will be pick out on the left , which is two .
and so what happen , thi element wa neg , and thi element wa neg , so thei were pick out for assign .
and the first valu here wa assign the first on , so the minu <num> becam <num> , and the second valu wa assign to the second on .
so the minu <num> becam <num> .
and now , let's do both left and right logic index in on command .
first , let's get that origin v back again .
there it is .
now let's suppos you need to add <num> to each neg element for some reason .
i don't know why .
here's how you do that with logic index .
so what's happen here ?
well first , the v index with v less than <num> here , on the right side , produc a two element vector contain onli the valu minu <num> and minu <num> .
second , <num> is ad to that vector to get the two element vector contain a <num> and a <num> .
third , on the left side of the equal sign , logic index pick out onli the two element of v that have neg valu , which happen to be the same element that we look at over here on the right .
the minu <num> and the minu <num> .
the minu <num> is at posit on , two , three .
the minu <num> is posit ten , nine , eight .
three and eight , element three and eight .
and fourth , it assign the first valu that it got over here , which wa <num> , to element three , the first on that wa less then zero .
and the second element that i got over here , which wa a <num> , to the next element that wa less then zero , which wa element eight minu three .
and so now it's <num> .
none of the other valu were touch .
and that's how you us logic arrai on the left and right in the same command .
so far , we keep sai logic arrai , but we keep us onli logic vector vector .
matric and higher dimension arrai work fine with logic index , but there's a big surpris come .
let's clear the screen and get readi for it .
we'll start by make a two by three arrai and now we'll us logic index to set a variabl b equal to a but keep onli the element of a that ar greater than <num> .
befor i hit return , i'll point out that thi is just a normal right side logic index that we've seen befor .
a greater than two will return true at everi element that's greater than two so , it'll return true here , here , here , here and it'll return fals for element on and two here on the first row .
that logic arrai of true and fals is then index into a and it'll caus the on and the two to be omit , and the three and the four and the five and six will come on through .
so , let's hit return and see what happen .
surpris !
what happen to our nice , two by three arrai ?
and where'd thi column vector come from ?
well , rememb wai back at the begin at lesson two , what we'd first said about arrai ?
no ?
well i guess i'm not surpris that wa a long time ago .
okai , now i'll sai it again .
we said that an arrai is just a set of number arrang in a rectangular pattern .
and that each row ha to have the same number of element as all the other row .
you know , like thi .
well if we were to simpli omit on and two on row on , and leav the rest of it the same .
thi row would just have thi on element three .
row two would still have three element .
and three would be hang out wai over here on the right .
it look someth like thi .
i'm not sure what you'd call that .
it's sure not an arrai .
well , what matlab doe is give up on keep a <num> x <num> shape that a ha , it just make a column vector by stack up the column of a , column on on top and column two and column three befor it doe it logic index .
well , let's see what that vector look like first by us the singl colon as an index .
do you rememb that ?
we show how to do that in lesson three .
so , a look like thi , and the column version look like thi .
there we've us that singl colon to index into a and that give us the column version of a .
you can see that it start with the first column and then the second column , and final , the third column .
thi is call column major order and that's why we gave it that name .
now that it's convert a to a column vector , in column major order , matlab appli the logic index to the column vector .
like thi .
and there's the result , just the same as what we got directli up here .
thi is a strict rule .
when you us logic index to an arrai on the right side of an assign , then if the arrai is not a simpl vector , it will alwai be convert to a column vector in column major order .
and by strict i mean , well , strict , no except .
here not on singl element of valu wa omit by the logic index on the right here .
thei're all here .
so there's not on singl reason to chang it's shape .
yet it's shape wa chang to a column vector .
rule ar rule .
thi is logic index .
a is not a vector , so the result ar column vector in column major order .
case dismiss .
in matlab's court there ar no appeal .
but wait if you us logic index on the left side of an assign , none of thi column vector busi happen .
logic index on the left of an equal sign just chang the valu , if you'll rememb .
it doesn't omit ani element , so the problem of keep the arrai rectangular never even come up .
so there's never realli ani need to convert the arrai to a column vector and the arrai just keep it's same dimens .
for exampl here's how to set all fo the neg element of a <num> x <num> arrai to zero .
i've us the random normal function here , which give number distribut around zero , both posit and neg .
now let's get rid of those neg number , replac them with zero .
the eight neg valu have been replac by zero .
and a is still a five by five arrai .
and it can keep it same dimens , becaus no element ar emit by index on the left .
and you can replac these eight valu with eight differ valu , like thi , for exampl .
what matlab doe is take the eight valu on the right , the <num> through <num> , and assign them to the eight element that were singl out by the logic index on the left .
an import featur is reveal here .
logic index on the left assign these valu to the element that were singl out in column major order .
so it scan the first column up here , look for a neg number .
it find on here on the third row , and it assign the first valu from the right , which wa <num> .
so thi becom <num> .
it continu look on that column for neg number , doesn't find ani .
sinc it's do column major order , it goe to the next column , find on right up here at the top .
it give it the next valu from the list on the right , which is <num> .
you see that show up .
then it find anoth on immedi , give that <num> .
find noth more on thi column , goe to the next column and so on .
until it's replac all eight neg valu with all eight valu from the right and it's done right here .
it doesn't make ani differ what the shape is , the arrai of valu on the right , so long as there ar eight of them .
it could be a two by four arrai .
or an eight by on column vector .
it work the same .
in fact , let's do the column vector version .
i'm tire of look at a so i us a semicolon to suppress print thi time .
a singl quot up here , transpos the row vector <num> to <num> to a column vector , but the result is exactli the same , as you can see by compar here .
but it make a big differ if the number of element on the right is differ from the number of element found by logic index on the left .
that's just a non starter .
but if you get the number to match up , the assign work , the number ar assign in column major order , and a retain it shape .
so we've seen that matlab convert a non vector to a column vector and logic index happen on the right of the equal sign .
and it leav the shape the same , and logic index happen on the left .
wait .
we saw a few minut ago that you can have logic index on both side in the same command .
what happen then ?
you can't have it both wai .
look like matlab ha final paint itself into a corner .
let's look at an exampl .
suppos our task now is to find the element in a that ar greater than <num> and replac each on of them with it squar root .
first we'll get a back .
okai , here goe .
so we've got logic index on the left , which mean a retain it shape , and we got logic index on the right , which mean a is chang into a column vector .
let's hit return and see if smoke come out of thi comput .
ha .
rule ar rule , huh ?
well matlab , how do you explain thi on ?
we've got logic index on the right , but the shape of a stai the same .
well , as much as we might want to catch matlab in a contradict , we haven't .
it appli logic index on the right to omit all the element of a that aren't greater than <num> , which leav <num> element .
and it put those <num> element into a column vector and column major order .
we don't see it anywher , but that's what's happen .
it us that column vector as input to the squar root function , which return a column vector of <num> squar root .
then over here on the left , it us the same logic index that we us on the right and identifi the same set of <num> element as need to get new valu .
and then final , it assign those <num> valu in the same column major order that had gener them over here .
it all work perfectli .
matlab win again .
if you didn't know what's go on here , thi command would be veri cryptic , but a matlab programm , like you , know what's happen .
and it's all self consist and logic .
it is logic index , after all .
if you were us c or java , on the other hand , you'd have to write two nest for loop with an if statement in the bodi to get thi thing accomplish .
you can do that in matlab too , of cours .
come to think of it , as an exampl you should implement the same thing without logic index .
well , we're done with our introduct to logic arrai except for on quick exampl .
it's an exampl of multipl arrai all logic index in the same statement , just to show you that it work .
there , we've got an arrai a and b , thei're both the same size .
here each element in a that's larger than the correspond element in b , so <num> , for exampl , is larger than <num> , is replac by the differ between the two element .
so <num> minu <num> show up here .
<num> doesn't chang , becaus it's not greater than the correspond element in b .
it's still <num> .
if you spend a minut or two analyz it , you'll see that the rule is appli , that the same number of element is produc on the right and consum on the left .
well , with thi exampl we sai goodby to logic index .
but don't forget it whenev you need to remov or chang select element in arrai .
logic index is a power matlab featur that can save you from write mani loop .
us it wherev you can .
okai .
i promis to tell you how to time a function .
it's veri easi with matlab .
you time a function with the help of two other function call tick and tock .
the name ar suppos to sound like a clock tick , you know , tick , tock .
tell you what , go rent an old horror movi , thei have lot of tick tock clock in them .
anywai , tick and tock work more like a stopwatch than a clock .
tick start the stopwatch , tock stop it .
well , let's time someth .
let's time sum , ad up the first thousand posit number .
well , i thought it would never get done .
that took , what ?
a littl over <num> , 000th of a second .
let's give it more work .
there , a million number .
that took a whole 100th of a second .
okai .
time to realli put it to work .
let's give it <num> million number .
on second .
these comput ar pretti fast .
but let's run thi much slower function instead .
it's on that i've got over here call noprealloc .
we'll find out what that strang name mean in a minut .
and let's put thi command window right underneath the editor down here .
and i'll bring it up a littl closer .
and now that i've got thing arrang to my like let's have a look at thi function .
what it doe is us explicit loop in these nest for loop to comput a good old fashion multipl tabl and put it in a .
we ar go to calcul <num> million of these number becaus we got n equal <num> , <num> .
so <num> , <num> time <num> , <num> , that's <num> million .
so we better get go .
well okai , yeah thi is take a long time , so sorri about that it's kind of bore .
tell you what , mayb thi is a good time for a joke .
all right , did you hear about the gui thei ask how he felt about death ?
he sai , you know , i'm not realli afraid of dy , i just want to die peacefulli in my sleep like my grandfath instead of scream in terror like hi passeng okai , as the laughter di down , the function still seem to be work awai .
here's on of these time where you start wonder .
okai .
<num> . <num> second , that's a pretti long time .
but you know , we did a lot of work there .
<num> million calcul .
yeah we did a lot of work here , but on a modern comput , <num> million calcul should go a lot faster than that .
here's a faster version of the same function , call prealloc .
with just a singl extra line ad right here .
here , we creat a matrix , a , by call the function zero and made it a <num> , <num> by <num> , <num> matrix .
how can thi help ?
we're still go to do the same <num> million calcul , and then all those zero ar go to be written over .
it seem like we're wast time and we're go to make an alreadi long function take even longer .
and i don't have anoth joke readi .
let's get comfort and start it run .
wow .
that's a littl better .
<num> . <num> second .
that's how mani time faster ?
let's calcul that .
<num> time faster !
how can thi be ?
well , in the no prealloc version , matlab had no idea how larg the matrix a is eventu go to becom .
so everi time we ad a new row , it had to find anoth place in the memori and copi the entir content of the current arrai into the new locat befor it could add the next element .
find a place in memori and reserv it for a variabl is call memori alloc .
and it had to do memori alloc over and over and over .
while memori alloc is usual a minor part of the time requir for a program to run , if we have to do it thousand of time it can take a notic amount of extra time .
that is bad new .
but the good new is that most of the time thi extra time is complet unnecessari .
in thi exampl , we knew befor the loop start , how larg the matrix a need to be .
so in the second version , the initi a to the right size befor start to comput it element .
that avoid all the time matlab spent on memori alloc , realloc , us the first version .
alloc memori befor you need it is call prealloc .
kind of an obviou name , i guess .
the wai you do it is call a function .
we us the function zero , whose argument tell it the dimens of the arrai to alloc .
it'll alloc the space and put zero into everi element .
there's anoth function like it name on .
let's just sai i won't insult your intellig by tell you what that function doe .
but at the risk of a tini insult , i'll give you thi advic .
prealloc everi time you us a larg arrai whose dimens you know .
and guess what , matlab give you that same advis .
it's easi to miss .
let's look back at thi noprealloc function .
the advic is right there .
if you look veri close you'll see a littl sq , red squiggl right here under thi a .
and if you hover the mous over the a , you'll see a littl hint pop up .
first the on sai the valu assign to variabl a might be unus .
okai .
the second on sai the variabl a appear to chang size on everi loop iter .
consid prealloc for speed .
the textbook ha more detail explan about why thi version without pre alloc is so much slower than the other version .
and it give you a simpl trick for speed thing up when you can't pre alloc by simpli chang the order in which you nest your loop .
well , that's about it for lesson six , but we'll leav you with thi part thought .
loop , whether thei're for loop or while loop , and whether thei're explicit loop or implicit loop ar the program construct that let us exploit the amaz power of comput hardwar .
power that hardwar is measur in billion or trillion of memori cell , and billion or trillion of instruct per second .
without loop in the softwar direct the circuit in the hardwar to iter repeatedli through the paltri few command that we human can type into it , these big impress number would mean noth .
the amaz thing that comput do like search through <num> trillion web page , answer spoken question in multipl languag , pull your car out of a skid on a slick road , land a rocket on mar , call the on phone you want out of <num> billion or even just plai thi lesson for you .
would just not e possibl without loop .
well , to be more precis , it might be possibl .
but onli if you had a few billion year to get them done .
if you don't want to wait that long , iter's the onli wai to go .
it's simpl .
if you look into everi world chang effect that comput have had in the last half centuri you'll find a loop down there , somewher insid , drive it .
hi , and welcom to lesson seven , data type .
matlab provid mani wai of store number and variabl , oper on them and print them .
we've seen lot of exampl of number be store , oper on and print .
and these exampl suggest that these number ar equival to the real number of mathemat .
that's not the case .
in mathemat , real number can be infinit larg , and thei have infinit fine resolut , mean that the differ between two differ number can be infinit small .
on the other hand comput have a finit amount of memori .
so there must be a limit on how larg a number repres in the memori can be .
and there is .
also there's a limit on how small the absolut valu of a non zero number can be .
and if you think about it , the finit of the memori mean that a matlab variabl can't store an irrat number .
so for exampl , the function pi  return not pi  , but onli approxim of pi  .
and the squar root function can return onli an approxim of the squar root of two .
most import thing to learn here is that the number of valu that can be repres by a variabl in matlab is finit .
and by the wai that is true for ani comput languag .
thi mai seem like a pretti signific limit , but for the vast major of problem that we want to solv on the comput , the set of number that can be repres by a variabl is more than adequ , by far .
the subject of thi lesson is data type .
and data type can help handl thi limit .
matlab support mani differ data type .
and thei provid great flexibl in deal with numer and non numer data .
a data type is sometim call simpli a type .
it is defin by a set of valu , and a set of oper that can be perform on those valu .
as we've seen , matlab allow a given function to be call with differ data type .
there's a strict rule .
all element of a given arrai must be of the same type .
it's the arrai's elementari data type .
in fact the type of a matlab arrai is given by it number of dimens , it's size in each dimens and it's elementari data type .
well , let's plai with data type in matlab .
let's start by clear the workspac .
and let's creat a new variabl .
of cours you do that by assign a valu to it .
so we got thi variabl x , let's find out what it data type is .
we do that with a function call class .
and it tell us that x is a type doubl .
that's the default data type for all numer data in matlab .
and that's not just for variabl .
it's for valu too .
for exampl , we just give it a valu without assign it to a variabl .
matlab will still treat it as a doubl .
by the wai , why is the function call class instead of type , sinc we're check the type ?
well , matlab reserv the name type for a command that print out the content of a file , as in type the file .
let's get a littl tricki here .
of cours , you know that the squar root of minu on is an imaginari number , so you might expect the class to sai someth about that but no , it just call it a doubl .
matlab support complex number but it doesn't distinguish among real , imaginari and complex number when it classifi them into type .
let's make some more variabl .
now let's look at a new function that give us even more inform about them .
it's call who .
first of all , who print out a list of the exist variabl in the current workspac .
simpl .
as you can see , x , y and z all have doubl over here in the class column .
as you'd expect .
over here the size column show the arrai dimens .
x is a on by on .
sinc all scaler ar treat as on by on arrai in matlab .
y is on by eight , as ani well behav eight element row vector should be .
and z is a three by four matrix .
you mai find the datatyp for and surpris here .
char , well how did that happen ?
what's the valu of and anywai , let's see .
hm .
doubl .
well is and a doubl ?
no , rememb thi is the valu of and we're see here .
and that valu is a string whose charact ar d o u b l e .
and , how did the valu of and get to be a string ?
well , it happen back here at thi command class squar root of minu on .
that wa the last command we issu in which we didn't assign the output to a variabl .
the class command return the data type of the output of the squar root .
and that happen to be a doubl .
and return that inform as a string .
sinc we didn't assign thi string produc by the command class to a variabl , matlab assign it to and .
of cours , when we enter a string as , for exampl , when we type the format string of an fprintf statement , we have to put it in quot to let matlab know that it's not the name of a variabl .
when matlab print a string , it doesn't put it in quot .
as we'll see in a minut , a string is just a row vector of valu whose type is char .
by the wai , i pronounc c h a r char .
but char is also an equal accept pronunci , sinc it's short for charact .
when speak of put string in quot , let's look at the type of a string that we enter .
there you go .
a char again , as expect .
so how mani type have we seen so far ?
we got the doubl and the char here , but we talk a great length about on other type .
that's right , logic .
you know the kind of valu that can onli be true or fals .
so we've see the doubl , the char , and logic .
now let's learn more about these type , and introduc some new data type too .
as we've seen , the default data type in matlab is the doubl .
that type us float point represent .
and what's that ?
well you can think of float point represent as be like the scientif notat that we talk about befor .
for exampl , to repres the number <num> . <num> , we can us the fact that <num> . <num> is equal to <num> , <num> time <num> rais to the minu <num> power .
so we can store two integ , <num> , <num> and minu <num> , to repres the non integ <num> . <num> .
in float point represent , the <num> , <num> part is call the mantissa and the minu two part is call the expon .
matlab us thi float point represent for all doubl and it us eight byte of memori for each on of them .
sinc there ar eight bit in each byte , we sai that the doubl is a <num> bit number .
the singl is the onli other float point type support by matlab .
the differ between the singl and the doubl is the length .
the singl ha onli <num> bit .
by the wai , that's where the name doubl come from .
it occupi doubl the space as the singl .
that extra space allow for more digit , and so you'll sometim hear it call doubl precis .
what if we know that we need onli integ .
for exampl , sensor valu that ar read in the comput ar typic integ .
and in imag process the color valu of pixel ar alwai integ .
well matlab support a number of differ integ data type .
in fact , there ar eight of them .
there ar four sign , and four unsign type .
what doe that mean , you ask ?
well , if you don't need neg number , you should us unsign data type , becaus thei repres onli non neg integ , zero and higher .
but if you do need neg number , or both neg and non neg number , then you need on of the sign type .
the other import attribut of integ data type is length .
there ar <num> , <num> , <num> and <num> bit variant of integ type , both sign and unsign .
and thei differ in the rang of number thei can repres , with more bit give a wider rang .
thi tabl show all of matlab's numer type and the rang that thei span .
for exampl int8 which is an eight bit integ , can cover the rang between minu <num> and plu <num> .
well , why not plu <num> , you ask ?
well , the number of differ valu that eight bit can form is <num> to the 8th power , which equal <num> .
so , it can onli hold <num> valu , and we need to account for <num> , too .
the unsign version , on the other hand , span the integ from <num> all the wai to <num> .
the tabl also show the rang of the other integ data type .
as you can see , a <num> bit integ can store truli astronom number , so it's veri rare that ani programm need integ that ar larger than int64 provid .
at the bottom of the tabl , you can see the rang for the float point data type , too .
and the doubl rang is unimagin larg .
but the singl and doubl can each hold valu outsid their rang , too .
there ar two of these out of rang valu .
the first is i n f , or inf , for infin .
inf most commonli come up when we accident divid a nonzero number by zero , but it signifi the result of ani express that give a number greater than the largest valu that can fit in a doubl .
you can guess what minu inf mean .
the second out of rang valu that a singl and doubl can have is in n a n or nan , for not a number .
nan signifi the result of an express that give an invalid valu , for exampl <num> divid by <num> .
so that's a look at the rang for these type , now let's look at some function that deal with them .
here ar a coupl of us built in function for check datatyp .
we've seen the class function befor , it return the name of it argument type .
the isa function is new , it return true or fals depend on whether the first argument ha the data type whose name is given in the second argument .
the intmax and intmin function give the maximum and the minimum of the integ type .
and realmax and realmin do the same thing for the float point type .
we'll try them out in a minut .
in addit to the function for check type , there's a set of function that do convers among them .
the need to convert a valu from on data type to anoth come up from time to time and there ar built in function whose name ar the same as the desir type to be produc by the convers .
we'll see these function in action in just a bit .
of cours , what we do most often with valu in matlab is arithmet , and there ar rule for arithmet that depend on type .
first , all arithmet oper have no problem accept two operand of the same type , and the result is alwai a valu of that type .
the matlab also allow some mix of data type in arithmet express .
it's call mix mode arithmet , and there ar mani rule and restrict on what's allow and on the type of the result .
these rule can be a bit complic and somewhat cumbersom , so we'll skip them here .
but if you need to work with mix mode arithmet in your program , the textbook explain the rule in detail .
and final , some good new .
relat oper work with ani mixtur of numer data type just fine .
and not surprisingli , the result alwai ha the same type , logic .
now , let's plai with numer type in matlab some more .
first , let's just creat a few numer variabl with type other than doubl .
a wai to do that is to us the built in function with the name of the given data type that we need .
for exampl , we just convert the doubl <num> . <num> into a singl and put it in x .
and we just convert the doubl minu <num> into an int8 and put that in n .
and we put a u int16 into m .
let's see what we've got here .
there's our three variabl , there's their three type , and their size ar all on by on becaus thei're all scaler .
that work smoothli .
but what if we try to assign a number that doesn't fit in the given type .
let's look at some exampl of that .
what's happen here as you can probabl see is that the convers function is produc the number that's closest to the input valu that can be repres in the given data type .
here we're deal with the uint8 data type , and it can hold the integ from <num> to <num> .
so <num> doesn't fit .
it's bigger than <num> , but <num> is the biggest number so it's as close to <num> as you can get .
<num> is just a hair too big , so we get <num> again .
here's minu <num> , well an unsign int can't hold a neg number , so we get <num> .
so what's happen here exactli is , we start with thi minu <num> , which is a doubl .
sinc ani number you just type in the matlab is a doubl by default .
it's pass as input to uint8 .
uint8 then convert that minu <num> to the nearest <num> bit integ possibl which happen to be <num> .
the function then return that valu as a u int <num> type , so we've got a u int <num> zero come out of u int <num> .
then matlab assign that valu to k , so k now ha the u int <num> data type and it valu is zero .
so let's look at k .
it's zero , let's look at it type .
u int <num> .
thi chang of an out of rang valu to the valu at the closest end of the rang is sometim call clip , becaus the oper clip off the excess of the valu so it'll just fit into that rang .
here <num> wa clip to <num> , and minu on wa clip to zero .
matlab's assumpt here is that you know what you're do .
you explicitli ask it to convert a big number to a type that it can't hold or a neg number to a type that can onli hold posit number .
so rather than throw an ugli red error messag at you and stop your program in it track , it silent clip the big number down to size or the neg number up to a zero .
so in thi case , now , k is equal to zero , and it's type is u int <num> .
but you have to be care here .
look what happen if we decid to increas k to some other valu that fit insid the rang of it type , you know , u int <num> .
sai two .
okai it's now two and let's just check it type .
well it type is now doubl .
the moment we assign <num> to k , it data type chang .
the number <num> is a doubl by default , so when we assign it to k , k ceas to exist as a u int <num> .
becam a doubl .
it's realli quit logic .
if we now assign it a string , sai , you wouldn't expect k to remain a doubl , would you ?
and you'd be right .
k didn't remain a doubl .
it becam a char .
thi illustr a rule in matlab .
when a variabl is assign a valu and new type , the variabl take on the new type .
mani other languag work differ .
a variabl is declar to be of a given type .
and it keep that type .
and if you were to assign a valu of type char to k after it's been declar to be a doubl , then either an error would occur or an invis convers would take place right there on the spot dure the assign statement from doubl to char , with the same sort of clip happen .
on approach is differ from the other .
not better , just differ .
thei each have their pro and con , but onc you know what the rule ar it's all quit logic .
bore , but logic .
and to keep with thi theme , you know the bore theme , i'll show you how you can check the rang of the type you want to us so you'll know when clip is go to happen .
there ar four built in function that we can us to do that , and here's some exampl of them in action .
let me clear thi screen first .
bet you wish you could type that fast .
we saw these same valu in that tabl a littl earlier of cours .
it's pretti straightforward stuff .
but it can be import when you're work with veri larg arrai of number whose rang is small becaus of the applic such as imag process for exampl .
thei don't have room to store <num> bit doubl , so mayb you'll want to us eight bit or <num> bit or <num> bit integ .
then thi stuff won't be bore anymor .
wait , who am i kid ?
thi stuff will alwai be bore , but at least it'll be us .
text is anoth import kind of data that comput program need to manipul , and in comput program , we call ani segment of text a string .
we've us string befor .
for exampl , the format string of the built in function fprintf is , as it name impli , a string .
and we've just us the intmax function , where the argument wa the name of the data type that we're interest in , and that's a string .
so , what is a string in matlab realli ?
well , it's a vector of charact .
in other word , it's a vector whose elementari type is char .
we saw thi when we us the class function earlier in thi lesson , so it shouldn't come as a surpris .
what will be surpris though , is that char is a numer data type .
a char is actual a number , and behind the scene , there's an encod , decod scheme that specifi what number repres what charact .
the oldest such charact encod scheme is call a s c i i , pronounc ascii .
ascii stand for american standard code for inform interchang , and it wa develop in the 1960s .
an ascii charact code is seven bit long , so it can encod a set of <num> charact .
as you can see in the tabl , the ascii set includ the latin alphabet , the digit zero to nine , punctuat mark and some special charact .
for exampl , <num> is the dollar sign while <num> is the lowercas a .
of the special charact , we care about the new line charact abbrevi nl , and have the code <num> in the space mark sp and encod is <num> .
<num> charact seem like plenti in america in the 1960s , but nowadai , well , we need more .
just think of all the charact in all the world's languag , and most importantli , all the emoji that we just can't live without .
so , over the year , mani other scheme with far more charact have been develop .
the good new is that littl old ascii is a subset of pretti much all of them .
let's dig a littl deeper into thi subset .
here's a function that print out all the visibl charact in the ascii tabl .
it us a for loop with a loop index that start at <num> and end at <num> .
<num> is the encod valu of the first visibl charact in the ascii tabl , which happen to be the exclam mark , and <num> is the valu of the last visibl charact , which is the tild .
insid the loop , on charact is print at a time us fprintf with a s format string .
you mai rememb that s expect a string .
so , the second argument of fprintf is the valu of the loop index convert to a charact by the char convers function .
after the loop , we print a new line as usual , and that's all there is to it .
okai , let's see how thi thing work .
i got it right over here in a temp file .
and there it is in the editor .
i'll just run it .
and it work as advertis .
here at the begin , is the exclam point that we get from ascii code <num> .
and over here at the end , is the tild , whose code is <num> .
with all the other printabl charact arrai here in between .
as it turn out , we can make it even simpler .
as i said , the s in the format string of the fprintf function tell the function to expect a string argument .
more exactli , what it tell the function , is that whatev argument it get , should be convert into a char .
so , we don't need to us the convers function char here .
we can simpli us ii .
and the s will treat it as if it were a char .
let's try that .
same result .
and , if we want to look like a wizard , we can even chang the last line like thi .
which sai to fprintf , print the number <num> as if it were a string .
<num> happen to be the code for the new line charact .
so , if we tell fprintf to expect a string and then give it the number <num> , it will convert to a char with the valu <num> , which is just a new line charact .
and we get the same result again .
thi time , we're magic get charact out of noth but number up here .
well , what doe charact mean , exactli ?
well , these so call charact that we're look at here , on that ar be print to the screen , ar actual just arrang of tini black , white , and grai pixel that look to our ey like familiar symbol , whose mean we know .
let me turn on my magnifi here , show you what's realli there .
there .
see those littl grei pixel , and white pixel , and black pixel , and so on , look like a <num> .
thei look like a <num> , a <num> , a <num> , and so on .
well , here's a d , an e , et cetera .
so , we give matlab a number , tell it to treat it as a charact , and it produc a pixel pattern that symbol someth to us .
okai , we peek behind the curtain and found that there's no wizardri and string at all , just ordinari number , a convers tabl , and some pixel .
the rest of it's all in our head .
let's plai some more with string .
thi wa plan b if the titl comput program with matlab didn't work out .
now , i'm go to treat thi string just like a vector , just to prove there realli is on .
there , you can check it length , like up here you can index into it .
here's a number on index .
you can us a colon oper to give it multipl nd's and us the end and so on , just like you can with ani vector .
those ar advantag , but there ar disadvantag too .
becaus thei're vector , compar two string is not as easi as compar two scaler .
so let's see .
you cannot just compar two arrai with the doubl equal oper , if thei don't happen to have exactli the same size .
it violat the rule of arrai oper .
and even when our two string ar the same length , the result of the comparison is probabl not what we want .
let's illustr that with the word matlab , which we'll pluck out of thi titl again .
hm .
you ever ask yourself what matlab spell backward is ?
it's baltam .
as in , that stupid bug show up out of the blue , it wa just total baltam .
anywai , matlab and baltam ar the same length so we can us them as operand for the doubl equal oper .
so let's try it out .
we get a vector of logic , which is what you get for ani element wise comparison of vector , with a relat oper .
instead of the answer we want like , you know , these string ar not the same , we get on answer for each pair of char in these two string .
and sinc , as it happen , onli the a's match up , the second and the fifth element ar the onli true valu in the result vector , the rest of them ar fals .
in a minut i'll show you a help function for compar string , it'll give us the answer we want .
but for now i'm go to show you how to have some fun in convert char to doubl .
okai .
we start with a string , we convert it to a doubl , and our code is just a vector of doubl .
let tweak the valu in code , just a littl bit , and then the code back to a char .
so we're ad three to everi element of code , then we convert it from a doubl to a char , and we put the result in secret and see what it look like .
will you look at that ?
we've encrypt our messag , we can send thi to our friend now .
even if it's intercept by the teacher , he won't have ani idea what it sai .
but our friend is a matlab programm too , so she can decod the messag easili .
here's how she'd do it .
all she ha to do is know the secret tweak , which wa to add three .
and she just undo that by subtract three .
told you it wa go to be fun .
we found anoth advantag of the fact that a string is a vector .
we can send secret messag .
and on the subject of the string be a vector , a vector in matlab is just a on dimension arrai , so we've , in fact , got an arrai of char here .
so , can we have a two dimension arrai of char ?
ye , of cours .
bill is an arrai .
well it's a on dimension arrai , so it's a vector , and it's the first row .
mari is the vector of the second row , john's the third row , and so there's our arrai .
it's a two dimension arrai of char .
let's try anoth on .
so that work great too .
so , so far we've got a three by four arrai , and now we've got thi two by eight arrai .
hm , let's do an arrai oper on thi arrai .
we'll do a transpos .
we're on a roll here .
let's get a littl more ambiti .
oh no , what just happen ?
what kind of an anim is a vertcat anywai ?
well , vertcat is a built in function , not a felin .
matlab us vertcat intern for vertic concaten the two vector we provid , into matrix , but it didn't work here .
can you guess why ?
you know , i can not hear your answer for some reason , but i'll give you the benefit of the doubt .
ye , that's right .
we were try to creat a matrix in which the two row , thi on and thi on , had differ length .
you'll see thi error messag quit often , becaus there ar lot of time when you'll accident try to give the row in arrai differ length .
to help you rememb what vertcat mean , it might be worth point out that vertcat is a contract of vertic caten .
becaus caten and concaten mean the same thing , just like inflamm and flammabl .
in thi case , matlab complain becaus the first line of the text had <num> charact , tiger , tiger burn bright , while the second , in the forest of the night , had onli <num> .
oop .
that's a big no no in matlab .
so you have to be veri care .
in fact , typic you shouldn't try to store string in matric , becaus thei ar rare of the same length .
we'll show you how to store string the right wai , and how to compar string the right wai too .
these task and other that deal with string requir a littl finess .
but fortun , matlab provid special function , and addit data type , that'll make it easier .
matlab provid a set of veri us built in function , to help us deal with string .
we'll recommend a few of the most us on , which can help us with five common task involv string .
first , search for a substr insid a string is made easi with the function name findstr , which mean find string .
second , come convers of a number to or from a string .
now that we've learn about string , we know that a doubl , with the valu <num> , is not the same as a string of charact <num> , <num> , <num> .
thei look the same , but thei're fundament differ .
on's a float point number , and the other's a vector of three char .
howev , you can convert by contort between them , us num2str , for number to string .
and str2num for string to number .
third , when we need to compar two string , we've seen that the doubl equal oper doe not realli do what we want .
well the strcmp function doe , and it's name , in fact , mean string compar .
fourth , it's often necessari to chang between upper and lowercas letter .
for that , we can us a function name lower , to convert a string to all lowercas , and upper to do the opposit .
fifth and final , sometim we need to print with fanci format into a string , instead of into the command window , or into a file .
for that , we have the sprintf function which mean string print format , it's often pronounc , print f .
it's a snap to learn , becaus the onli differ from fprintf is that sprintf put it result into it output argument .
okai , let's try these function out .
let's try search first .
so what doe the four mean ?
it's the index of the first letter of the first occurr , the sub string in the string .
okai , now let me try that in english .
we're look for lab , and we found it .
the first time we found it , in thi case , the onli time we encount it , is posit four in the string , on , two , three , four , charact four .
that's where the first charact of the string lab occur in the string matlab for smarti .
it's the first place , second argument , occur in the first argument .
rememb these string ar case sensit , let's try thi .
thi time we get the empti matrix .
matlab , in the titl up here , is in all cap , so there is no lowercas lab in thi string .
so there's no index to return thi time , that's why we get the empti arrai .
i'm sure you've heard it said that there's no i in team .
well , let's check .
yeah , that prove it , i is definit not in there .
so , no , i am , no , anywai , so far we've either not found the substr we were look for , or we'd found it onc .
let's do on more exampl in which we see what it look like when we find someth more than onc .
substr r , right here , show up in two place in mooc titl .
let's see , mooc titl wa matlab for smarti , and there's an r right here at the end of the word four , that's charact ten , and , there's an r in smarti , which is the fifteenth charact .
so , string find return the vector ten , fifteen .
okai , that's it for search string , now it's time to compar string again .
rememb the troubl we had befor when we tri to do that with a doubl equal oper ?
well , now we're better equip to tackl thi problem becaus we know about the string compar function , strcmp .
okai , let's review what happen here .
first of all , we remind ourselv what wa in mooc titl , matlab for smarti , then we defin thi variabl lang by set it equal to the string matlab , then we compar matlab for smarti with matlab .
well , matlab for smarti is not the same as matlab .
matlab is a substr of it , but thei ar not the same , so we get a zero , or fals , mean thei ar not the same .
next thing we did wa just take the first six charact in matlab for smarti right here , compar that with lang , now thei're the same .
so we get true or on .
couldn't be ani easier .
it return true or fals depend on whether the string in the two argument ar the same or not .
case sensit appli here , too , but if we don't care about that , we can us strcmpi , which stand for string compar ignor case .
let's try that .
well , we get true .
clearli , matlab is not the same string as the first six charact of matlab for smarti becaus thi isn't all cap , but thi littl i here , in strcmpi , mean ignor case .
ignor case , thei ar the same , so we get a on .
thi ignor case ha noth to do with anyth other than charact that ar letter , doesn't affect punctuat , doesn't affect digit .
by the wai , if you ever need to convert a string to lowercas or to uppercas , check out the built in function lower and upper .
let me emphas again , how differ string contain digit ar from number .
the onli differ here is i put quot around the three point on four on six down here , but that make thi a string .
these two variabl have valu that ar complet differ .
thi is a number , thi is a string .
we know that becaus we just type them in , but matlab doesn't put quot around the string here , so it is easi to confus these two sometim .
there is on subtl hint , number ar indent , string ar not .
let's see how differ thei ar .
first thei have differ dimens .
on by on , it's a scalar .
on by six , it's a row vector of six charact .
and speak of charact , thei have differ type .
and look what happen if you try to us them in arithmet .
no surpris there , four point on four on six is three point on four on six plu on .
look at thi .
what is thi ?
well , what's happen here is that we've done mix mode arithmet .
we've ad on valu , that's a char , to anoth valu , here the on , that's a doubl .
a bit earlier in thi lesson , we mention that the rule for mix mode arithmet , mix mode mean mix type of operand , ar complic enough that we're leav it to you to look them up in the textbook .
but i'll explain what happen here .
the rule for mix char and doubl is that befor the addit , the char is convert to a doubl .
so it's as if we did thi .
we get the same result .
we look at the term on the left convert to a doubl .
it all make sens .
the <num> becam a <num> and we ad on to it , a <num> to a <num> , and so on .
it's just arrai addit with a vector and a scalar .
it make sens , but it's not someth we want to do , unless we're encod secret messag again .
what we might want to do is convert the string three point on four on six wai up here to the number three point on four on six and then add on .
you'll sometim find , for a exampl , that your program must read a string of digit that a user type in , or that's in a file .
and then it ha to convert it to a number and do arithmet on it .
well by now you're probabl tire of me .
well i could probabl just stop right there , you ar probabl tire of me .
i'm tire of me , for good sake .
what i wa go to sai wa , tire of me pose a problem , just so i can have an excus to introduc just the perfect built in function to solv it .
okai .
but be that as it mai there is just the perfect built in function that'll solv thi problem .
it's call s t r the digit two num which mean string to number .
let me write it out here , and i'll give it pi  digit and convert it .
notic that it's indent over here , that's a littl hint that thi is actual not a string , but a number .
now let's prove it's a number by ad <num> to it .
there , <num> . <num> .
and you probabl won't be surpris to learn that you can go in the other direct , number to string .
and notic that thi is an indent , let try to add <num> to it , and there we go , it deja vu all over again .
okai , there's just on more string function that i want to show you .
rememb earlier when we were sai that there wa thi function sprintf , and it's a snap to learn , becaus how similar it is to fprintf and so on ?
no ?
well that's okai , all you need is on exampl and you've got it .
it's easi , don't worri .
let's see , it'll get a variabl r12 and we want to us fprintf first , to print someth to the command window involv r , here it goe .
okai , that's straightforward .
we've got thi format string here , with the format specifi , escap , symbol , and so on .
and the first argument , r , is print . 2f , two decim place .
then pi  r <num> , print the same wai .
and we put a littl exclam point there and that's it .
now i'm go to repeat thi command by us the up arrow kei on my keyboard , but i'm go to come over here and chang on charact .
i'm go to chang thi f to an s , and see what happen .
okai ?
here we go .
noth .
thi is sprintf .
everyth is the same , everyth you've learn about fprintf is the same , but where'd the output go ?
well instead of print to the screen , sprintf put the text into an output argument .
we didn't see anyth , becaus we put the semicolon here .
let's give it an output argument that it can stick thing into , i'm go to hit the up arrow kei again , and come over here .
and i'm go to give it an output argument , str , for string .
there .
still don't see anyth becaus we still have a semicolon , but now we know there's someth in str , or at least we hope so , let's have a look at it .
there we go .
the area of a circl with radiu <num> is <num> . <num> .
same exclam point , everyth's the same .
even that line feed show up here , that's why there's a space .
so you can see that sprintf construct a string us a format string , us argument after the format string , just in exactli the same wai that fprintf doe , except it put the result into an output argument .
and what's the type of the output argument ?
it's a string .
it's element of type char .
well that's it for sprintf , and that is all i have to sai about string .
we've learn that all element in an arrai must be of the same type .
such arrai ar said to be homogen .
what if we want to group togeth heterogen data somehow ?
that is , data of multipl type .
well matlab , like mani other languag , provid wai to do that .
the easiest wai is to us a struct .
a struct is differ from an arrai in three wai .
on , struct have field , not element .
two , we access the field of a struct by name , not indic .
and three , field within the same struct can have differ type .
what's especi cool is that the field of struct can be anoth struct , and that abil of a struct to have anoth struct insid it make struct veri versatil .
the syntax for creat or access the field of a struct reli on the period , or dot .
if we type r . ssn equal <num> , matlab will creat a new variabl name r , make it a struct , creat a field call ssn for that struct , and assign it the valu <num> .
so the syntax is simpli to put a dot between the variabl name and the name of the field .
easi .
now if we check the data type of the variabl r with the class function , we get struct , as expect .
but if we check the data type of the ssn field , we get doubl , which is also what we should expect , sinc we assign a number to that field .
okai , so we've creat a brand new struct .
now we can add a new field to that struct , simpli by type r . name equal quot , homer simpson , end quot .
matlab will modifi our struct by ad a new field call name , and it will assign the string , homer simpson , as the valu of that field .
now here come the cool part i mention .
type r . address . street equal singl quot , <num> evergreen terrac , singl quot , creat anoth field for r call , address .
and becaus of the dot after address , thi new field is itself a struct , with it own field , which is call street .
and then it assign a string , <num> evergreen terrac , to the field street of the field address of the variabl r .
as you can see matlab doesn't print the insid of thi new struct in the command window directli .
instead , it just signal that the field address of the struct r is anoth struct .
as i said , allow a field to be a struct make struct realli versatil .
but there is more versatil here than that , becaus struct can hold arrai , and arrai can hold struct .
in other word , the field of a struct can be an arrai .
and it goe the other wai too , the element of an arrai can be a struct .
but in that direct , we encount the homogen rule , all arrai element must be the same type .
so if thei're struct , thei must all have the same field .
we'll see some exampl shortli , but first , you'll not be surpris when i tell you that matlab ha some us built in function that deal with struct .
for exampl , isfield will tell you whether a struct ha a certain field .
you just give it the struct , and the name of the field you're look for , and it'll return true or fals .
and setfield can add new field to a struct in a dynam manner , mean that you don't have to know the name of the field when you're write your program .
the user can specifi it while your program is run , for exampl .
anoth handi function is call rmfield , which mean remov field .
it can produc a struct that is a duplic of anoth struct , except that a specifi , specifi field is miss .
you give it the struct , and the name of the field you want to remov , and it return a copi with that field remov .
final , if you want to creat a struct with a set of name in on shot , you can simpli call the function name struct , and give it the field name you want as argument .
okai .
we've learn about struct and now we're readi to see them work in matlab .
inform about a bank account is pretti heterogen .
an account ha an owner , which is probabl go to be a string , an account number , which will be a number , and a balanc which will be a number , etcetera .
let's creat a struct that repres a bank account .
the valu that we've assign to the variabl , account , here , is a struct , class will tell us that .
and it first two field ar doubl .
it third field is a struct , as we can see right here , call , owner .
an owner ha a coupl of field , which we can look at by type the variabl name dot and the name of the field owner , to see what's insid it , and it ha two field .
when we see these with thi colon here , we know that we're look at a struct .
and thei happen to be both of the same type , as we can see .
these quot ar includ by matlab , when it give the valu of a struct field that happen to be a char .
if we want to turn a count into an arrai of struct , it's easi enough to do , we just give it anoth element .
and we did that by assign someth to on of it field .
as you can see , matlab print out onli the field name , onc we have a struct arrai .
also , the new struct , well the second element of the arrai , magic , ha all the same field that the first element alreadi had , not just the account number we creat .
thi ha to happen , to keep the type of both element the same .
rememb that homogen rule ?
if some element had on set of field , and other had anoth set , well homogen'd be out the window .
so what valu ar in these field that show up auto magic ?
let's have a look .
well thei're initi to the empti arrai .
let's assign valu to more field of our new struct .
if we want to see the entir struct , we can do thi .
but if we want to see the valu of a field of a substruct , we have to type in the entir hierarch name .
the arrai name , the index in parenthes , the dot , the field name , anoth dot , and the field name of the substruct .
well let me just do on .
and i'll do the other on .
while the struct must have the same field name , the valu store in those field don't have to match .
thei can have differ type , and or differ size .
for exampl , the length of the string in owner . name ar differ for element on and two , let's prove that .
on's <num> , on's <num> .
and substruct don't even have to have the same set of field .
there , we've ad a sub struct to owner , give it the valu <num> , for element on .
so what about element two ?
doe a new field , call ag , show up under it's owner , with , mayb , a empti matrix , or someth in it .
no , refer to nonexist field , ag , it doesn't even have that field .
the homogen rule for arrai is onli skin deep , it extend onli to the first level of the field .
everi element of the arrai account ha to have the field , number , balanc , and owner , but differ thing can be insid them .
okai , that's a look at how field of struct ar access , and the homogen rule for an arrai of struct .
now let's try some of the function that work with struct , some that we've mention befor .
first let's clear thi clutter screen , and look at the owner field of each element of account .
put that <num> colon <num> in there make it show each on of these element , and we see there's quit a few thing in <num> and not much in <num> .
well let's look at isfield .
so what we see here , is that isfield take thi argument , which is account <num> , the second on , dot owner , it look at the field of account <num> , call owner , and check to see if there's a field in there call , ag .
well there's not , so it return fault or zero .
then we do the same thing with element on .
well if we go insid of owner for element <num> , we find there is a field call ag , and so we get true .
as we said , isfield return true or fals , depend on whether the given structur ha a field , with a given name .
and then there's rmfield , which you mai rememb , remov the field from a struct .
let's remov ag from account1 . owner .
there , ag field is gone , along with it's valu , which wa <num> .
you give the thing you want to remov the field from , then you give the name of the field that you want to remov .
now let's just check to make sure that it's gone .
wait .
why is ag still there ?
we just remov it .
well we made on of those rooki error .
the function rmfield doesn't chang it argument .
thi wa it argument , account1 . owner .
that's not the wai matlab work .
it return a chang version of it argument , that's what we saw here .
so when we check out the argument that we gave it , it unchang , it still the same .
if we want to chang it , we have to assign someth to it .
that's easi to do , we do it like thi .
first of all , i'll click my up arrow and get that command back .
and over here , i type account1 . owner , and the result from rmfield will be assign back to it .
so let's hit return , and see what happen .
now let's check , ag is gone .
okai , we got on last function , that work on struct , to look at , and it name is struct .
you'll rememb when we start all these struct exampl , we need to have some struct to work with , and you do that by give a variabl some field .
we start out by give account the field name , number .
and then we gave it balanc , and so forth .
we kind of did it piecem , on field at a time .
but you don't have to do it that wai .
you can do it all in on fell swoop , with a builtin function , whose name is struct , like thi .
man , i've got my type in high gear here .
i am rea , i am smoke it , 'kai ?
whoa .
rememb we're profession here , we don't recommend you try type like thi at home .
but anywai , the input to the struct function come in pair , organ as field and valu .
so here is the field call , area .
here's the valu call , cs , and you can see it show up here .
here's a field call , number , and <num> , which is a doubl , is the valu for that field , titl , there you go .
thi method of set valu for field by process a list of field valu , field valu , field valu pair , is not uniqu to matlab .
it first appear in a languag call lisp , which mean list process , shortli after fortran wa invent in the late 50s .
lisp , and deriv of it , ar still us todai for write program that have artifici intellig .
we're still us thi method of give valu to field .
good idea never die .
and with that bit of program languag histori , we conclud our coverag of struct .
how would you store a page of text ?
as we've seen , two dimension arrai ar not a good wai to do it , becaus each row , that is each line , would have to be the same length .
store it in a singl string is not appeal either becaus you can't easili access individu line .
we could store each line in a separ string but then how can we group these line togeth ?
wouldn't it be great if we could creat a vector of special object that would link somehow to each on of these string ?
well it turn out that we can .
but what ar these special object ?
well , thei're call pointer .
to understand what pointer ar , we have to take a step back .
each variabl be it a scalar , a vector , an arrai , a struct or anyth els is store in the memori of the comput .
and each memori locat ha a uniqu address .
you can think of a comput memori as a veri , veri long vector of memori cell , and you address the cell as the index , that is a posit integ start with on .
consecut address indic neighbor memori cell .
and a pointer is simpli a variabl that store a cell's address .
to make it just a tad bit more confus though , matlab call a pointer a cell .
and matlab doesn't allow you to treat a cell as if it were a number .
there ar strict rule on what you can and can not do with cell .
but those rule ar for your own good , becaus it would be veri easi to shoot yourself in the foot with pointer repeatedli and painfulli , if you could sai , do arithmet on them or whatev you want to do with them .
nevertheless , the cell is a veri power and veri us data type .
becaus cell arrai like struct , let's you group heterogen data togeth , which is what we want to do with string from a page of text .
but unlik struct , cell arrai can be index with number and partli becaus of that , while thei're a bit trickier , thei're us more frequent than struct .
sinc cell is a new concept , it shouldn't be surpris that there ar new syntax rule .
to access the object that a cell point to , you need to us brace , also call curli brace or curli bracket .
to actual us cell , let's solv our origin problem by us them to creat a variabl that store multipl line of text .
okai , i've got a script over here name cell of text .
it'll give us what we want .
thi script is divid into two section .
thi is the first section , sai the ultim legend of big john .
and let's see what it doe .
first line set the first element of page to the string you could find him on the field almost ani dai .
these brace here tell you that thi is go to be a cell , so thi valu will now be point at by the first element of page .
second on set to the string , tall , dark hair , and ey of steel grai .
the third on , thei sai he pull a frisbe about half a mile .
you see thi pair of singl quot here and you'll rememb that two singl quot togeth insid a string translat into on singl quot .
on the fourth and the fifth line you see anoth on of those pair , and when he'd stick it in the corner you could almost catch a smile on big john .
hm , must be quit a gui .
anywai , let's run the first section .
cours you rememb how to do that , you just click run section .
don't see anyth happen becaus everi singl on of these assign statement ha a semicolon at the end of it .
but someth must have happen and i think page should have gotten the valu , let's check that out with the function who .
sure enough , it's a on by five arrai , in other word a vector , a row vector of type cell .
we can access individu element of page by us brace .
there's the first element .
you could find him on the field almost ani dai .
let's look at the fifth on .
what's in five , well it's point at the string on big john .
and to doubl check who , let's get the type of page with the class function .
so thi of cours mean that each element of page is of type cell .
but as we said , each element of page point at someth els that can be of vari size and or type .
in thi case the size of the element ar differ .
let's look at a coupl of them .
let's look at the first on .
notic i've put the brace here .
that mean we're go to access the thing that the first element of page is point at .
and it's type is char .
of cours , we knew that .
it's a string .
let's look at the size of it .
well it's a <num> element row vector .
fourth element also point to a char .
and the size of that char is <num> by <num> .
it's a <num> element row vector .
so we manag to put line of text of differ length into on homogen arrai of cell , which is what we set out to do .
the second section up here , thi on , show you how you might us thi cell arrai to print out the line us fprintf .
it goe to a new line here .
then it loop through the five indic of page here , and print each element here us the percent s format , and put a new line after each on .
and then it end with an extra new line .
let's run it .
i click anywher in it .
turn it yellow .
and i come up here and i click run section .
and here's what we see .
you could find him on the field almost ani dai .
tall , dark hair , and ey , all the wai down to big john , with a space abov and below .
as you might have guess , cell ar not just for string .
let is creat a cell arrai that refer to truli heterogen data .
first we call the cell function to creat a blank two by three cell arrai , where blank mean that each element contain the address of the empti arrai .
each element is said to point to the empti arrai as indic by the arrow .
in thi next assign statement , the us of brace instead of parenthes for index the arrai element indic that the address of the object on your right is assign to that element instead of the object itself .
in thi case , the function pi  produc that object .
the scalar , which wa then store by matlab in a newli alloc memori locat .
the address of that locat is then assign to the element <num> , <num> of the cell arrai p , thu element <num> , <num> now point at pi  .
it's import to take a minut here to emphas that even though p now refer to heterogen data name , an empti arrai and a scalar , which ar of two differ type .
the arrai p itself is still homogen .
the matlab cell arrai model allow individu element to point at differ type , but the element themselv ar all of the same type , and that type is cell .
the next command is p , left brace , <num> , <num> , right brace , equal int8 minu <num> .
again , follow the cell model , as with the previou assign statement , the brace on the left mean that the address of the object on the right is copi in to the element <num> , <num> , not the object itself .
and as befor , the address refer to a newli alloc locat in memori .
in thi case , matlab ha store minu <num> at that locat , encod as an int8 .
and we can do more than empti arrai that doubl in an eight bit integ .
here matlab alloc a new locat in memori to hold the string awesom and then make the element of p on row <num> column <num> point to it .
we show the pointer direct at the first charact of awesom becaus the address us for a vector or a rai or anyth that occupi multipl cell in memori is that of it first element .
next we creat a three by two arrai of doubl and assign it address to the element <num> , <num> of p .
again , we show the pointer aim at the first element , element <num> , <num> .
but , in fact , it make no differ what element it point at , becaus matlab doesn't allow you either to look at the numer address or to chang it .
as we mention earlier , matlab maintain strict control over it pointer .
in thi statement , brace ar us differ .
when thei're not on the left side of an assign statement , brace indic that the object point at by the element is to be retriev instead of it address .
thu in thi case , p <num> , <num> , retriev the <num> by <num> arrai point at by element <num> , <num> of p .
that arrai then input to sum .
and sum doe what it doe with ani arrai it receiv .
it add up each of the arrai's column and return the sum in a vector .
from thi point forward , the process is the same as for the other assign statement abov .
matlab alloc a new memori locat to store the vector from sum , and the address of that locat is copi into the element <num> , <num> of p .
notic that we us brace twice in thi last assign statement .
on the right , we us them to retriev a valu .
and on the left , we us them to store a pointer .
all of these us of brace ar necessari .
if we were to try us parenthes , matlab would complain you know , in red letter .
the lone cell that still point to the empti arrai is chang next .
we creat an inf of type doubl by divid <num> by <num> .
matlab store the result in memori , and then brace ar us to point element <num> , <num> at it .
with that we have a nice littl cell arrai that refer to two type of scalar , on string , a doubl vector , and a doubl arrai .
and it might show more clearli how it can be possibl in matlab to construct an arrai that refer to a set of data of multipl type , despit the fact that matlab , like almost all other languag , support onli arrai whose element all have the same type .
and what is the type of p's element ?
well , we can call the class function to answer that question .
and the answer is cell as expect .
but if we us brace to retriev the object point at by on of p's element , in thi case element <num> , <num> , then the class function tell us the type of that retriev object .
in thi case , the object is the scalar inf , which happen to be of type doubl .
but if we us normal parenthes when index that same element of the cell arrai , then we're refer to the cell itself and not the data that it point to .
so the class function return cell .
that's the differ between us parenthes and brace when it come to cell .
well , here's a tricki on , we us both brace and parenthes , but it's all good .
first p <num> , <num> retriev the object that the cell at index <num> , <num> of the cell arrai point to .
and that object happen to be an arrai of doubl .
in the parenthes with the indic <num> and <num> insid them ar us to index into that arrai .
in thi arrai index work as it normal would .
it retriev a second element on the third row which is <num> as shown in the figur , nice .
now let's see some more exampl .
most import concept to rememb is the distinct between a cell and the object it point to .
matlab us variou notat to indic that the element of the cell arrai ar not actual arrai , but ar instead pointer to arrai .
for exampl , it enclos all numer arrai in squar bracket and it enclos a string in singl quot .
that notat is suppos to sai to their user , these ar pointer to respect object , not the object themselv .
for exampl , let's creat a cell arrai of two cell .
the first element of c point to a scalar , <num> . <num> , which is just a on by on arrai .
and to remind us that the first element is a pointer instead of a on by on arrai .
it put that on by on arrai insid bracket .
the second element point to a string and remind us that the second element of c is a pointer to thi string and not the string itself .
it put the string in quot .
now instead of assign a valu .
let's just look at the valu in these cell .
onc again , we us these brace here , sometim call curli brace , to look at the object that the given cell point to instead of to set the object that it point to that we did up here .
and so we get the object that it point to .
here it's the number , here it's a string .
if we us regular parenthes on the other hand , we get someth differ .
you notic the differ ?
here we got the bracket sai ye , we're look at a pointer here .
here we got the quot sai thi is a pointer to a string .
but up here with the brace , we got the sort of thing we ordinarili get when we look at a number , just the number with no bracket .
we get the same sort of respons when we look at a string .
it's not indent and there's no quot around it .
but when you us regular parenthes with a cell element , you're ask to look at the cell's pointer , and as abov , matlab indic thi with bracket for number here and quot for string .
so when you see no quot , you're look at a string .
and when you see quot , you're not .
feel like we're in bizarro world here .
but anywai , that's how matlab show you that the object that you've request is a cell pointer .
it's subtl , now you know what it mean and how it work .
anoth subtl detail about cell is that matlab doesn't allow two cell to point to the same object .
let's look at a simpl exampl here .
it consist of two element , each point to a 1x2 arrai of type doubl .
c1 itself , of cours , is a cell .
now consid the follow statement .
it look like a simpl assign oper , so we might assum that the pointer in c2 ar now the same as the pointer in c1 .
that would mean that thei both point to the same object .
in fact , that's how it appear if we look at these object .
what happen if we chang on of these object ?
let's chang the object at which c<num> <num> , <num> is point .
the first element of c1 is now point at some nice fresh strawberri .
and we know it's a pointer becaus there's quot around it .
if c2 <num> , <num> contain the same pointer as c<num> <num> , <num> then when we ask matlab to show us what it's point at , we should find those same strawberri .
let's try it .
instead , we find the object point at by c2 <num> , <num> is the same as it wa befor .
the strawberri ar miss and i know thei were there befor .
i can prove it beyond a shadow of a doubt with geometr logic .
but wait , let me check c1 again .
now the strawberri ar there .
so am i lose my mind ?
well , i mai be .
but there's a logic explan for what's behind these strawberri .
the culprit here is matlab's cell pointer model .
that model doesn't allow c2 to point to the same object as c1 , in fact no two cell pointer can point at the same object .
instead , in matlab's version of cell pointer assign , what happen when matlab carri out the assign c2 equal c1 up here , is that it first copi all the object point at by c1 , then make c2 point to the copi .
so we put the strawberri in the origin .
but the copi point out by c2 wa left as it wa .
and becaus no two cell pointer can point at the same object , it's imposs to chang an object point at by on cell by manipul it via anoth cell .
thi is a strict limit .
but you need to keep in mind when work with cell .
for exampl if you pass a cell as an argument to a function , ani chang the function make to the object that the cell point at will not chang the object that the origin cell point too .
matlab will simpli copi the cell into the input argument .
and that input argument will point to copi of the object that the origin cell point to .
the function can onli chang the new object .
unless the object or the cell point to them is return from the function as an output argument , these chang will be lost .
and the origin cell that wa pass in as an input object , it won't be chang with or without an output argument , until someth's assign to it , nor will the object it point to .
thi ironclad rule against two cell pointer point at the same object is not enforc by most languag , includ c , c , and java .
and as a result their pointer ar far more flexibl than matlab's cell pointer .
there ar multipl pro and con and advantag and pitfal associ with both type of pointer .
and hour of vigor debat have been expend on them by peopl who care about such thing .
but if you hear someon sai that matlab is a weak languag becaus of thi rule , don't believ them .
it just mean thei don't know that matlab support two type of pointer , and it second type work like the pointer of c , c and java , with all the right and privileg and pitfal thereunto appertain .
thei're part of the less well known object orient structur in matlab .
thei're rare us becaus thei're rare need for numer applic .
but thei're there , if you want to learn how to us them .
thei're taught in chapter three of the textbook .
here's some built in function that ar us for work with cell .
to understand them you realli need to try them out on your own .
and i encourag you to do that .
and in conclus , let me just sai that cell and cell arrai ar essenti in mani real world problem that you mai run across in the futur .
it'd be wise to invest the time you need to learn the concept well .
and a wise invest now will pai dividend in the futur .
and with that program and financi advic , we'll conclud lesson seven .
hi , and welcom to lesson eight , file input output .
thi week , we'll be talk about how to read data from and write data to file .
so what is a file ?
well , a file is an area in perman storag , typic a disk drive , that store inform .
file ar manag by the oper system of your comput .
thei can be copi , move , renam , delet , et cetera , and thei can be access by program run on your comput .
a veri import us of file is to exchang data between differ program and differ comput .
in that case , a file is input to on program , and is output from a differ program .
we abbrevi the interchang of inform between program and file as file i o for file input and output .
for exampl , you might want to write a document with a word processor and gener a pdf .
and you can give that pdf file to someon els who can open it with adob acrobat on anoth comput and print it .
and file can be us to exchang data between the physic world and comput .
for exampl , an ekg machin , which measur your heart activ , will save the data into a file .
and your doctor can open that file on a comput and evalu your health .
the most common us of file is to save your work so you can continu with it later .
exampl of that includ , document that you write on word processor or spreadsheet .
and extend to the file we've been see matlab save when he need to save data or function like matlab file and m file .
but you can handl much more than mat file and m file with matlab .
as we'll soon see , with matlab , you can read and write text file , binari file , and even microsoft excel spreadsheet .
at the begin of our journei , we saw how to us the user interfac of the matlab desktop to chang folder , and how matlab show the content of the current folder in thi window over here .
sometim howev , we mai need to have our matlab program itself chang the current folder , or get a list of the name of the file in there .
fortun , matlab provid command to do just that .
to get the fulli qualifi name of the current folder , we can us the pwd command .
pwd stand for print work directori .
it origin from the unix oper system , where folder ar call directori .
and the command return a string , contain the complet path of the current folder , complet path or fulli qualifi name .
it's exactli the same path as that shown up here in the address line .
we haven't talk about the address line sinc lesson two , so you mai not have thought about it sinc then .
but it show the current folder , which is call lesson <num> , and show that it's contain in the folder , tutori , which is contain in the folder , comput program with matlab , et cetera .
more commonli , we sai that lesson eight is a child of tutori , which is a child of comput program with matlab , and so forth .
or to put it the other wai , comput program with matlab is the parent of tutori , which is the parent of lesson <num> .
in oper system , thei're all singl parent famili .
the onli differ between here and here , is that these littl arrow in the address line ar repres by slash in the output from pwd .
we're do thi on a mac , but if you're us window , the output from pwd will be slightli differ .
these slash turn into backslash , and there'll be a letter and a colon at the front repres the hard drive .
so if we're us window , the output would look like thi .
to make thi window like string here , i've us the built in function strrep , which mean string replac .
it replac everi slash that's in the output from pwd here with the backslash .
you can see how the syntax and semant of thi command work , but you should look it up in the help .
it's a handi function .
to get a list of the file and subfold in the current folder , you can us the command ls , which stand for list .
us an output argument .
ls produc an arrai of char .
let's do that .
you can see here that it's a <num> by <num> string of char .
to chang folder , matlab provid the cd command .
thi cd doesn't mean compact disc or certif of deposit .
it stand for chang directori .
you have to give it a string as an argument to tell it the directori you want to go to .
suppos your program's organ is such that it start work in the current folder , where ever that folder mai be , then it need to move to the parent .
like here , for exampl , if it start in lesson <num> , it would want to move to the parent , tutori .
you're alwai go to start to program in lesson eight , or some other child of tutori , like lesson seven .
then you could just store the complet path name of tutori in a string in a program like thi .
and then , when it wa time to chang to the parent , you could do thi .
befor i hit return , let's look up here and watch as i hit return .
so , here come return .
and you see , that we're now up in tutori .
let's go back to lesson <num> .
there , we're back in lesson <num> .
but suppos your program wa run from anoth directori .
then the parent that it need to move to will be differ , and so us thi complet path name idea just won't work .
thi is a veri common situat .
and for thi situat , our program can us a so call rel path name .
what that mean is that , instead of specifi the complet path name , we can specifi the target folder rel to the current folder .
or to press the famili metaphor a littl further , we specifi rel of the current folder .
in thi case , the rel is the parent , and there's a special syntax for specifi the parent .
we want to go to the parent of the current folder , we can do it like thi .
two dot .
now we're back at the tutori again .
the two dot mean parent folder .
now let's us ls to see what's here in tutori .
of cours , we can see it but , the program couldn't .
and if your program need to see what's insid of on of the children of tutori , it can give it name as an argument to ls , without the complet path , like thi .
not much in there .
by the wai , thi is how the function would do it , it would give the string contain the target directori in parenthes .
but if we want to do that ourselv in the command window , as in fact we just did , there's a second wai to do it .
like thi , doe the same thing .
when function take a string as an argument , the parenthes can be omit .
when there ar no space in the name , the quot can be omit too , and thi is whether you write the function or it's a built in function .
that's how command like help work .
the command help squar root , for exampl , is differ in form .
in other word , differ in syntax from thi command .
but both have the same mean in , in other word , thei both have the same semant .
now let's us cd to go back to lesson eight , us rel name .
by the wai , the dot dot , which mean parent , which we saw a littl earlier , can be us multipl time within the path .
befor we show you that , you mai have notic that i slip a subfold into lesson <num> a few minut ago .
it's call addit exampl .
let's go there .
i cheat and just click .
that's just on file in there call knothol , it's an m file with a function in it that check to see if it argument is not a whole number .
anywai , now that we're wai down here , in addit exampl , we can leap back up to tutori , which is the grandpar like thi .
there .
back to tutori .
here's some other command that allow you to do thing with folder and file .
thi on make a new directori .
it just show up over here .
and thi on remov the directori .
it just disappear over here .
but it remov onli empti directori .
it'll do noth , except give an error if you try to remov a folder with anyth in it .
let's go into eight , and try to remov my addit exampl folder , which you just saw ha a file in it .
i'd hate to lose that .
oop .
then as you can see , it's still there .
and there ar three command for do thing to file , and the name of the file tell what thei do .
thei're call move file , copi file and delet .
each of these command is rel simpl to us .
as you can see by read their descript with the help command , but i'll give you a warn about delet .
delet give you no warn .
when you tell it to delet a file , no pop up will show up sai , ar you sure and that sort of thing .
but all is not lost .
there's a set in prefer up here , that will caus the file to be sent to trash .
it's probabl a good idea to set that .
okai , i've start work on anoth project , sinc i did all that stuff with folder and file .
i want to show you all the variabl i've got in the workspac now .
there , isn't that nice ?
in week on , we mention briefli how you can save your current workspac with the save command , like thi .
and now if you look over here in the current folder , you will see thi file appear matlab . mat .
it's got everyth that we had in our workspac save in it .
then you can safe quit matlab and later when you ar readi to continu your work , you can start matlab and load the workspac back with thi load command here .
and when you check your workspac , it's all the same .
cours i didn't actual quit matlab just now , so you might not be convinc .
mayb thi will convinc you .
there , everyth's gone .
and everyth's back .
the onli thing you have to be care about , is that if you have an exist variabl in the workspac with the same name as the on you're load , the load oper will overwrit the exist valu .
usual that isn't a problem though , if the last thing you do is save when you quit and the first thing you do is load when you start again .
by the wai , you should look up the function startup , which is execut when matlab start , and finish , which is execut when matlab quit .
you can put a load command in startup , and a save command in finish .
sometim that's all you need to preserv your variabl .
matlab provid even more flexibl in load and save variabl .
you don't have to save the entir workspac .
instead you can list the variabl you want to save , and similarli you can load onli a subset of the variabl from a file , us their name .
final , you don't have to us the default file name matlab . mat , like right here .
you can suppli your own favorit file name .
check thi out .
here i've specifi that i want to save variabl into a file call my_data_file . mat .
you can see it's show up right over here .
and then i specifi the data i want to save into it .
data s and a .
now let's clear .
run who .
there's noth there .
and now let's just load my data file .
it's back .
what if i just want to load , sai , s and a ?
let's try that .
all i get is s and a .
these load and save command suppli a flexibl mean to provid data persist for your matlab program , from on run of matlab to the next .
microsoft excel is a wide us tool for analyz data .
that's why so mani program support the read and write of excel file .
and matlab doe too , with two built in function call xlsread and xlswrite .
here we see a spreadsheet open in excel .
it contain monthli weather data for nashvil , tennesse .
as you can see , it contain not onli numer data , but also variou label for month name and weather data , such as temperatur and precipit .
assum thi data is save in a file call nashvil_climat . xlsx , we can easili load it into matlab .
we do that by call the xlsread function with three output argument , num , txt , and raw .
the onli input argument here is a string .
it's the name of the file .
you mai be wonder , why ar there three differ output ?
well , matlab's nice enough to separ the number from the text for us .
number in the excel file ar collect and return in the first output argument .
text is return in the second output argument , and final , the third argument contain everyth .
depend on what you need , you can us ani or all of these output .
let's look at the first argument , num .
num is a matrix of doubl , no surpris there .
but an interest aspect of num is it's size , which is smaller than the size of the spreadsheet .
what matlab doe here is find the smallest rectangl of cell in the spreadsheet that contain all the number .
that rectangl mai be onli a subset of all the cell in the spreadsheet , as it is here in thi exampl .
in thi case it make up <num> row and <num> column , so that's the size of num .
but there's a hitch with thi plan .
matlab pick up all the cell from thi rectangular area , and some of those cell mai not contain numer data , like thi two by three non numer arrai in the middl of our exampl .
it contain three empti cell in three cell with text , none of which is numer data .
for these cell , matlab assign a special valu in the output argument , nan , which mean not a number .
so in thi exampl , it put a two by three arrai of nan , or nan , in the middl of the output argument .
text is return in a similar fashion .
thi time , the smallest rectangular area is select that contain all the text cell .
the type of thi second output argument , txt , is a cell arrai instead of an arrai of charact .
that's the onli wai to return text .
becaus there can be differ number of charact in the cell , so it's not possibl to return it as a rectangular charact arrai .
now number turn into empti string .
but what about those strang look entri , <num> by <num> char and <num> by <num> char at the top left ?
with eight correspond string , thei're simpli too long to print conveni in the command window .
so matlab just print the type , the dimens plu the element type .
but don't worri , all those data ar there in those cell .
final , if we need everyth from the spreadsheet in on arrai , we get that in the third argument .
it's a cell arrai , that's the union of the previou two arrai .
all the data ar here in on cell arrai , contain doubl and string .
and thi time , it's the smallest rectangl that contain everyth in the spreadsheet .
okai .
let's try thi out in matlab .
well , it's easi to implement pretti much anyth in powerpoint .
but et me show you that it's realli thi easi to handl excel file in matlab .
first , let's make sure we have the data we need in thi directori .
what i want is thi nashvil climat data .
there it is right there .
it's an excel file with the end xlsx here .
so first thing i want to do is just read the number in the file .
to do that , we'll give just on output argument instead of all three .
and there's our function .
gee , that's a lot to type , and i'm lazi .
so what i'm go to do is just copi .
and past .
there .
there's all our data .
how cool is that ?
a singl command , and we have all the numer data in the excel spreadsheet load into a matlab variabl .
if we want both numer and textual data , we can do thi .
there ar the number , there ar the string .
with these empti string , where there ar no string .
so , that's how you get both of them .
if you're not interest in the numer data at all and you just want the textual data , you can do that , too .
there's a new syntax we haven't mention befor , that allow you to skip an output argument .
look like thi .
instead of temp here , i put a tild and a comma .
you got to have the comma if you're go to us a tild .
and so thi time , we didn't get the numer data , just the second set of data .
and thi work with ani function that ha multipl output argument .
and if all we care about is the entir file , that last argument , we can do thi .
two tild .
we don't want the numer , we don't want the text , we want everyth and there is everyth in that format , where not a number is an empti cell , and here is number over here and here is string and so on .
often , we want to read from a specifi area within an excel workbook .
here's how to do that .
here we read the data from just a singl cell .
the second argument here specifi the sheet .
you can us the number , just like i did here , on for f , the first sheet , two for the second , and so on .
or you can specifi the name of the sheet us a string in the second argument .
the third argument is the name of the cell .
and you can specifi an area us thi syntax .
here we us excel's own notat in the third argument for a rectangl of cell .
note that that colon right here is not matlab's colon oper , it's just a charact in the string .
it indic that t15 is the upper left hand corner of the rectangular arrai we want , and e17 is the lower right hand corner .
we can also write data tech cell file us the xlswrite function , at least on window we can .
on a mac , matlab provid a somewhat limit altern , xlswrite , write text file instead of excel file .
onli numer arrai can be written .
and each row is written on a separ line , and the number on a row ar separ by comma .
thi format , which is call the comma separ valu format or csv , is written and read by mani applic includ excel .
becaus of thi limit , we're not go to cover xlswrite here .
but the function is just as easi to us as the xlsread function .
onli thing to keep in mind is that you can overwrit the content of an exist file .
you won't get ani warn .
the good new , howev , is that you onli modifi the cell that you actual write .
the other cell will not be affect .
try help xlswrite , or read the book for more detail .
not surprisingli a text file contain text .
that text is a stream of charact , and those charact can be encod in on of mani possibl encod scheme .
we talk about the ascii encod scheme last week .
but there ar other scheme that can repres far more charact .
the good new is we don't have to worri about the encod , or decod of ani of them .
matlab take care of all of that for us .
on differ rel to the file we've us , so far , that is excel file , and mat file is befor we can us a text file , we have to ask the oper system for permiss .
make thi request is call open the file , and matlab did it behind the scene for us for excel , and mat file .
and on , onc we're done with the file we have to releas it , which is call close the file .
so , how do we do thi open , and close ?
well , we us built in function .
start with fopen .
as you can see , fopen take two input argument , a filenam , and a permiss .
and return on output , a uniqu number call the file identifi , that we'll need in order to read from the file , or write to it .
when it's time to close the file , we us anoth built in function call fclose .
it take on argument , which is the same file identifi that we got from fopen .
for fopen the first input argument is exactli , what you'd expect , a string contain the name of the file .
the second argument is also a string , and it specifi what we're ask permiss to do with the file .
do we want to read ?
or write ?
or both ?
if we want to write , do we want to discard the current content , or append text to the end of the file ?
well , here ar our option .
as you can see , thei all includ the charact t .
thi t tell matlab , that the file we want to us is a text file .
r stand for read , w stand for write after discard the current content , and a stand for append .
the plu sign mean we plan to do both read , and write .
and you can see all the combin in thi tabl , and you can get the same list with the command hel , help fopen .
now , let's do some work with text file .
here's a function that we prepar for you call write_temp_precip_txt .
it write data into a text file .
it's not too big , scroll down here just a littl bit , see there's just a few line ar miss .
in fact , if we close the ribbon up here , by click right here .
we can see all of it .
let's try it .
i'm go to hit tab , at thi point .
there , it give me the option .
i doubl click that on , it complet it for me .
for lazi peopl like me , it's veri handi .
well , i'm go to us thi function to write precipit data , that's store in the function , into a file call climat . txt .
here it goe .
if we look over here , we see the file up here , climat . txt .
and if we click right on it here , open it outsid matlab , we see it in thi text reader that mac provid us .
you see climat data for nashvil , tennesse , which came from here .
and averag high and , and low , and so on .
all these nice label , all laid out here .
all the number show up over here , look realli nice .
let's look at thi function , to see what it take to write a text file like thi .
first few line provid just a bunch of string variabl , that contain the variou label .
and of these , the two most interest on ar the last two , right here .
mo_1 and mo_2 , becaus thei're cell variabl .
you see these brace that were on the right , which mean that the string , each on of these string is store in the memori , and the address of each on of them show up as element in thi arrai , mo_1 .
and we learn the reason for us cell arrai , back in lesson <num> .
when you have a bunch of string , in their differ length , and you want to store them in a singl arrai , realli the best wai to do that is with a cell arrai .
the next two variabl we creat in the function ar for the actual climat data .
data_1 , and data_2 .
we creat two matric .
here , and here , for store the temperatur , and precipit data for the variou month .
the reason we have two matric , and two cell arrai , is simpl .
thei're two separ section for the first , and second halv of the year .
here , and here .
so , it's easier to have the correspond data in separ variabl .
onc we have the variabl set up out of the wai , we can start deal with the text file we want to creat .
the fopen function tri to open the file us the name that wa pass to it by the caller of the function , that's call filenam .
the w plu t argument , as we've seen befor it tell fopen that we want to write thi file , and if it doesn't exist we want to creat it , if it doe exist we want to discard it current content .
thi t here sai that it's a text file .
the function return a number .
if it successfulli open the file accord to our request , then the number is posit .
and we call it the file id , or file handl , and it's store in fid here .
howev , if it fail to open the file for ani reason , for exampl , if we don't have right permiss in the current folder , it'll return a neg number .
in that case , we print an error messag , and immedi return from the function .
thi guarante that the code after the if statement , will execut onli if we have a valid file open .
and it's readi to be written .
then , it come a sequenc of fprintf function .
thi is the familiar fprintf function that we've gotten us to befor , but thi time , the first argument is a number instead of a string .
in that case , matlab will write the output from fprintf into the file that ha that file number , that file id , that handl , instead of write it to the command window , over here .
it that easi to write text into a file .
the first few printf , write the titl in the column header's into the file .
and it's time to write the data into the file .
that's done in thi for loop , and thi for loop .
the good new is that , we know all thi stuff alreadi .
the format string for fprintf work the same wai as befor , when we were print to the command window .
cell arrai ar access us these brace , just as we learn befor .
all the thing that we're do here ar thing that we've learn to do earlier .
onc we're done with the write , we need to rememb to close the file , and that's done right here , with fclose .
that's it , we're done .
and now , you know , how to write text file from a matlab program .
the text file is usual broken into line , so human can read it easili .
and thei read it on line , at a time .
well , that's also the best wai to read it , with a comput .
we'll illustr that , by write our own version of the built in function type .
type read and print , in each line of a text file to the command window .
let's re implement that function by read a text file , on line at a time , and print each la , line to the command window immedi , after we read it .
our view_text_file function , take the file name as input , and return a no output .
it just simpli read , and print , the content of the file , on line at a time .
first we need to open the file , and we open it for read , with the fopen function , us a permiss rt , which mean , read text file .
we should alwai check that the file open request wa success , and we do that by check whether the file identifi return by fopen is neg .
if it is , then there wa a problem open the file .
the file mai not exist , or some other program mai be us it .
or we don't have read access to the current folder .
in that case , we call the error function , and our function will be close .
but if it's not a neg , we have a valid file identifi , and we're in busi .
so , we're readi to read the content of the file .
to read the first line from the file , we us the built in function fget .
we give it the file identifi , and it read on line , and return that singl line in a string .
here we catch that string in a variabl name , onelin .
we us a while loop to print the current line , and then read the next line repeatedli , until we reach the end of the file .
and how do we know we've reach the end ?
well , that's a littl tricki but fget help us out .
when fget reach the end of the file , there's noth left to read .
so , there's no string to return , instead it return a minu on .
so we us the ischar function , in the condit of the while loop .
ischar return true , onli if it argument is a string .
if it return fals , then we've reach the end of the file , and the file in the while loop , will quit .
insid the loop , we us fprintf with the percent s format specifi , to print the current line , which is store in onelin .
then we us fget , to get the next line , and so on .
pretti simpl , realli .
final , we put an extra new line charact , to make sure that after the print is done , the command prompt will appear on a new line .
then we close the file , that's it .
not too bad , wa it ?
yeah , read string from a text file is easi .
but convert those string into numer data is much harder .
for exampl , if our climat data spreadsheet were a text file , instead of an excel file .
it'd be a pain process to write the code necessari to recogn the digit , and decim point that repres temperatur , and precipit data .
and convert them into numer valu insid variabl .
the textbook describ how to do it in detail , but it's cumbersom .
and while text file ar nice for human to read , thei're a poor wai to store a numer data .
furthermor , convert text to number is not a fundament issu in learn the program .
so , for all of these reason , we're not go to cover it in the cours .
instead , we'll show you how to read , and write number with binari file , which ar much more suitabl for thi sort of thing .
for all practic purpos , ani file that's not a text file can be consid a binari file .
binari file can contain all kind of data , but most typic thei store number .
and there ar mani wai to repres these number in a comput .
the lesson on data type give you a hint .
matlab make it easi to deal with these differ type , when we want to read or write a binari file all we need to know is the type .
but more on that later .
binari file need to be open and close with the same function , fopen and fclose , that we us with text file .
the permiss's similar too , the onli differ is that we omit the t , which you'll rememb , mean text file .
in other word , the default type for these two function is the binari file .
the w , the r , the a and the plu charact have the same mean as befor .
here's an exampl that'll show you why we have to know the data type .
the right arrai bin function take on arrai of doubl and a filenam as input argument , and it write the element of the arrai into a binari file .
we start by open the file , and check for an error , as we did befor with the text file .
now we're readi to write the number into the file , so let's see that code , that's it .
the built in fwrite function take the file identifi , the arrai to be written , and a string that specifi the type of the element and arrai , and doe it's job , that's all there is to it .
the onli wai to mess thi up is to give the wrong data type .
that's unlik to happen if you creat the data , but it can happen if someon els wrote the function that pass the data in .
and it's veri easi to get the wrong type later , when you're read the file , becaus unless you includ a type in the filenam , when you wrote it , there's just no wai to determin the type of number insid the file .
and if you specifi a type that's differ from the type in the file when you read it , the result will be just nonsens .
onc we're written the arrai to the file , the onli thing left to do is to close the file with fclose .
so put data into a binari file is easi , and get the data out of thi file is just as easi .
consid the function read_bin_file , which take the filenam and the data type as input , and return , as output , the arrai that wa read from the file .
we start the same wai we start twice befor .
we open the file with fopen and we handl ani error .
read the arrai is anoth on liner .
the fread function take the file identifi , and the number of item to read , and the data type , and it return the valu it read .
here , instead of specifi the exact number of item , we specifi inf , mean infin .
that caus it to read everyth in the file .
that's the easi wai to get all of them , and it's what you do when you don't know , or don't care how mani number ar there .
final , as alwai , we close the file .
by the wai , it's import that our program close the file , whether it be a text file or a binari file , becaus if it doesn't , then the file can't be reopen in other program , it'll block from access it .
okai , so far so good .
we'll soon see that thing can get a littl more complic , but first let just try these function out in matlab .
let creat a data arrai first .
as usual , i initi the pseudo random number stream so you can duplic what i do .
now let's look at the function right_arrai_bin that i show you in powerpoint .
it's over here in the current folder window , right there .
and let's see it look just as simpl as it did on the slide .
it open a file whose name is given as an input argument .
it check for an error , everyth's okai , then it simpli write into that file us the file id .
it write the first argument in as type doubl , then it close the file .
so let's run it , and us data as the input arrai .
and i'm go to store it in a file call datafil . dat .
now that's not over here , but watch right here where thi arrow is , in thi vicin , as i hit return .
and the file appear .
now let's try to look at the content of thi file .
we us the function that i show you in powerpoint call , view_text_file , which i happen to have right here .
and here it is in the editor window .
there .
wait , let me show you someth realli nice about the editor .
if we click view here , and come over here to the left , we see thi littl divid screen icon here name , left right .
i'm go to click that .
and watch what happen over here on the screen .
view_text_file move over here to the right .
now these two file ar line up for easi side by side comparison .
with thi arrang , you can see that thei start out almost exactli the same .
both open the file the same wai , thi on us w , thi on us rt .
then thei check for an error , it check for an error .
right_arrai_bin doe it work in on line .
but work with text file is more complic than work with binari file .
so view_text_file' work is complic enough to warrant a coupl of explanatori comment here .
then thei both call fclose , and close with the fid , the file id .
so let's us view_text_file to look insid data . dat .
whoa .
okai .
i'd call that garbag .
and that's what we should expect .
ani time we try to read a binari file as a text file , we're go to get garbag , becaus the binari file is not encod with a text encod scheme .
thi particular case , it's encod as a stream of doubl .
what we should have done is us the function i show you in powerpoint , call read_bin_file , which is design to read doubl store in a binari file , read it into an arrai .
here it is , right over here .
i doubl click it , and it pop up on the right , on top of view_text_file .
well these two function ar almost ident .
thei both open the file .
thi on us a w , thi on us an r .
thei check for the error .
then each us on line , fwrite , to write the file , or fread , to read the file , then thei close the file .
that's how simpl it can be to write and read binari file .
okai .
let's us read_bin_file to read datafil . dat the right wai .
rememb that the first argument is the file name .
the second argument is the type of the number that ar written into the file .
that type is given to f read , which , you'll rememb , requir the data type as it third argument and requir the number of valu to be read as the second argument .
we've specifi infin here , which mean that it read all of them in the file .
so , there .
we should now have two variabl in our workspac with the same valu in them , name data and x .
let's check that with who .
well , thei're both there , data and x , and thei're both doubl .
but you mai be surpris to find that x is a vector .
<num> on column vector and not <num> by <num> arrai like the origin .
so what's go on ?
well , insid write_arrai_bin here , when f write copi the input arrai into the file , it wrote each element on after the other in on long stream of number , with noth written about the dimens of the arrai that it came from .
so the data file contain <num> doubl arrang like on long vector .
then insid read_bin_file over here , when f read retriev those number , it simpli read them in the wai thei were arrang in the file , as a vector .
so a end up as a vector .
if we want to preserv the dimens of the variabl when us binari file , we have two option .
we either try to rememb that a file with a certain name contain an arrai with such and such dimens , or we write the dimens inform into the file as well .
write the dimens into the file is a much better option , but it still requir us to rememb the format of the file .
let me explain .
suppos we decid to write out the dimens inform as the first few valu that we write in the file , and follow those valu by the content of the arrai .
we still have to rememb that we've done that .
there's no wai to figur that out by examin the file itself .
i'm sure you see the problem .
yeah , mayb not .
okai , let's do an exampl .
let's look at a modifi version of write_arrai_bin over here that store the dimens in the file along with the data .
it's call write_dim_arrai_bin .
i'm go to load it into the left side of the editor thi time and i do that by click the function over here , you want to make it the activ on , and then doubl click the file over here .
there , it show up here .
it's all fanci with the littl header i put into it .
and as i said , it's a modif of write_arrai_bin over here .
let's move that over to the right so we can compar them .
it's pretti simpl , the origin version .
thi is a littl more complic .
the first modif is that we now us the size function here to get the dimens of a , the input argument .
here we didn't do that .
we've put them into the vector dim , so for exampl , if a is a <num> by <num> by <num> arrai , dim would contain the number <num> , <num> and <num> .
for a scalar , dim would contain a <num> and anoth <num> and so forth .
the second modif is that we call f write , instead of on time , three time .
on call is to write the number of dimens of a .
the number of dimens is equal to the number of element in dim , so it's equal to the length of dim .
and we write it as a doubl .
a second call put the list of the dimens into the file after the number of dimens .
an import featur of f write is that everi time you call it , it start write at the point in the file where it previou call left off .
so a given call doesn't write over what wa written by the previou call .
and there's a third column and that's when we write the element in after the list of dimens .
realli that's all there is to it .
then we close the file .
i'm go to close thi on .
we're done with it .
i'm go to close view text .
we're done with that .
and now i'm go to look at a companion function that read file written by write_dim_arrai_bin .
i'm go to put it over here on the right so we can see the similar between the new function i'm go to show you and write_dim_arrai_bin .
it's call read_dim_arrai_bin .
so let's put that in .
and here it is , again with the fanci header .
and let's compar these .
we open the file us an r instead of a w .
we check for an open error , and then we begin do thing in earnest .
first we read on element of the file .
that's what thi second argument , the <num> , sai to f read , and we store it in n .
you will rememb that the first number we wrote wa the number of dimens .
so thi n now will hold the number of dimens .
the next thing we do is tell f read we want to read n element .
so if it wa a three dimension arrai , we'd be read three dimens and we read in them into dim .
and then we call a third time .
so just as we call three time the f write function , here we call three time the f read function , and the third time we read the element of a .
note that thi last call doesn't tell f read how mani item to read .
in that case , it just read in everyth to the end of the file .
after we've read these element into a , there's on problem .
we did thi befor .
and rememb , a turn out to be a vector .
well , we want a to have the dimens specifi in dim .
so what do we do about that ?
well , there happen to be a function , a built in function call reshap that will take a vector like thi , and if you give it the dimens , it will produc as an output an arrai with the same element but with the specifi dimens .
if you look realli close here , you'll see the transpos oper .
that's becaus thi vector in reshap ha to be a row vector , but f read return a column vector .
okai , that's it for the read_dim_arrai_bin function except for close the file , which it doe just the same wai that write_dim_arrai_bin did .
and we're done .
all right .
let's try thi new pair of function .
let's write data here into a file again , but thi time we'll name it dimsarrai . dat to remind us that the file contain both the dimens and the element of an arrai in that order .
then we'll read it back into the variabl y .
well , here goe the write , all right , if thing work properli over here in thi file that we just wrote , the number of dimens , the list of dimens and the element of data should have been written into the file .
let's try read the arrai .
well , if everyth went accord to plan , y should contain an arrai that's ident to the arrai in data .
let's cross our finger and look at our variabl us whose .
well , as you can see , data is <num> by <num> and y is <num> by <num> , look better than x wa .
and thei're doubl , of cours .
what about their element ?
wonder if thei're the same valu ?
there's a wai to check that .
there's a function , a built in function call is equal which will return true if and onli if it's two argument have the same size and contain the same valu .
so let's try that .
y equal to data .
on is true , excel .
let me emphas a kei point again here , thi particular pair of function right dim arrai bin and redim arrai bin work properli onli if we rememb the follow thing about the format of ani file that thei work with .
first , all the data in the file must be doubl .
and second , the file must contain the number of dimens and a list of those dimens and then the element .
that's what write doe .
that's what read expect .
we shouldn't reli on rememb these rule .
we should write them into comment in a header at the begin of each function just as we've done here .
so that we can jog our memori with a help function like thi and here we see write dim arrai bin , write dimens arrai in binari , and then we give an exampl .
it write the number of dimens of a , then a list of the dimens , and then the element of a into a file name fname , encod as doubl .
and there's a similar explan down here for read dim arrai bin .
and we should do on more thing .
in the folder in which we store the file that ar written in thi format , we should includ a text file that describ the format .
you mai not believ me yet , but if you write format file and let them sit there a while and then go back a few week or even just a few dai and try to us them , you'll becom a believ .
you'll see that you actual do need to go to such length to make sure that you'll rememb all thi when you need to us these function , and us the file written by write dim arrai bin later .
and so that you can help other peopl work on the same problem , to understand these rule as well .
we mai even want to make up a new file extens for these file , to differenti them from other binari file , sai , . dar for dimens arrai , or someth like that .
in fact , let's do on more exampl with a three dimension arrai instead of a two dimension on .
great .
b and beta ar both <num> by <num> by <num> arrai .
and ar their valu equal ?
see that .
success again .
so by write a binari file in thi special format , we can read it later and retriev an arrai of ani dimens without have to rememb it dimens .
sure , our binari file format mai be a littl more complic than a simpl stream of element , but i think you'll agre that it's worth the complic .
note that thi last call doesn't tell fread how mani item to read .
in that case it just read in everyth to the end of the file .
and keep file small can be import when you're deal with big data .
not just to save memori on your machin , but to save time when you upload that data to the web for someon els to access .
so now you know how to read and write inform into file , and you can do it in a wai that suit the problem at hand .
whether you're us matlab's map file to save your work from on session to anoth , excel file to interfac with spreadsheet applic , text file to allow human to read them , or binari file to get the highest effici .
file io is the last piec of the puzzl that give your program access to the world's vast data resourc .
it allow the world to benefit from the result of your program .
and that bring us to the end of lesson eight .
with the end of lesson eight , we bring our cours to a close .
on behalf of robert terrac , the peopl of vanderbilt's institut for digit learn , and myself i'd like to thank you for take part in comput program with matlab .
if you follow along with us from the begin take the quizz and work the exercis then you're a matlab programm , congratul , welcom to the club .
whether you took thi cours for a program class for your job or to get a job or if you just took it simpli out of intellectu curios , you now know how to program a comput .
and you're part of the worldwid commun that program in matlab .
wait .
turn down the music .
thi is not the end , it's realli just the begin .
program is a lifetim thing .
those of us who have been program for <num> or <num> or <num> year will all tell you the same thing .
we're still learn todai .
i learn someth new everi on of the <num> wonder year that i taught matlab to those incred bright and inquisit first year student at vanderbilt .
and i'd been program for <num> year befor that .
you learn by do .
and the more you learn , the more satisfi it becom .
both becaus you write better program and becaus you're more valu by the world when you do .
if i can offer some advic for your lifelong learn would be to do two thing .
first , find real problem that need real solut and solv them .
textbook problem ar good , of cours , and thei're focus , but the thrill that will keep you hang in there , try to make a program work while you look for those frustrat bug is the knowledg that you ar the first person to solv the problem .
second , read code written by more experienc programm .
you can find lot of that on the web in mani program languag .
a veri conveni place to find realli good matlab code is in matlab itself .
mani of the built in function ar actual open sourc mean that anyon can look at the code anytim thei want to .
the command edit will let you look at them .
type edit num to string , for exampl , num2str .
an m file contain num to string will pop up almost immedi in the editor .
and you can see how the math work programm solv the problem convert a number to a string .
on the web a great place to go to see the handiwork of other matlab programm is matlab central .
there you'll find code contribut by peopl from all over the world and with a bonu .
there ar often commentari includ that were written by other programm .
okai , you can bring up the theme music now .
that's the end of my advic and the end of the cours .
it's time for you to begin the next phase of your program career .
thi cours ha help get to that next phase , then we've achiev the goal that we set ourselv .
that goal wa simpli to us matlab , to make comput program , more access to you .
we've done our best .
the rest is up to you .
we wish you well .
