i have so mani peopl to thank who have help me with thi cours that it's go to take an entir video all by itself .
the cours start with the book python for informat .
thi book start over ten year ago , when allen downei wrote a book about java and made that an open book .
and then jeffrei elkner , who is a high school teacher in virginia , he took that and turn it into a python book .
and then allen downei switch from teach java to python .
and then he took hi own book back , and everyon kept edit thi book and make it better .
it's call think python .
but thei publish it with an open , free , remix licens .
and so a coupl year ago , i wa teach si <num> and need a book .
and i thought i would write my own book , but a colleagu of mine , atul prakash , said you should look at think python .
so i did .
there were lot of thing i like about the book .
it wa short and to the point .
but it had a few too mani comput scienc thing in it , so i start rewrit the book and chang the part that i didn't want .
and i wa abl to modifi that book dramat in about <num> dai .
and by januari , i wa abl to produc a book in time for my class .
but the problem wa i need physic book .
and that's where folk from the univers of michigan librari came in .
terri geitgei run a facil call the espresso book machin , which is an on demand print servic , which basic meant that i could walk in with a print readi pdf , and then thei would be abl to print that in just a few hour .
and so in less than <num> dai , i went from no book to physic book .
all with a bunch , help from a bunch of peopl .
in addit to the book , open michigan ha help me .
open michigan is our group on campu that's respons for open educ resourc .
and , work with folk like dave malick , i've been train to build copyright free materi , both the book and the slide .
becaus we teacher ar alwai drag stuff from googl and stick it in our , in our slide and and violat copyright without even know it .
and so i've been train to make slide that i can actual releas to you , and in a wai that make it so that you can reus them without violat copyright .
anoth thing that i need to sai thank to is the folk that built the ibook version of the book .
jason coleman , of the univers of michigan librari , he built that .
it took a long time .
it's got awesom video , it's got in book exercis , etc .
it's onli for the ibook , but it's free , and it's realli quit awesom .
univers of michigan leadership around our coursera effort , martha pollock , jame hilton , gautam kaul , jame devanei , all have given us an environ where it's fun to explor and to plai and experi with what it mean to work in thi new environ .
tim o'brien , who's right behind the camera , run our facil here .
and it's a lot of fun to be part of thi and have all these neat light and camera and stuff to plai with build materi for you .
my manag at the school of inform , dean tom finholt and beth yakel , were veri help in get thi cours to come to live becaus there's lot of paperwork to fill out on campu , lot of procedur to do it , and so have manag that's veri support and help is realli veri essenti .
and my fellow faculti member , like atul prakash , who help me get start on the think python book .
and tanya rosenblat and paul resnik both have us earli version of my softwar and sort of toler as i got my softwar work , the softwar that we're now us in the cours .
and michael hess is on of our technic support peopl .
as well as a fellow faculti member here at the school of inform .
and he ha given me access to a veri larg server that help in make sure that i can us the technic resourc that i need at no charg , so that we don't have to charg for the cours .
the skulpt softwar is an essenti part of thi class .
it's also a part of the rice class as well .
it is what allow you to write python and run it in the browser .
it itself is an amaz piec of technolog .
and the leader for that is a fellow name brad miller , from luther colleg , who also teach python there .
and liter without brad , i don't think there would be ani wai for me to have built thi cours .
i need to thank everybodi from coursera who's help me and mentor me and help me understand what it mean to teach at scale .
daphn and andrew have been veri support .
i complet agre with all of the thing that we want to do in term of get thi teach as wide distribut as we possibl can .
pang wei , earli on , wa on of the good mentor that realli help me understand that teach at scale is not the same as teach in the classroom .
how assess need to be differ , how interact need to be differ .
kate mcshane urban is our current , she's like our , she watch over everyth that goe on and make sure that everyth work .
i've made a number of realli nice friend on the technic team who have help me build the learn tool interoper that let me plug thing like map and autograd and just plug stuff in .
brandon saeta and nick dellamaggior ar two of the folk that have realli help make all that work .
thei're also respons for mani of the integr strategi around coursera .
and so that's realli cool .
anoth group that i need to thank come from ieee comput magazin .
i'm an author , column author for ieee comput magazin , and i write thi monthli column call comput convers .
and it's part of what fund me to travel around and make these video that i share with you in the class .
the chief editor , ron vetter ; jennif stout who's a , doe most of the edit of the column , and kerri clark walsh .
what's cool about ieee comput is these ar copyright materi , but thei have given me permiss to share them with you at no charg becaus thei just want you to have thi inform .
i also need to thank sue , mazen , and mauro , my commun teach assist .
thei have been with me sinc i start internet histori , technolog , and secur and for program for everybodi , thei have been veri deepli involv in the behind the scene prepar .
and so month befor the class start , thei were look over my materi .
and even though the materi have , alwai have room for improv , the fact that thei're as good as thei ar when we , when we releas them is is due in a larg part to the commun teach assist' help .
i also need to thank all the student in my class who have , who've dealt with draft version of book and half finish softwar , like si <num> , si <num> , si <num> , si <num> , and si <num> .
in mani wai , thei were the guinea pig for the student experi .
but , realli , the most import folk to thank ar you , the coursera student .
i just went through <num> or <num> peopl's name , and thei help me .
thei help produc what you're experienc .
i don't think thei help me just becaus thei like me .
thei help me becaus it's kind of the natur of what we do .
we ar at an institut that valu teach .
and when someon like me come to a fellow person at the univers of michigan and sai , i need help to make my teach better , peopl help .
and frankli , we've been do thi for quit some time and what's realli neat now , is we're do it for a much larger group of peopl .
and so it's realli you , the coursera student , that make all thi effort worthwhil .
so , in close , i just want to thank you , and i'll see you in class .
hello and welcom to program for everybodi .
my name's charl sever i'm a clinic associ professor at the univers of michigan school of inform .
and i'm your instructor for thi class .
i'm glad you're here .
so the first thing i alwai like to talk about when i teach a class is who should take the class .
thi class is a begin class .
thi class is a begin class for beginn .
thi class is a begin class for peopl who don't know anyth about program .
and so , i am commit to teach you the basic , and not assum that you know anyth .
there's no math in thi .
there's a light amount of work everi week .
i'm focuss more on learn than i am about sort of get you to be a profession programm .
so i also like to talk a littl bit about who i am .
if you like , there is a url here for the ted talk that i gave , the tedx talk that i gave about mooc .
and you can kind of see the philosophi of how i do mooc .
i think i might have been wear thi exact same jacket and thi exact same shirt for the mooc .
so i won't go into that .
you'll see that i am veri passion about a few thing .
on of the thing that i am veri passion about is open .
and i wrote a book about an open sourc project call sakai , which is a open sourc learn manag system that's us by mani peopl around the world .
i am commit enough that i even have a tattoo .
i have , my research area is teach and learn tool and expand sort of the wai we can us technolog to teach in better and better wai .
and my work with sakai as well as my work with im learn tool interoper is part of that .
thi tattoo that you see ha sakai at the middl .
and it ha , in a circl , all of the the , my collabor that have implement im learn tool interoper .
although there's hundr of other , there's onli a few that got tattoo , and at coursera .
and we're go to be us it in thi class , also implement thi im learn tool interoper , and so you will see how i can connect tool that i build , plug them deepli into coursera , and realli improv , i think , the pedagogi of my cours .
if you want to get a sens of my sens of humor , just googl ipad steer wheel mount .
some peopl think thi is seriou .
i call it satir , but i think good satir is the satir that you can't alwai tell if it's satir or not .
so , i want to talk a littl bit about my person veri first program experi becaus it realli ha color my approach to teach from that veri first moment .
so i came out of high school in <num> .
and , we didn't have comput , the famili didn't have a comput .
i did have a hand calcul in my senior year in high school and i thought that wa pretti amaz .
and so i went to colleg in the fall of <num> and an advisor said you should take on of these program thing .
we're put everybodi into the program class .
and i said oh whatev , i don't know , sure .
so , i wa a veri good student in high school but in colleg i wa amaz that thei would let me skip class and thei never took attend .
and i thought i should experi with how well thi work .
and thi program class wa at <num> <num> in the morn .
and so i wa usual veri tire and i didn't realli want to get up in time to go to a <num> <num> class .
so i start skip the class .
and on time i had that thing that we're all afraid of when we're attend a class , and that is i show up at a midterm and i didn't know it wa the dai of the midterm .
and thei hand me a piec of paper and i had no idea what ani of the word meant becaus i'd skip so mani class .
but somehow after that i somehow recov .
and , and a few short week later i actual figur out what those word meant .
and then i realiz , as ani <num> year old might , that thi program thing is kind of fun , becaus if i commun properli with thi devic it will do whatev i sai .
and i did a lot of cool stuff and i caught up in the class and becam on of the best student in the class , all in on semest .
and at the end , i had pull my grade up from a fail to a d .
but at the same time i wa hook , and i immedi chang my major to comput scienc , and then i went on to finish my bachelor's , master's , and phd , all insid comput scienc .
and so i understand that when you first meet program , you're like to be confus .
i know i wa confus , and i turn out to be pretti good at it .
but my first reaction wa how confus i wa .
so accept the fact that you're go to be confus .
relax , enjoi it .
you're go to learn a lot .
and you might actual realli like thi even though you think you're not go to .
so let's talk a littl bit about the cours .
the cours is realli base on a textbook i have written call python for infomat .
and thi book is <num> free .
everi copi is , all the electron format , pdf , mobi , epub , html , all free .
and you can bui a print copi of the book if you like , but you don't have to .
for <num> . <num> , that's all the book cost .
it's not a veri thick book .
it's <num> . <num> , but don't bother bui the book if you don't want to bui the book .
and what's realli cool is thi is not an arrang with the publish .
at the end of the class you can keep these copi and you can give these copi to other peopl as well .
so thi is truli open materi for thi cours .
in addit , my slide , audio , video , and even my autograd softwar is all either open sourc or licens with a creativ common attribut licens .
and that mean that you can take the video , the powerpoint , the whatev .
we give you a websit that will give you all these materi in an easili download and remix format .
and thi websit is part of a movement we have here at the univers of michigan , like mani other univers , that we call open michigan , and it is the idea of take cours , not just thi cours but hundr and hundr of cours and put up the materi .
i have spent extra time to make my materi in a form that you can actual reus and remix and adjust them to your need .
becaus i realli want to empow teacher .
we're all go to learn in thi class .
but what i think is the most import thing is to creat a whole gener of teacher who ar capabl of teach a basic program class local , perhap in their own languag in small class .
these giant class ar great becaus thei get the word out .
but what we do is , we creat a larg learn commun , and some peopl do well in that , but not everybodi doe .
and so , if , if i truli want to believ in get program to be truli for everybodi , i need to get to the point where we have lot of teacher , not just me teach lot of peopl .
although i'm realli enjoi teach lot of peopl .
and so there's a link there , i'll have a link in the class that will link you to the open educ resourc in the class .
so as i mention i'm , my whole research is plai with new pedagogi and new technolog in teach and learn .
i want to experi with thi .
i want to , the thing that's cool about mooc and coursera is the abil to teach at scale which is , i think , is unpreced and it make me as a teacher think veri carefulli like wait a second , how can i teach at scale ?
can i still do a good job teach at scale ?
and i find that i have to start build cool technolog .
so mayb you've not taken anoth coursera cours , but here's our coursera user interfac .
the video lectur tend to be the core of it .
and interspers among the video lectur you will see littl assign , and the assign have , there will be quizz as well .
but the assign end up with thi termin icon and you click on them .
there's also sort of a video that goe along with each assign .
when you click on the termin video you come into thi littl autograd .
and so i've built thi autograd , thi autograd is softwar that i have creat that autograd your program assign and then automat instantli send a grade back to coursera .
and if you look at thi autograd , and i'll talk more about thi in the cours , you type your python code here .
i hope you'll actual be abl to run the code on your laptop and then just past it in here , but some peopl will actual just write all the code insid here .
you run the code by press check code and your output come here , the defin output , and the problem is there as well .
and the program automat check to see if your output match .
and it look at your code a littl bit to make sure you're not cheat , for exampl .
but it actual finish grade and when you submit your grade , you get a grade .
the other thing that i've done is , an exampl of thi is in the week <num> extra credit .
so thi first week even ha extra credit in it .
i'm not go to sai everyon ha to have a laptop and everyon ha to instal python , but if you have a laptop and can instal python , i would realli love it if you did .
so i'm go to give you extra credit if you do that .
and the wai you'll prove that you've actual successfulli instal python is take a coupl of screenshot .
and upload them to what i call the , my social peer grade system .
and what you'll do is you will upload two screenshot .
it tell you what to do .
upload two screenshot and then student will grade each other's screenshot .
now if you've us coursera befor , you know that the peer grade take a while .
thi peer grade , if someon els ha alreadi turn in their assign you can upload your assign , and then within a coupl of minut grade the other assign that ar wait to be grade , and then you're done !
and so , as long as you're not the first person or the last person , you get almost instant feedback and you can almost instantli finish your grade and be complet done with the assign , becaus realli thi is not a hard assign .
most coursera peer grade is write assign that ar a littl more challeng .
thi is realli easi .
you just gotta check somebodi's screenshot to see if thei did the right thing .
so we will have sever assign that ar done through thi social peer grade .
and my goal , and i built thi softwar .
and my goal is to make it so that you could submit your stuff , you could do some grade , and you could be done in <num> or <num> minut .
rather than peer grade take a long time .
so thi is an experi and it's someth that i wa abl to build .
becaus for the pedagogi of thi cours i have a lot of these like check off assign where it's like did you do it , and it's realli easi to grade .
you look at it and go like yeah , you did the right thing .
or you'd sai no thei didn't , and give them some feedback .
so , and then , even the grade , you're go to have to look at thi littl page to see the grade that you got in these extern host tool .
as i mention , i would like you to instal python if you possibl could .
it's option .
you will be abl to do whole cours on a , on a phone , although write all thi code on a phone is crazi .
but , you know , there ar crazi peopl in the world .
and so i will give you thi extra credit assign .
some peopl might ask what version of python we're us .
there ar python <num> and python <num> , and we're go to be us python <num> for thi class .
all the skill that you learn in python <num> will transfer if you realli need to do python <num> .
there's tini chang .
the market is slowli but sure transform from python <num> to python <num> anoth technic problem is that i know some of you live in countri that don't allow the us of youtub .
and so i'll have some video that i cannot includ in coursera becaus of copyright restrict , but i can point to them in youtub .
and you'll just not be abl to see them .
and don't worri too much about that .
thei're usual cute or funni or instruct , but thei're not essenti .
so everyth that's essenti i will have in the class , and if you're in a countri that can't us youtub , i am sorri about that .
but i have not put anyth that's essenti for the class up on youtub .
so let me tell you a coupl other thing about the cours .
on of the thing that is realli cool about coursera is the notion of commun teach assist .
sue , mauro , and mazen ar my commun teach assist .
thei come with me from my internet histori and technolog class .
thei're my commun teach assist there , and thei've help me kind of make thi class , and that's realli cool .
there will be mani commun teach assist .
these three ar my lead .
and there will be mani commun teach assist , and you're go to find that it's realli essenti what thei do in the class .
especi thi first time through , caus we're go to need to be watch all kind of thing happen .
anoth thing that i do that's kind of interest and cool is what i call face to face offic hour .
i have quit an activ travel schedul .
and when i can , as often as i can , around the world wherev i happen to be give a keynot speech or whatev , i go to a coffe shop or some other public place , and sai from ten to noon , i'll be here at thi coffe shop .
at a starbuck in amsterdam , we had <num> peopl show up at the starbuck in amsterdam .
where els ?
on's in london there , that's barcelona , and that's seoul , korea .
we had three peopl show up at seoul , korea .
and and so i've got a seri of video from thi , it's call offic hour . dr chuck . com .
and it'll redirect you to a youtub playlist .
and , if you come to offic hour i have a sticker for you .
i will give you person a sticker which is the logo for the cours .
so you can look forward to that .
when we meet in person i will have a sticker for you .
anoth thing that i've been do late , not so much to help in learn the in cours , but becaus there's a lot of public discuss about mooc .
and i think sadli most of the peopl who ar do the public discuss about mooc , other than those who ar actual involv in it , most of the peopl do the public discuss about mooc or the public talk about mooc ar not actual involv in them and so thei ar sai realli uninform thing about mooc .
and so on of the thing that i'm passion about is get your voic to be heard .
now i have thi youtub channel , and if you ar will , go to the voic . dr chuck . com and add , send me via twitter or someth a link if you record on of these littl short two minut video .
and you can take a look at the video .
thei talk about who you ar , what your educ is , and what you like about mooc .
thei're , thei're kind of differ .
thei don't all have to be the same .
but if you're interest , i'd love to see your , you as part of my littl voic of the , of the student in mooc project .
so program cours can be veri challeng .
on of my goal is to teach you how to take a program class .
so that you can take other program class on coursera or elsewher and be success in those class .
i think program is wonder , program for me is joy and feel like artist and i just , i get endorphin .
and some peopl look at a sunset and get excit , i look at realli beauti code and i get excit .
but part of the problem with program is if you don't learn the languag or don't , you don't see the beauti until you kind of understand the basic , so it's a littl clunki at the begin .
and even the first like five week of thi class you might be scratch your head and think like , what the heck is he talk about ?
and so the kei thing is not to try to memor everyth .
the kei thing is to learn or accept the fact in that the first half of the class i'm describ for you a big pictur that you're not go to understand until you understand all the small piec .
so i'll talk in chapter two , three , four , five , and six about these thing that seem small and insignific .
and it's realli not till chapter seven through ten that the piec start to come togeth and you go , like , i get it .
so it help sometim to look forward and backward in the materi .
don't just look at the paragraph .
if you're look at a paragraph and it doesn't make sens , forget about it , come back later .
look wai down at the end of the book , look at the begin of the book .
just bounc around , ask peopl .
if you're have troubl on assign four , go back and redo assign on or assign two .
and that's becaus there's no wai that i can , on step at a time , teach you with perfect understand , becaus i'm teach you a big complex pictur with littl piec of view at a time .
and it doesn't make sens until you've made it all the wai through .
so if it doesn't make sens in week seven , we've got a problem .
if you're a littl confus , just trust me .
just learn what i'm try to teach you , and don't just do the homework .
becaus you will find that if you do the homework for assign week on it's like , well that wa easi .
and you don't learn anyth .
and then you do assign two , and that wa easi .
assign three , that wa a littl harder .
and you didn't look at the lectur , didn't read the book , or didn't do anyth ?
then it's , week four will be harder , and then you'll be like what the heck is he talk about ?
and then you'll be lost .
so learn what i am try to teach you .
trust me , trust me that , that what i am tell you is go to come togeth and make sens at the end .
so learn what i'm try to teach you , at the moment i'm try to teach you .
so don't just do the homework and go like , whew , i'm done .
thi is not a regular class .
thi is a class where you're suppos to learn someth .
so trust that i put onli what i think is essenti in thi class and i'm not go to wast your time .
but don't take that as i'm just go to do the homework and not learn anyth , becaus at the end of the dai you won't learn a thing , you know , if you just do the homework .
okai , if you feel stuck take a break , relax .
concentr , think more deepli , beat yourself up , that doesn't help .
go take a walk .
come back .
it'll make more sens .
ask somebodi .
we just want you to learn , on wai or the other .
okai ?
the grade and the homework , that's go to be easi .
okai .
so thi is the first time the class ha been taught , first time .
i am us all kind of crazi technolog .
i'm us featur in coursera that no on's ever us befor that just were invent for , not for me , but for mani peopl , but i'm the first on that's go to us it .
we're plug these tool in , i'm build new autograd , i'm build all these thing .
it could mess up , it could fail .
i could be confus .
i could be scrambl and fix .
i could lose a bunch of grade .
but if we have a meltdown , relax .
i will watch the meltdown , i will fix the meltdown , i will adjust deadlin .
stick with me on thi , okai ?
help me through it .
help tell me how to make thi softwar better .
i know the first time there's go to be problem .
but after that i hope that we have softwar and a methodolog that everybodi can us .
and you can tweet me .
i'm alwai watch twitter even when i'm sort of out of the countri .
so tweet me if someth seem to be broken and i will get right on it and i will try to fix it as soon as possibl .
and when you tweet me , i'll end up with some screen like thi .
i mean , i liter love fix the code that you're work with .
and , i mean , i just get a charg out of it , like , woah , it's not quit right but i figur out what's wrong and like and it's all work for you .
and so , so thi , for me , is fun .
the meltdown's not upset to me .
i hope we have no meltdown , then i'll be veri proud .
but if we have a meltdown , i will be on it and i'll fix it , trust me .
and then when we get all done with thi , there's a graduat ceremoni .
there's a graduat ceremoni toward the end of the class .
i tape thi graduat ceremoni with my good friend curt bonk and , and so look forward to the , stick with it , and look forward to the graduat ceremoni .
and so that's pretti much all i have for thi begin lectur .
i am glad that you're stick with it and i'm glad that you're give thi a try .
and i realli look forward to you , interact with you , on thi class .
hello , and welcom to chapter eight python list .
so now we're sort of go to start take care of busi .
we ar do , make list and dictionari and tupl and realli start manipul thi data , and do real data analysi , start the , lai the proper work for real data analysi .
as alwai , these lectur , audio , video , slide , and even book ar copyright creativ common attribut .
so , list , dictionari , and tupl , the next real three big topic we're go to talk about , ar collect .
and we've been do list alreadi , right ?
we've been do list when we were do for loop .
a list in python is someth that ha a squar brace .
thi is a constant list .
now , when i first talk to you about variabl , i sort of oversimplifi thing .
i said if you put like x equal two , and then put x equal four , the two and the four overwrit each other .
a collect is where you can put a bunch of thing in the same variabl .
now , i have to have a wai to find those thing .
but it allow us to put multipl thing in more , more thing , more than on thing in the variabl .
so , here we have friend , that ha three string , joseph , glenn , and salli .
and we have carryon that ha sock , shirt , and perfum .
so that's the basic idea .
so what's not a collect ?
well , simpl variabl .
simpl variabl ar not collect , just like thi exampl .
i sai x equal <num> , x equal <num> , and print x , and the <num>'s in there and the <num> is somehow gone .
it wa there for a moment , and then it's gone .
and so that's a normal variabl .
thei're not collect .
you can't put more than on thing in it .
but when you put more than on thing in it , then you have to have a wai to find the thing that ar in there .
we'll , we'll get to that .
so , we've been us list constant for the last coupl of chapter just becaus we have to us list constant .
you know , so we us , in the for loop chapter , we did list of number .
we have done list of string , that's string , red , yellow , and blue .
and you don't have to necessarili , you don't necessarili have to have thing all of the same type .
thi is a three item list , that ha a string red , the number integ <num> , and <num> , which is a float point number .
and here's an interest thing , just as a side note .
thi show that float point number ar not alwai perfectli repres insid of the comput .
it's sort of an artifact of how thei work .
and thi is an exampl of <num> is realli <num> point na , na , na , na , na .
so , but , don't , when you see someth like that , don't freak out .
float point number ar the on that show thi behavior .
so , interestingli , you can alwai , although we won't put a lot of energi into thi , you can also have an element of a list be a list itself .
so thi a outer list that's got three element .
<num> , <num> , and then a list that's <num> and <num> .
so , if you look at the length of thi , there is three thing in it .
not four , three .
becaus the outer list ha <num> , <num> , <num> thing in it .
and an empti list is bracket , bracket .
okai ?
like i said , we have been go through list all along .
we have iter variabl for i in .
thi is a list .
we've been us it all along .
similarli , we've been us list in definit loop , ar a great wai to go through list , for friend in friend , there we have goe through three time , out come three line , with the variabl friend advanc through the three success item in the list .
and awai we go .
so , again , list ar not complet foreign to us .
now , just like in a string , we can us the index oper , the squar bracket oper , and we can look up item in the list .
sub on , friend , sub on .
not surprisingli , us the european elev rule , the first item in a list is sub zero , the second item is sub on and the third on is sub two .
so here when i print friend sub on i get glenn .
which is the second element .
just like string .
so onc you kind of know it for string , list and the rest of these thing make a lot more sens .
just , rememb that we're in europ , and thing start with zero .
some thing in these data item that we work with ar not mutabl .
so for exampl , string , when we ask for a lower case version of a string , we're given a copi of that string .
and that's becaus string ar not mutabl , and we can see thi by do someth like sai fruit sub <num> equal lowercas b .
now you'd think that that would just chang thi to be a lower case b , but it doesn't , okai ?
it sai string object doe not support item assign which mean that you're not allow to reassign .
you can make a new string and put differ thing in that new string , but onc the string ar made , thei're not changeabl .
and that's why when we call fruit . lower , we get a copi of it in lower case .
and so x is a copi of the origin string , but the origin string , onc we assign it into fruit , is unchang .
it can't be chang .
list , on the other hand , can be chang , and we can chang them in the middl .
thi is on of the thing we like about them .
so here we have a list <num> , <num> , <num> , <num> , and <num> .
then we sai lotto sub two .
of cours , that's go to be the third item .
lotto sub two is equal to <num> .
then we print it and we see the new number there .
so all thi is sai is that we can chang them , right ?
string no , and list ye .
you can chang list , but you can't chang string .
so the len function , we've us it for sever thing , we can sai you know , us , len is us for , for string and it's us for list as well .
so the same function know when it paramet is a string .
and when it paramet is a string , it give us the number of charact in the string .
and when it is a list , it give us the number of element in the list .
and just becaus on of them is a string , it's still on element from the point of view of thi list .
so it ha on , two , three , four four item in the list , okai ?
so , the rang function is a special function .
it's probabl about time to talk about the rang function .
the rang function is a function that gener a list , that produc a list and give it back to us .
and so you give the rang function a paramet , how mani item you want , and the rang function creat and give us back a list that is four number start at zero , which is zero up to , but not includ three .
sound familiar ?
yeah .
zero up to but not , i mean zero up to , but not includ four .
and , and so the same thing is true here .
so , we can combin the len and the rang to sai , you know , to sai okai , well len friend , that's three item , and rang len friend is <num> , <num> , <num> .
and it also correspond exactli to these item .
so we can actual us thi to construct loop to go through a list .
we alreadi have a basic for loop , right ?
we basic have a for loop that is our , that , that said that for each friend in friend .
and out come , happi new year , glenn and joseph .
if we also want to know where , what posit we're at as the loop progress , we can rewrit the exact same loop a differ wai .
and make i be our iter variabl .
and sai i in rang len friend , that turn thi into zero , on , two .
and then i goe zero , on , two .
and then , we can in the loop , look up the particular friend that is the particular on we ar interest in , us the index oper , friend sub i .
and then print happi new year .
so these two loop , these two loop ar equival .
these , oop , not that on .
thi loop and thi loop .
thi loop is prefer , unless you happen to need thi valu i , which tell you where you're at .
in case mayb you're go to chang someth , you're go to look through someth and then chang it .
so , but , but , for what i've written here , thei're exactli equival .
prefer the simpler on , unless you need the more complex on .
thei both produc the same kind of output .
we can concaten list , much like we concaten string , with plu .
and you can think of the python oper's look to it right and to it left and sai oh , those ar both list , i know what to do with list , i'm go to put those togeth .
and so that produc a two , three long list becom a six long list with the first on follow by the second on concaten .
it didn't hurt the origin , a .
c is a new list , basic .
we can also slice list .
feel a lot like string , right ?
everyth's kind of like string .
for loop like string , concaten like string , and now slice like string .
and it is exactli the same .
so on up to , but not includ .
just rememb , up to , but not includ .
the second paramet , is up to but not includ , so that start at the sub on , which is the second on up to but not includ <num> , the third on , so .
thi is <num> , <num> , and <num> so that's <num> comma <num> .
start at the first on , up to but not includ the third on .
we can similarli elimin the first on , so that's up to but not includ the fourth on .
start at zero , on , two , three , but not includ four .
so that's thi on .
if we go three to the end , and again , rememb that there , start at <num> , so <num> to the end is <num> , <num> , <num> , <num> to the end .
the number <num> doesn't matter .
so that's <num> , <num> , <num> .
and the whole thing , that's the whole thing , so these two thing ar the same .
so slice work like string , start and up to but not includ is the second paramet .
there ar some method , and you can read about these onlin in the python document .
we can us the built in function .
it doesn't have a lot of us in sort of how we run , when we're run program but it's kind of of us .
i like it when i'm type interact .
like , what can thi thing do ?
so i make a list , list is a uniqu type , and i sai , with dir i sai what can we do with it ?
well , we can append , we can count , extend , index , insert , pop , remov , revers and sort .
and then you can sort of read up on all these thing .
i'll show you just a coupl .
we can build a list with the append .
so thi syntax here , stuff equal list , that's call a constructor which sai give me an empti list .
you could also sai bracket , bracket for an empti list .
whatev , you gotta make an empti list and then you call the append .
rememb that list ar mutabl , so it's okai to chang it .
so we're sai , okai , we start with an empti list .
now append to the end of that , the word book .
and then append to that , <num> .
wait a sec .
that's a mistak .
that's a mistak .
so i have to fix thi mistak .
so watch me fix the mistak .
poof .
now my thing is magic fix .
isn't that amaz .
i have magic power when it come to slide fix .
i just snap my finger and the slide ar fix .
so here we go .
we append the <num> , and we print it out .
and it's got book and <num> , emphas the fact that thei don't have to be the exact same kind of thing in a list .
then later we append cooki and then it's book , <num> , cooki .
okai ?
so thi append , we won't do it in line like thi so often , we'll tend to do it in a loop as we're build up a list , but that's the wai you start with an empti list and then programmat grow it .
we can ask , much like we do in a string , we can ask if an item is in a list .
so here is a list call some , with these number in it .
it's got five number in it .
is nine in some ?
true , ye it is .
is <num> in some ?
fals .
is <num> not in , that's a leg , a legal syntax , that is legal syntax .
is <num> not in some , ye it's not there , okai ?
thei don't modifi the list , don't modifi the list , thei're just ask question .
these ar logic oper often us in if statement or while , some kind of a logic that you might be build .
okai , so list have order .
so when we were append them , the first thing went in first , the second thing went in second , et cetera , et cetera .
and we can also tell the list to sort itself .
so on of the thing that we can do with a list , now we're start to see some power here , is sai , sort yourself .
thi is a list of string .
it can sort number , it can sort lot of thing .
friend . sort , that sai hei there , dear friend , sort yourself .
thi make a chang .
it alter the list , and put it , in thi case , in alphabet order , glenn , joseph , and salli .
it is mute , it wa , it's , it's been modifi , and so friend sub on is now joseph becaus that's the second on .
okai ?
so the sort method sai sort yourself now , sort yourself , and it sort and then it stai sort .
so you're go to be kind of tick about thi particular slide .
becaus there's a whole bunch of built in function that help with list .
and , there's max , there's min , there's len , variou thing .
and so we could , all those loop that i told you how to do , i wa just show you that stuff becaus i thought it wa import .
thi the simplest wai to go through and find the largest , smallest , and sum , et cetera .
so here's a list of number .
we can sai how mani ar there .
that's the count .
we can sai what's the largest , it's <num> .
what's the smallest , that'd be <num> .
what is the sum of the run total of them all ?
<num> .
if you rememb from a few lectur ago , these ar the same number .
and what is the averag , which is , sum of them over the length of them , okai ?
so thi make a lot more sens and if you had a list of number like thi , you would simpli sai what's the max , you wouldn't write a max loop .
i just did that to kind of demonstr how loop work .
demonstr how loop work .
so here is a wai that you can sort of chang those kind of program that we wrote .
so there's two wai to write a sum program .
let's just sai instead of the data be in a list , we're go to write a while loop that's go to read a set of number until we sai done , and then comput the averag of those number .
okai , so let's sai thi is our problem .
read a list of number , wait till the word done come in , and then averag them .
so here's a littl program that doe that .
we creat total equal zero , count equal zero .
make a infinit loop with while true .
and then we ask to enter a number .
we get a string back from thi , rememb raw_input alwai give us string back , and then if it's done , we're go to break .
thi is the version of the if that doe not requir an indent .
we just put the break up there .
and so that get us out of the loop when the time is right .
so when the time is right over here .
and then , we convert the valu to float .
we us a float to convert the input to a float point number .
and then we do our accumul pattern , total equal total plu valu , count equal count plu on .
so thi is go to run .
these number ar go to go up and up and up and up .
and then we're go to break out of it , calcul the averag , and then print the averag .
becaus that's a float point number , so now the averag is a float point number .
so that's on wai to do it .
right ?
that would be on wai to write a program that doe an averag , is keep a run averag as you're read the number .
but there's anoth wai to do it , that would exact , work exactli the same wai , and thi is when you can start us list .
so you come in , you sai i'm go to make a list of number , just a mnemon name , numlist , is an empti list .
then i creat anoth infinit loop that's go to read for enter a number .
and if it's done , break .
that get us out of it .
convert the valu to an int .
convert the valu to a float , the input valu to a float .
and then append it to the list .
so now the list is go to grow , each time we read a number the list is go to grow .
howev mani time we add the number is how mani thing ar go to be in the list .
so in thi case , when we're at thi point and we type done , there will be three number in the list , becaus we will have run append three time .
we'll have append <num> , <num> , and <num> .
we'll have them sit in a list .
and we will have exit the loop .
so now you sai , oh add up all the number in that list , and then divid it by the length of the list .
and print the averag .
so these two program ar basic equival .
the onli time that thei might not be equival wa if there wa ten million number .
thi would us up <num> megabyt of your memori , which is actual not a lot of memori on some comput .
but if memori matter , thi doe store all those number .
thi on actual just run the calcul .
so if there's a realli larg number of number , thi would make a differ , becaus the list is grow and keep them all , sum them all at the end .
thi is actual store veri littl data .
but for reason size number , like thousand or even hundr of thousand of number , these two approach ar kind of equival .
and then sometim you actual want to accumul someth a littl more complex than thi , you want to sort them or look for the maximum and look for someth els .
who know what , but the notion of make a list and then append someth to the list each time through the iter , and then do someth with the list at the end is a rather power pattern .
so thi is also a power pattern , thi is accumul pattern where we just have the variabl accumul in the loop .
thi on is on where we accumul the data in the loop and then do the comput all at the end .
the , certain situat will make us of these differ techniqu .
okai .
so , connect string and list .
so there's a method , a capabl of string that is realli power when it come to tear data apart .
it's call the split .
so here is a string with three word and it ha blank in between here .
and abc . split sai pars thi string , look for the blank , break the string into piec , and give me back a list with on item for each of the word in the list as defin by the space .
okai ?
so , it take , break it into three piec and give us that back in a list .
thi is veri power .
okai ?
so we're go to split it and we get back a list .
there ar three word , and the first word , stuff sub zero , is with .
so there's a lot of pars go on here .
we could do thi with for loop and a lot of other thing .
there would be a lot of work in thi split .
given that thi is a realli common task , it's realli great that thi ha been put into python for us .
okai ?
so split break a string into part and produc a list of string .
we think of these as word , we can access a particular word or we can loop through all the word .
so here we have stuff again and now we have a , a for loop for each of the , that's go to go through each of the three word .
and then it's go to run three time .
now chanc ar good we're go to do someth differ other than just print them out .
but you see how that you quickli can take a split follow by a for , and then write a loop that's go to go through each of the word , without work too hard to find the space .
you let python do all the hard work of find the space .
okai ?
so let's take a look at a coupl of sampl .
just a coupl of thing to teach you a littl more about split .
split look at mani space as equal to on space .
so , if you split a lot blank , blank , blank of space , it's still just throw awai all the space and give us four word .
on , two , three , four and throw awai all the space , becaus it assum that's what we want done .
so that's nice .
you can also have split , you can also have split , split on some other charact .
sometim you'll be get data and thei'll have us a semicolon , or a comma , or a colon , or a tab charact , who know what thei've us , and your job is to dig that data out .
so you can split , base on the differ charact .
here , if we're split normal with , with thi is a normal split .
it's not go to see the semicolon , it's look for a space .
and so all we get back is on item in the string , with the semicolon .
but , if we switch , and we pass semicolon as a paramet , in as as paramet to split , then it will know to split it base on semicolon , and give us first , second , and third back .
okai ?
and then it give us three word .
so you can split either on space , or you can split on a charact other than a space .
okai ?
so , let's take a look at how we might turn thi into some of our common assign that we have in thi chapter , where we're go to read some of the mailbox data .
okai ?
so , here we go with a littl program .
first three line , we write these a lot .
open the file .
write a for loop to loop through each line in the file .
then we're go to strip off the white space at the end of the line .
on , two , three .
do those all the time .
and we're look for line , if you look at the whole file , we're look for line that start with from , follow by a space .
so if the line doe not start with from follow by a space , that's a space right there , continu .
so that's a wai to skip all the line that don't look like thi .
there're thousand of line in thi file and just a few that look like thi .
okai ?
so we're go to look and we're go to try to find what dai of the week thi thing happen on .
so , so we're throw awai all the line with thi littl bit of code .
then what we do is we take the line , which is all of thi text , and then we split it .
and we know that the dai of the week is word sub two .
so thi is word sub zero , thi is word sub on , and thi is word sub two .
so thi is word sub zero , sub on , and sub two .
and so , all we have to do is print out the sub two and we get , we throw awai all the line except the from line .
we split them and take the sec , uh , the , the third word or word sub two and we can quickli quickli creat someth that's extract the dai of the week out of these .
okai ?
so it's , it's , i mean , it's quick , becaus split doe the tricki work .
if you go back to the string chapter , you saw that we did a lot of work to get thi to happen .
so here's even anoth tricki pattern .
so let's sai we want to do what we did at the end of chapter six , the string chapter .
let's sai we want to get back thi littl bit of data .
okai ?
so , can look at thi and sai , okai , let's split thi .
and thi will be zero , on , and two , and three , and four , and five , and six .
we're split it base on space .
then the email address is word sub on , right ?
so that email address is thi littl bit of stuff becaus it's in between space , right ?
so that's what we pull out .
the email address is word sub on .
we've got that .
so that's sit in thi email address variabl .
then we realli , all we want , we don't realli want the whole thing , we just want the part after the at sign , and we can do a lookup for the , oop .
we can do a lookup of the at sign .
but you can also then do a second , come back , come back .
there we come .
you can also do a second split .
okai ?
so we're take thi variabl here , email , which is mere thi littl part right here .
and we ar split it again , except thi time we're split it base on a at sign .
which mean it's go to bust it right here , and find us two piec .
so piec now is a list where the sub zero item is the person's name and sub on item is the host that their mail address is held from .
okai ?
and so then all we need to know is piec is sub on , and piec sub on is thi gui right here .
so that's piec sub on , and so we pull it out .
so if you go back to how we did it befor , we were do search , we were search some more , and then we were take slice .
thi is a littl more eleg , okai ?
becaus realli , we split it and then we split it , and we knew what piec we were look at .
so thi is what i call the doubl split pattern , where you split a string into a list , then you take a thing out , and then you split it again .
depend on what data you're look for .
thi is just a techniqu , it's not the onli techniqu .
okai , so that's list .
we talk about the concept of a collect where list have multipl thing in it .
definit loop , again , we've seen these thing .
we're kind of , it look a lot like string except the element ar more power and thei're more mutabl .
we still us the bracket oper and we redid the max , min , and sum .
except we did it in , like , on line rather than a whole loop .
and someth we're go to plai with a lot is us split to pars string , the singl split , and then the doubl split is the natur extens of the singl split .
so , see you in the next lectur , look forward to talk about dictionari .
hello , and welcom to yet anoth work exercis .
i'm the author of the book python for informat explor inform , as well as your host for thi particular work exercis .
as alwai , the book , thi audio and video , and these slide ar copyright creativ common attribut , and i hope you find excit and interest wai to reus them and re purpos them and add to them .
so pythonlearn . com is my support websit for the python for informat book .
and if you , hopefulli by now you've got all thi work out , but it doe teach you how to get start .
so that , how all the thing that you need to know , to edit file and us the command line to run python program you've got figur out .
okai ?
so our program for todai is from the list chapter .
and our program is actual , we're go to debug a program rather than just write a program from scratch .
and so what our , our task is , in thi program is we're look for word that start with from , look for line that start with from .
and on the line that start with from , we're go to pull out the dai of the week that thi particular email messag wa sent .
saturdai , fridai , whatev .
and so the structur of the program is pretti standard .
we're go to open a file at the top .
we're go to loop through the file .
strip the newlin at the end , right ?
there's a littl newlin at the end of each line .
and then we're go to us split to split it into word , which mean that'll make thi the zero word , the on word , and the two word .
and then we're go to check the zero word to see if it's from , and if the zero word's not from we're uninterest in that line so we're go to skip back up .
and if it is good , if we wfind a line we're interest in , we're go to skip the major of the line in thi file .
less than on in <num> of these line actual have from in the , as the first word .
and then the second word is what we're interest in so we're go to print the , the dai of the week .
so thi program as we type it in is go to have a traceback and we go like , you know , as soon as you see traceback you immedi ar drawn to the word traceback and mayb you've gotten to the point where you start to read the why , list index out of rang .
and then , you know , it sai line five , so that's kind of help .
but the first thing to not get distract about is , is thi .
our program actual ran a littl bit .
so when you look at a traceback , look right abov it and make sure , and mayb you won't see ani output , but mayb your program will have partial run , and so don't immedi assum the program is total broken .
so thi is actual success output of on of the mani from line .
and it , it di later .
and so , as we debug it , we'll sort of come up with techniqu to sort of figur out how much your program ha done befor it di , becaus that might be an import , import question to answer .
how far did your program get , becaus if it di befor the first line , or on the first line , that's someth differ than if it goe like <num> line and then di .
if it goe a long wai , <num> line , and then di , mayb there's someth subtl or weird about the line it's dy on , rather than just your program is just like total broken .
so you got , look for someth where your program actual partial work , and help you kind of narrow down your suspicion as to what might be wrong with thi .
so let's get on with the , let's get on with the program .
and so i will simpli steal thi .
i'll cut and past it .
and that will be that .
so i'm go to cut and past thi into my textwrangl .
now it's alwai danger cut and past .
but i'm cut and past from a slide which seem to work a littl better than cut and past from pdf .
and you can even get awai with cut and past with pdf as long as you don't freak out when the first thing you see is a bunch of crazi syntax error becaus of charact be code improperli .
so now i'm in thi file , and i'm go to save thi .
save as , and i'll put thi on my desktop in the list folder .
and we'll call thi dai of the week . py in the list folder .
okai , and of cours it's , syntax color it , which make my textwrangl syntax color it , and so i've got sit in thi list folder , i've got the dai of the week . py .
now on of the thing that we've got to do is we've actual got to get our data file .
see thi mbox short . txt ?
so the mbox short . txt is sit here on pythonlearn . com .
i'll go to the book page and you'll see thi , all the stuff and code sampl .
includ mayb a work version of thi exampl , you just never know .
ii doesn't look like thi on's here but the file i'm look for is mbox dot short dot t x t .
so there it is .
it's a mail thing and here's on of those line we're look at and we're go to there's mani of them .
thi happen to be the first line of the file .
so i'm go to make sure that i save thi into the folder .
go back to my desktop and put it in list and then save it .
and so .
at that point i should be abl to go back and see ah hah , i have mbox short . txt .
now the interest thing is if you read thi file , if you open thi file , textwrangl's perfectli happi .
so we see from .
so if i wa to do sort of a search , and i want to search for the string capit from space .
okai ?
and then i'm go to search next .
oh , there lot of them .
i'm go to make them case sensit , okai ?
so it'll onli be the from that ar case sensit .
there we go , and so in a sens our program is do thi littl from where it's look .
it's throw awai all the line except those that start with from and a space , becaus of the wai the split work .
and then it's go to pull these , these dai of the week , these fridai .
so i'm kind of do , if i wa do it by hand it would be like find the line that start with from blank , and then grab thi littl text , and that's what i'm interest in .
mayb i'm curiou as to whether or not these folk work on the weekend or on the weekdai .
and that's the purpos of thi .
okai ?
so i'll close thi .
just , it's , that's what , that's the , close document .
there we go .
so here's my littl program .
and so , let's , i can get rid of thi now .
so now i'm go to go into my desktop .
i'm in my home directori .
cd desktop , cd list .
if i do ls , there i am .
i've got thi dai , dai of the week python program , and mbox short . txt sit here .
so i'm go to run it and there it work .
i'll get , i mean , well , work for some valu of work .
so we get the same traceback the lectur slide suggest we would , and thankfulli that probabl mean the lectur slide's right .
so , so here we go .
we got , we got thi on thing where the dai of the week is kind of come out and then it di on line five .
and it even give us the line it's dy on .
so , it's complain about list index out of rang , and you might be abl to stare at thi and mayb you're smart .
you're , you have enough skill alreadi that you're see these kind of error and you just read it right awai , know what the problem is , but that's not so much fun .
so here i am in line five , right ?
i'm go to go right to line five .
and , and so the first thing i want to do on line five , is i often add a print statement right befor the line that's dy .
and i'll just print out someth someth random .
just , it , you know , sometim i print the letter a out , right ?
and so now i'll save thi .
and now i'm go to run it again , and thi tell me , just by put a print statement in , what's go on here .
it's like , okai wait a sec .
thi is the good line .
thi is the line , i mean , thi is the line i'm interest in .
as a matter of fact , i'm go to make anoth chang just to help me sort of visual see what's go on .
i'm go to put like a bunch of equal sign at the begin of thi line and now i'm go to run it again .
so if i look , it's like , oh , dude , that's the good line .
that's the line i'm like .
and here's my debug , someth random , someth random , someth random .
so a lot of stuff is go on here .
and then final it di , right ?
so final , it di here .
now , it's line six becaus i ad a line .
so the , so perhap instead of print out someth random , i'll print someth us .
so , the first thing to do is to look at thi statement , the on that's dy .
and sai , what is the most suspici thing in here , okai ?
and , and so , if someth's go wrong with thi word sub zero , it's sai index out of rang , right ?
someth go wrong with word sub zero .
so what's the deal ?
so i'm not go to print out word sub zero , i'm go to print out word .
i'm go to sai , like , what is in thi word list at thi point ?
so now let me save that .
so instead of print someth random , we'll see a bunch of word go by .
and so here's that first line broken into word , where from stephen marquard , saturdai .
and here's our good line .
and then here's on that doesn't have from as the first word , so we skip it .
here's on that doesn't .
so let's continu onto where it's , you know , we see lot of line , everyth's cruis along .
we actual see on that sai from colon , but that's not what we're look for .
so that on get skip too .
so make sure you skip that .
now , here we ar .
here's the word .
here's that list of word that we've split .
now , thi wa the line befor , here's the next line .
it's like , okai , what's go on here ?
that look like an empti list .
okai , so i'm a littl more curiou , i'm go to , i'm go to print , i'm go to print line out too .
and i'm go to put , just so i know what's go on , i'll stick some , a coupl pluse in front of that .
so the line will have pluse on it , and it'll print the word .
so let's run thi again .
so i'm ad junk to thi , right ?
so now when i look at my thing , the pluse mean that's the line i'm see .
right ?
i just put those pluse in for my own visibl , so i can visual see it more natur .
that's the line and you can see how nice it break it into word , so it break thi line at the space .
oop , sorri .
that wa not so good .
it , it break thi line , spam probabl line , at thi space and give me two word .
right ?
so here we ar .
two , here we go .
here is thi space , and then it break it into on word , and anoth word .
and so that's work .
but if i look here , that's the line that i'm on .
oh , well that's a blank line .
hang on a sec , hang on a sec .
so let's just real quick take a look at that file again .
let's look at that file , and so here we go , here we go so that's cool , that's cool , that's cool , let's look at the line .
and here we go , so if you look .
the last thing that we read successfulli wa thi line right here .
thi line is a blank line , so our program is choke on blank line .
it's not fail on line that work right , and it's not fail on line that don't have from in them .
it can handl the front line fine , it can handl the , ani other line fine .
but it freak out on the simplest of thing , blank line .
so the question is , how do we fix thi ?
right ?
how do we deal with thi fact that thi bit of code , right here , is dy whenev there's a blank line , okai ?
so , the wai we do thi is what's call the guardian pattern .
i'm go to get rid of thi .
so on of the guardian pattern is it look like thi .
so , we don't want to get to thi .
so we want to put someth in front of it to make sure we never hit it in a danger situat .
so it's if hmm , hmm , hmm , someth , continu .
and thi is if , we'll call thi thing the safeti check .
check .
if some safeti check , continu .
so that mean that , you know , you know , if the safeti check match , we're go to not fall through and not do thi danger line .
so the question is what would we put in as the safeti check here to protect .
thi line is guard thi line .
that's what the guardian pattern mean , is do someth befor the scari thing that hurt you .
okai ?
so , on thing we can do is we can sai , okai , well , what's word ?
well word is an empti list .
you know what ?
if , if i got an empti list of word , i have no interest in thi .
so if i sai word is equal to an empti list , continu .
so what thi basic sai is .
you know .
you know .
read the line , strip it , split it into word .
we'll print it .
if it's an empti list , continu and go up to the next line .
and then , if it is a non empti list , it continu here .
and check to see if the first word is from .
and if it is not , it continu , and then if it work , it work .
so thi here , thi line here , is the guardian line , it's guard the , thi other line and you gotta do it in order .
if you do the guard , you have to have the guardian happen befor the line in question .
so now let's run it .
oop .
let's run it , and now it work great .
it's , we got a littl too much crap , so we better get rid of thi print statement .
it didn't give me a traceback , right ?
so now i'm go to get rid of that print statement and look at that .
i'm get the line saturdai , fridai , fridai , fridai , fridai , thursdai .
so it doesn't look like these peopl work weekend .
but it doe look like thei like finish up stuff toward the end of the week .
so , there we go .
i mean , it's a littl bit of , it's not much data to conclud anyth solidli .
mayb if we look at the bigger mailbox file , we can find someth els .
okai , so now it work .
let me show you a coupl of other thing that you could have us as a guardian pattern .
so we could sai if the word we got back is an empti list .
i could sai if the number of element in word is less than on , continu .
that basic sai , look , if the word that i got , if i got fewer than on word , then i'm not go to look for the first word , becaus that's quit danger .
so if i run that , it again work .
anoth more direct , even potenti more direct , would be if let's move thi up .
i could sai if line is equal to empti string , continu .
so now what it sai is , you know , if i'm get a blank line , i'm not even go to bother split it becaus i know exactli what's go to happen .
so let's see if thi work .
so thi on work as well .
so now i've got , you know , a coupl of code , a coupl of code path through here .
right ?
if , if the blank line , i do it after the strip to make sure it is realli empti .
i skip blank line the wai , i come all the wai down and split and then skip line that don't start with from thi wai .
and the onli wai i make it all the wai down to here is if it is a non blank line and if the first word is a from , and then i do my thing .
so that basic is the notion of the guardian pattern , and the pattern is simpli , if there is some code that might have a problem depend on perhap user input , put someth in befor it that make sure that you never get to the danger code .
and don't us a try except for thi .
that just would be tacki , tacki , tacki , tacki .
so that's the end of thi thi present .
so thank a lot , and see you on the net .
hello again , and welcom to chapter nine of python , dictionari .
as alwai , thi lectur is copyright creativ common attribut .
that mean the audio , the video , the slide , and even my scribbl .
you can us them ani wai you like , as long as you attribut them .
okai , so thi is the second chapter where we're talk about collect , and the collect ar like a piec of luggag in that you can put multipl thing in them .
variabl that we've talk about sort of start in chapter two and chapter three were simpl variabl , scalar .
thei're just kind of on thing , and as soon as you , like , put anoth thing in there , it overwrit the first thing .
and so if you look at the code , you know , x <num> and x <num> , the question is , you know , where did the <num> go ?
right ?
the <num> wa there , x wa there , there wa a <num> in there , and then we cross it out and put <num> in there .
thi is sort of the basic oper , the assign statement , it's a replac .
but a dictionari allow us to put more than on thing .
not us thi syntax , but it allow us to have a variabl that's realli an aggreg of mani valu .
and the differ between a list and a dictionari is how the valu ar structur within that singl variabl .
the list is a linear collect , index by integ <num> , <num> , <num> , <num> .
if there's five of them , it's <num> through <num> , veri much like a pringl's can here , where thei're just stack nice on top of each other .
everyth's kind of organ .
we talk about it in the last , in the last lectur .
thi lectur we're talk about dictionari .
a dictionari's veri power .
it's , and it power come from a differ wai of organ itself intern .
it's a bag of valu , like a just sort of , just stuff's in it , it's not in ani order .
big stuff , littl stuff .
thing have label .
you can also think of it like a purs with just thing in it that's like , it's not like stack .
it's just , stuff move around as you're go and that's , that's a veri good model for dictionari .
and so dictionari have to have a label becaus the stuff is not in order .
there's no such thing as the third thing .
there is the thing with the label perfum .
there's the thing with the label candi .
there's the thing with the label monei .
and so there's the valu , the thing , the monei .
and then there's alwai also the label .
we also call these kei valu .
the kei is the label and the valu is whatev .
and so these pink thing ar all label for variou thing you could put in your purs .
so you could sai to your purs , hei purs , give me my tissu . hei purs , give me my monei . and it , it's in there somewher and the purs sort of give you back the tissu or the monei .
and it's , python's most power data collect is the dictionari .
and it's when you get us to wield them you'll sai , like , whoa , i can do so much with these thing .
and at the begin you just sort of learn sort of how to us them without hurt yourself .
but thei're veri power .
it's like a databas .
it's , it allow you to store veri arbitrari data organ in howev you feel like organ it , in a wai that advanc the caus of the program that you're write .
and we're still kind of at the veri begin , but as you learn more , these will becom a veri power tool for you .
thei , dictionari have differ name in differ languag .
perl or php would call them associ arrai .
java would call them a propertymap or a hashmap .
and c might call them a properti bag or an attribut bag .
and so thei're , thei're just the same concept .
it's kei and valu is the concept that's across all these languag .
just ar veri power .
and if you look at the wikipedia entri that i have here you can see that it's just , it's a concept that we give differ name in differ languag .
same concept , differ name .
so like i said , the differ between a list and a dictionari , thei both can store multipl valu .
the question is how we label them , how we store them , and how we retriev them .
so here's an exampl us of a dictionari .
i'm go to make a thing call purs .
and i'm go to store in purs , thi is an assign statement , purs sub monei .
so thi isn't like sub zero .
thi is sub monei .
so i'm actual us a string as the place .
and , so i'm go to sai stick <num> in my purs and stick a post it note that sai that's my monei .
candi is <num> .
tissu is <num> .
and if i look at that , it's not just the number <num> , <num> , and <num> as it would be in a list .
it is the connect between monei and <num> , tissu is <num> , candi is <num> .
and in the kei valu , that's the kei and that's the valu .
so candi is the kei and <num> is the valu .
now i can look thing up by their name , print purs sub candi .
well it goe and find it , ask hei purs , give me back candi , and it goe and find the valu , which is <num> , and so out come a <num> .
we can also put it on the right hand side of an assign statement , so purs sub candi sai give me the old version of candi , and then add <num> to it , which give me <num> , and then store it back in that purs under the label candi .
so we see candi chang to <num> .
and so , thi is a place , and you could do thi with a list except these would be number .
you could sai purs sub two is equal to purs sub two plu two , or whatev .
but in dictionari , there ar label .
now , thei're not string .
string is a veri common label in dictionari , but it's not alwai string , you can us other thing .
in thi chapter we'll pretti much focu on string .
you can even us number and then you would get a littl confus .
but you can .
so here's sort of a pictur of how thi work .
so , if we take a look at thi line purs sub monei equal <num> , it's like we were put a kei valu connect , monei is the label for <num> .
and then we sort of move that in .
and it's up to the purs to decid where thing live .
if we look at the next line , we're go to put the valu in with a <num> in with the label candi , and we're go to put the valu <num> in with the label of tissu .
and when we sai hei purs , print yourself out , it just goe and pull these thing back out and hand them to us .
and what it's realli , it's give us both the label and the valu and it's necessari to do that caus thei're just like <num> , <num> , and <num> .
what exactli is that ?
and so thi syntax with the curli brace is what happen when you print a dictionari out .
the same thing happen when we're sort of print purs sub candi , right ?
purs sub candi , it's like dear purs , go and find the candi thing .
look at that on , look at that on .
oh , yep , yep , thi is candi .
but what we're look for is the valu , and so that's why <num> is come out here .
so go look up under candi , and tell me what's store under candi .
these can be actual more complex thing , i'm just keep it simpl for thi lectur .
and then , when we sai purs sub candi equal purs sub candi plu <num> , well it pull the <num> out , look at the label candi , then add <num> plu <num> and make <num> , and then it assign it back in , and then that sai , oh , go , go place thi number <num> in the purs with the label of candi , which then replac the <num> with a <num> .
okai ?
and if we print it out , we see that the new variabl , or the new candi entri , is now <num> .
okai ?
so if we just sort of put these thing side by side , we creat them sort of both the same wai and we make an empti list , and an empti dictionari , we call the append method becaus we're sort of just put these thing in order .
you gotta put the first on in first .
so it's not tell you where .
you kind of know that thi will be the first on , caus we're start with an empti on , and thi will be the second on .
we put in the valu <num> and <num> , and then we print it out , and it's like okai , you gave me the valu <num> and <num> , i will maintain the order for you , there's no kei other than their posit .
the posit is the kei , as it were , so if i want to to chang the first on to <num> , well , i sai list sub zero , which is thi , and then chang that to <num> .
so thi is sort of us as a lookup to find someth .
it can be us on either the right hand side or the left hand side of an assign statement .
compar that to dictionari , i want to put a <num> in there and i want to put it with the label ag .
i'm go to put <num> , put that in with the label cours .
so we don't have to like , make an entri .
the fact that the entri doesn't exist , it creat the ag entri and stick <num> into it , creat the cours entri , stick <num> into it .
we print it out and it sai , oh , cours is <num> and ag is <num> .
thi emphas that order is not preserv in dictionari .
i won't go into like great detail as to why that is .
it turn out that that's a compromis that make them fast us a techniqu call hash .
it's how it actual work intern , go wikipedia hash and take a look .
but , the thing that matter to us as programm primarili is that list maintain order and dictionari do not maintain order .
thei , dictionari give us power that we don't have in list .
i mean thei're veri complimentari .
now there's not thi on that's better than the other .
thei've veri complimentari .
differ kind of data is either better repres as a list or as a dictionari , depend on the problem you're try to solv .
and in a moment we'll , we'll be write program that ar us both .
so if we come down here and i sai , okai , stick <num> into , assign statement , into ddd sub ag , well that will chang thi <num> to <num> , so when we print it out .
so you can , thi part , where you look someth up and chang the valu , you can do either wai .
it's just how you do it here is a littl bit differ , okai ?
so let's look through thi code again .
and so i like , i like to us the word kei and valu .
kei is the wai we look the thing up , and in list kei ar number start at zero and with no gap .
in dictionari kei ar whatev we want them to be , in thi case i'm us string .
and then the valu is the number we're store in it .
so we creat thi kind of a list with that kind , those kind of statement .
thi statement creat thi kind of a thing .
now , if we , if we think of thi assign statement as move data into a new , into a place , a new item of data into a place .
it's look at thi thing right here .
right ?
it's like , that's where i want to move it .
and so it hunt , and sai , look the kei up .
and that's the on that i'm go to chang .
and then onc it know which it's go to chang , then it's go to take the <num> , and it's go to put the <num> into that locat .
and so that's how thi chang from that to that .
similarli when we get down to here , we're go to stick <num> somewher and thi is , thi express , thi lookup express , the index express ddd sub ag , is where we're go to put it .
so , we're look here , where is that thing ?
well , that thing is thi entri in the dictionari .
and so now when we're go to store the <num> , we know where the <num> is go to go .
it's go to overwrit the <num> and so the <num> is go to chang to <num> , okai ?
so thei're kind of similar .
there ar thing that work similar in them and then there ar thing that work differ in them .
we can make liter , constant , with curli brace .
and thei look just like the print .
that's on nice thing about python .
when you print someth out it's show you how you can make a liter , and basic you just open with a curli brace and sai chuck colon <num> , fred <num> , jan <num> .
and we're make connect .
kei valu pair , kei valu pair .
we print it out and no order .
thei don't maintain order .
now thei might come out in the same order , but that's just lucki .
right ?
all the on i've shown you so far don't come out in the same order , which is good to demonstr it .
if it on time came out in the same order that wouldn't be broken .
it's not like it doesn't want to come out in the same order .
it's just , you don't , it's not intern store , and you add an element and it mai reorder them .
you can do an empti dictionari with just a curli brace , curli brace .
so , i'm go give you anoth exampl .
and i'm go to show you a seri of name .
and i want you to figur out what the most common name is and how mani time each name appear .
now these ar real peopl .
thei actual work on the sakai project .
steven , zhen , and chen , and me .
so these ar peopl that ar actual in the data that we us in thi cours .
okai ?
and so i think i'll show you about fifteen name and you're to come up with a wai , i'm go to show them to you on at a time , you need to come up with a wai to keep track of these .
okai ?
so i'll just , with no further ado i will show you the name .
okai , so that's all the name .
did you get it ?
you might have to go back and do it again .
how did you solv the problem ?
what kind of a data structur did you build to solv the problem ?
or did you just sai wow that's pain , i think i will learn python instead , in solv that problem .
okai ?
so paus the , paus the video if you want and write down or go back , write down what you think the number of the most common name is and how mani time .
okai .
now i'll show you .
so here is the whole list .
it's all of them .
and now that we see all of them , we us our amaz human mind and we scan around , and look at purpl and , and all that stuff .
and then we go like , oh , thi is a so much easier problem when i'm look at the whole thing .
and i think that the most common person is zhen , and i think we see zhen , i think we see zhen five time .
and i think csev is on , two , three and chen wen is on , two .
and steve marquard is on , two , three .
so the question is , what is an effect data structur if you go to see a million of these , what kind of data structur would you have to produc ?
becaus you can't keep it in you head even , even thi number of peopl , you can't even thi amount of data , no wai you can keep it in your head .
you have to come up with some kind of a variabl , as it were , just like largest so far wa the variabl .
some kind of variabl that get you to the point where you understand what's go on .
and so thi is the most common techniqu to solv thi problem where you keep a run total of each of the name .
and if you see a new name , you add them to the list .
so csev and then you give him a on , and then you see zhen and you give her a on , and then you see chen and you give her a on .
and then you see csev again and you give him a two .
and you see a two , and a two , and a on right ?
and so then when you're all done you have the map , right , of these thing and you go oh , okai , let me look through here and find the largest on .
that's the largest on and so that must be the person who is the most .
so you need a scratch area , a data structur or a piec of paper as it were , and so that's what , exactli what dictionari ar realli good at .
you could think of thi as like a histogram .
you know , it's , it's a bunch of counter , but counter that ar index by a string .
so we us a lot of thi .
and so thi is a pattern of mani counter with a dictionari , simultan counter .
we're count a bunch of , we're look at a seri of thing , and we're go to simultan keep track of a larg number of counter , rather than just on counter .
how mani name did you see total ?
whatev , <num> .
but how mani of each name did you see is a bunch of counter , so it's a bunch of simultan counter .
so a dictionari is , is great for thi , a dictionari is great for thi .
we , when we see somebodi for the first time , we can add an entri to the dictionari , which is kind of like go oh , csev on , and then chen wen on .
now these don't exist yet .
right ?
so we've got csev on and chen wen on , so that creat an entri and stick a on in it and the map between the kei csev and the valu on , the kei chen wen and the valu on and then we sai , hei what's in there ?
oh , we've got a csev is on and chen wen is on .
and then we see chen wen a second time , so we'd add anoth number right there .
so thi old number is on , we add on to it and we get two and then we stick that back in and then we do the calcul .
we do a dump and sai oh there's two in chen wen and on in csev .
okai ?
so thi is a great data structur for the simutan counter like what's the most common word , who had the most commit , da , da , da , da , da .
now , everyth we do we have to figur out like , when you're go to get in troubl with python .
when python's go to give you the old thumb down and sai oh , you went too far .
so on thing python doe not like is if you refer a kei befor it exist .
we'll , we'll talk in a second how to work around thi .
but if you simpli creat a dictionari and sai , oh , print out what's under csev , it give you a traceback .
it's like , i'm go to inform you that that's not there .
and it sai kei error , csev .
now , the thing that allow us to solv thi is the in oper .
we've us the in oper to see if a substr wa in a string .
or if a number wa in a list .
so , so thi in oper sai , in oper sai , hei , ask a question .
is the string csev a current kei in the dictionari ccc ?
is the string csev a current kei in the dictionari ccc ?
and it sai , fals .
so now we have someth that doesn't give a traceback that can tell us whether or not the kei is there .
so if you rememb the algorithm , the first time you see it , you set them to on , and everi other time , you add on to them .
so thi is how we do that in python .
so here's how we implement that program that i just gave you in python .
so , here's our name .
it's shorter so my slide work better .
here's a variabl , our iter variabl , it's go to , you know , go through all five of these on at a time .
and within the bodi of the loop we have an if statement .
if the name is not current in the count dictionari , count is the name of my dictionari .
if the name is not current in the count dictionari , i sai count sub name equal on .
els , that must mean it's alreadi there which mean it's okai to retriev it , count sub name plu <num> .
we're go to add a <num> to it and stick it back in , okai ?
and so when thi finish it's go to add entri and then add on to entri that alreadi exist .
and not traceback at all .
and when we print it out we're go to see the count .
and liter thi could have gone a million time and it would just be fine and it would just keep expand .
okai ?
so thi pattern of check to see if a kei is in a dictionari , set it to some number , or ad on to it is a realli , realli common pattern .
it's so common , as a matter of fact , that there is a a special thing built into dictionari that doe thi for us , okai ?
and there is thi method call get .
and so , count is the name of the dictionari , get is a built in capabl of dictionari .
and it take two paramet .
the first paramet is a kei name , like a string , like csev or chen wen or marquard .
and then the second paramet is a valu to give back if thi doesn't exist .
it's a default valu if the kei doe not exist .
and there's no traceback .
so thi wai you can encapsul , in effect , an if then els .
if the name paramet is in the count , print the thing out , otherwis print zero .
so thi express will either get the number if it exist or it will give me back a zero if it doesn't exist .
so thi is realli valuabl .
right ?
thi is realli valuabl .
that's a realli bad smilei face .
so thi is realli valuabl becaus it , onc , onc we understand the idiom , it realli take four line of code and turn it into on line of code .
becaus we're go to be do thi if then els all the time .
now , and so we can reconstruct that loop a lot easier and a lot more cleanli us thi idiom , right ?
it's someth that look kind of complex but you'll get us to it realli fast , okai ?
so we have , everyth here is the same , we creat an empti dictionari , we have five name to go through , we're go to write a for loop and it's go to go through each of those .
and then we're go to sai count sub name equal count dot get the valu store at name , and if you don't find it , give me back a zero .
and then whatev come back , either the old valu or the zero , add <num> to that and then take that sum and stick it in count name .
okai ?
so thi is either go to creat , or it's go to updat .
if there is no entri , it's go to creat it and set it to on .
if there is an entri it's go to add on to the current entri .
okai ?
so thi is , thi line is kind of an idiom .
read about it in the book , figur it out , get us to the notion of what thi is do .
understand what that is do , okai ?
becaus i'm go to start us it as if you understand it .
so , the next problem is a problem of find the most common word .
so , find the most common , the top five , is often a , a trigger that sai , us dictionari becaus if you're go to have to count thing up , you're go to , you know , you don't know what the most common thing is at the begin .
first you have to count everyth up , and dictionari ar a great wai to count .
so here's a littl problem and i would like you to read thi text and find me the most common word in the text .
and tell me what the most common word is and how mani time it occur .
readi ?
i'm go to give you a thousandth of a second , just like i would give a comput .
i would expect it'd be abl to do thi in a thousandth of a second .
there you go .
okai , i gave you five second .
time's up .
did you get it ?
or did you sai to yourself , you know what , i hate that , it's no good , i think i'll write a python program instead .
and he'll probabl show me a python program if i wait long enough .
so here's a slightli easier problem from the first lectur .
readi ?
it's the same problem .
find the most common word and how mani time the word occur .
blank audio did you get it ?
i believ the answer is , and i could look realli dumb here , oop , the answer is the , and i think it's seven time .
so , that's the right answer .
okai ?
again , thing human ar not so good at .
so , here's a piec of code that's start to combin some of the thing we've been do in the past few chapter all togeth .
we ar go to read a line of text , split it into word , count the occurr , how mani time each word occur , and then print out a map .
so , so here's what we're go to do , we're go to sai okai , start a dictionari , an empti dictionari , read the line of input .
then split it , rememb , the split take a string and produc a list .
so word is a list , line is a string , and then we'll print that out .
then we're go to write a for loop that's go to go through each of the word , and then creat , us thi idiom count sub word equal count . get word , <num> <num> .
so thi is go to do exactli what we talk about in the previou coupl slide back , either creat the entri or add to those entri , okai ?
and then we're go to print them out .
so here's what that program doe when it print out .
now thi is actual on long line i'm just cut it so you can see it .
here's thi line we enter , and the word the , there's seven of them .
then it take thi line and split it into a list , and there is the begin and end of the list .
the list maintain the order , so the list simpli break all these word into separ word in a list of string .
from on string to mani string .
thi is mani string .
and so the , and the space ar gone .
and so now here's thi list .
and then what we're go to do is we're go to run through the list .
and we're go to keep run total of each of the word in the list .
and then when we're done with the list , we're go to print out the content of that dictionari .
and we can inspect it and go like , let's look for the biggest on , na , na , na , na , na .
it's kind of like look for the largest , like , oh , seven .
that's the largest and the largest word is the .
okai ?
so that's how the program run , it read a line , split it into a list of word , and then accumul a run total for each word , and then we hand inspect to see what the most common word is .
okai ?
oh no , no , i don't want that song again .
there we go .
and so and so here we have the , in it's kind of a smaller fashion .
we make a dictionari .
thi enter a line of text is here .
it's all on line .
we do the split and then we print the word out .
and so that split creat a list of string from a singl string base on where the blank ar at , chop , chop , chop , chop .
and then here at count , we're go to loop through each of the word on at a time and us thi idiom , count sub word equal count . get word , <num> <num> , which is go to creat and or updat .
and then we print the count out and that come out there .
okai ?
so , again , thi is the new thing that we've done .
everyth els we've kind of seen befor .
now we can also loop through dictionari with for loop .
the for loop , we've been , put all kind of thing over here .
we've put string over here , we've put list of number over here .
we've put file over here .
and basic what it realli sai is you know , if thi is a collect of thing , run thi littl indent code onc for each item in the collect , and kei then becom our iter variabl .
and kei is veri mnemon here .
it doesn't know that thei ar kei .
and so , kei .
the kei here is that , there's a bit , the import concept here is that dictionari ar kei valu pair and so thi is onli on variabl and so it actual decid that , thei've decid that it goe through the kei , which is actual quit us .
so kei is go to take on the success valu of the label .
not the success valu of the valu store at the label .
but it's realli easi for us to retriev the content at that label count sub kei .
so we're go to us the kei 'chuck' , 'fred' , 'jan' , to look up the <num> , <num> , <num> .
and so it print out the kei , and then the valu at it , the kei , and the valu at it , and the kei , and the valu .
and so we're abl to sort of go through the dictionari and look at all the kei valu pair , which is the common thing that you realli want to do .
okai ?
now there's some method insid of dictionari that allow us to convert dictionari into list of thing .
and so if you simpli take a dictionari , so here's a littl dictionari with three item in it , and we can sai list sub and then give a dictionari name right there , and then that convert it into a list .
but it's just a list of the kei .
we can also sai jjj dot kei , kind of do the same thing .
sai give me a list consist of the kei .
and then jjj dot valu give you a list of the valu , <num> , <num> , and <num> .
of cours thei're not in the same order .
now interestingli , as long as you don't modifi the dictionari , the order of these two thing correspond as long as in between here you're not chang it .
so the first jan map to <num> , chuck map to <num> , and fred map to <num> .
so the order , you can't predict the order thei're go to come out but these two thing will come out in the same order , whatev that order happen to be .
okai , and so there's on more thing .
so we've got the kei , we've got the valu , and we've got a thing call item .
item also return a list , it's a list .
but it's a list of what python call tupl .
that's what the next chapter is about .
we'll talk more about tupl in the next chapter .
a tupl is a kei valu pair .
so thi list ha three thing in it .
on , two , three .
the first on jan map to <num> , the second is chuck map to <num> , the third on is fred map to <num> .
so , just kind of bear with me for a second .
we'll hit thi a littl harder in the next chapter .
but the place that thi , the idiom where thi work veri beautifulli is on a for loop .
now , for those of you who have program in other languag , thi will be kind of weird becaus other languag have iter but thei don't have two iter variabl .
python ha two iter variabl .
it can be us for mani thing but on of the thing that it's us for that's realli quit nice is we can have two iter variabl .
thi jj item return pair of thing and then aaa and bbb ar iter variabl that sort of move in synchron , move , ar synchron as thei move through .
so aaa take on the valu of the kei .
bbb take on the valu of the , the valu .
and then the loop run onc .
then aaa is advanc to the next kei .
and bbb is advanc to the next valu simultan , synchron .
then thei print that out , then it advanc to the next on , and the next on , and thei print that out .
so thei ar move in a synchron wai .
now again , the order jan , chuck , fred is not the same .
but the correspond between jan <num> , chuck <num> , and fred , that's go to , that's go to work .
and so basic , as these thing go , thei work their wai through whatev order thei're store in the dictionari .
so thi is quit nice .
two iter variabl go through kei valu .
now if i wa make these name mnemon , and thei made more sens , i would call thi the kei variabl and that would be the valu variabl .
but for now i'm just us kind of silli name to show you that kei and valu ar not special .
thei're not python reserv word in ani wai .
thei're just a good wai to name these thing , kei valu pair .
okai ?
okai .
now we're go to circl all the wai back to the begin .
all the wai back to the first lectur .
and i gave you thi program , and i said don't worri about it .
we'll learn about it later .
well , now later .
at thi point you should be abl to understand everi line of thi program .
thi is the program that's go to count the most common word in a file .
okai ?
so let's walk through what it doe and hopefulli by now thi will make a lot of sens .
okai ?
so we're go to start out , we're go to ask for a file name , we're go to open that file for read .
then , becaus we know it's not a veri larg file , we're go to read it all in on go .
so handl dot read sai read the whole file , newlin and all , blank , newlin , whatev , and put it in the variabl call text , it's just mnemon .
rememb i'm , in thi on i'm us the mnemon variabl name .
then go through that whole string , which wa the whole file , go through and split it all .
newlin don't hurt it .
newlin ar treat like blank .
and it understand all that .
it throw the newlin awai and the blank awai and split it into a beauti list of just word with no blank .
and the list of the word in that file end up in the variabl word .
word is a list , text is a string , word is a list .
then what i do is the pattern of accumul counter in a dictionari .
i make an empti dictionari .
i have the word variabl that goe through all the word and then i just sai , count sub word equal count dot get word , <num> <num> , and that , like we just got done sai , it both creat and or increment the valu in the dictionari as need .
so now at the end of the , at the , at thi point in the program , we have a full dictionari with the word count .
okai ?
and there's mani of them .
you know , all the word , all the count .
thei're not in ani particular order .
so now what we're go to do is we're go to write a largest loop , find the largest .
which is anoth thing that we've done .
so not onli do i need to now know what largest count i've seen so far , i need to know what word that is .
so i'm go to set the largest count we've seen so far to none , set the largest word we've seen so far to none , and then i'm go to us thi two iter variabl pattern to sai go through the kei valu pair word and count in count . item .
so it's just go to go through all of them .
and then i'm go to ask if the largest number i've seen so far is none or the current count that i'm look at is greater then the largest i've seen so far , keep them .
take the current word , stick it in biggest word so far , take the current count , stick it in the biggest count so far .
so thi is go run through all of the word . count pair , word . count kei valu pair .
and then when it come out , it's go to print out the word that's the most common and how mani time .
so if we feed in that clown text , it will run all thi stuff , and print out oh , the is the most common word , and it appear seven time .
or if i print the stuff that wa two slide back , word . txt , from the actual textbook , then it sai the word to is the most common and it happen <num> time .
so i could easili , you know , throw <num> million , <num> million word through thi thing , and it would just be total happi .
right ?
and so , thi is not that complex of a problem , but it's us a whole bunch of idiom that we've been us .
the split of word , the accumul of multipl counter in a dictionari .
and so , it sort of is the begin of do some kind of data analysi that's hard for human to do , and error prone for human to do .
and so thi is , we're review collect .
we've introduc dictionari .
we've done the most common word pattern , talk about that .
the lack of order , and i did that a bunch of time .
and we've look ahead at tupl , which is the next , the third kind of collect that we're go to talk about .
and thei're actual in some wai a littl simpler than dictionari .
and simpler than list .
so , see you in the next lectur , chapter <num> , tupl .
hello and welcom back to our continu episod of work exercis for the book python for informat explor inform .
i'm your author and tour guid dr .
charl sever .
as alwai , these materi ar copyright creativ common attribut .
i look forward to wai that you can improv on thi work .
thi materi is a supplement to my www . pythonlearn . com which is my support websit .
for python learn , python for informat .
it ha instal and other kind of support that can help you get start .
so for thi particular exercis , it realli come from our dictionari exampl .
and we're go to try to figur out the most common word .
and in thi on we're go to deal with some realli simpl text file where the word ar just word , and we're not go to worri about line or skip line , or anyth .
so we're just go to do word and , and so , we'll do thi thing .
so , if we look at thi program , there's realli four basic part to the program .
on is , the first part is actual read the program and thi is a littl differ pattern than other thing that we've done .
and that's be , we're go to read the whole file .
so thi is , instead of do a for loop here , we ar go to read the entir file .
so , we're go to ask the user for the file name .
and then open the file name that thei type in .
so , you know , here's the , we're ask the user for a file name .
open the file , but then we're go to do a handl . read .
now , if you recal , handl . read , normal we would write a for loop that would loop through each line and strip , and split and , and whatev .
what we're go to do here is sai , you know , read thi whole thing .
we know that these file ar pretti small .
read the whole thing in into a string .
now , the kei thing is that will read all the line in , and the newlin at the end of the , at the line , there's a newlin .
but all thi will be read in .
all the line and the newlin .
and the nice thing about thi is the newlin form white space , and so thei will give a word break befor the let , between the last word on on line and the first word on the next line .
i'll talk about that a bit more when we're actual look at some stuff .
we're go to split it into word , which mean we're go to make a veri long list , which is all the word in the entir file .
not just the word on a line , which is some of the other exampl that we've us .
but again , we know these file that we're plai with ar rel small , and thei fit in the memori of python , and so we're just go to do simpl , crude , you know , read the whole thing in as a string , split it on white space , newlin includ .
and now we're go to write a veri simpl dictionari loop .
that , we're go to creat a dictionari , and we're go to go through the word .
now , thi , thi word is our iter variabl , of cours .
and word is all the word in all the line of the text .
we're go to us the get pattern .
so if the word exist , whatev word we're look at , we will get it and add on to it .
and if it doesn't , we'll just us the default valu and add on .
so thi is effect the same as set it to <num> the first time we see a word .
then we're go to write a simpl maximum list .
and so what we're go to do we're go to creat a bigword variabl that we're go to start as none , which is the word that is the largest and how mani there ar .
and then we're go to do a loop with two iter variabl .
we're go to go through our , you know , our dictionari will be word , comma , count , you know the word will map to the count .
the word will be the kei , count will be the valu .
so we us count . item to get that list of tupl back .
and basic if we're on the first on , bigcount be none , or if the count is greater than bigcount , then we're go go to rememb the word and we're go to rememb the count .
and then thi loop will go through all the word .
and at the end , we just print out bigword and bigcount .
so that basic is the the outlin of what we're go to do .
and when we'll run it , we'll run it with a coupl of differ file , word . txt and clown . txt .
okai .
so i'm go to clear thi .
and get out .
and so , i'm go to , i'm go to , i'm just go to cheat and put a few of the line in , we'll , we'll actual write the whole thing .
okai .
so we can sai goodby to that now .
so , so i'm go to have to get my data file .
and i will go to pythonlearn . com .
go under the book .
go to sampl .
and actual , thi is just file , mostli .
mayb i shouldn't call it code , but i'm go to grab the clown file , so thi , the clown file is go to be from the lectur .
the clown ran after the car .
i'm go to save thi file .
i'm go to put it in my folder call dictionari , and then i'll hit back and i'll go down to the file call word . txt , and thi is the first three paragraph first three paragraph of the book .
and we're go to count the most common word there .
and i'll do the file , save as .
and put word there , right in the dictionari folder .
so now i've got my data and i can get rid of thi .
and so if i take a look at my dictionari dictionari folder .
i see that i've got clown . txt and word . txt , and so now i'm go to sai , i'll save thi .
and i'll call thi thing , lot , lot mani word , common word .
i'll call it common . py , what the heck , keep these thing short .
okai , so if i take a look in here now , oop , i save it to the wrong place .
file , come back .
file , save as .
where did i save it ?
i have no idea where i save it .
but i will save it where it's suppos to be .
it's suppos to be in dictionari , and i'm go to call it common . py .
that's why i alwai check , right ?
there it is , common . py , and now i'm go to go into that , go into my desktop , dictionari , and there i've got common . py and word . txt .
and we'll just run it .
and , uh , i'll tell it to do clown . txt .
now it didn't do anyth becaus i haven't print anyth out .
it actual did read it .
so , so let's take a look here .
i'm go to print len of text .
and i'm go to print the first oh , <num> charact .
text up to but not includ <num> .
so that's what i'm go to do here , just to see thi .
and i'll do clown again .
so the length of text is <num> charact .
and , and that is exactli the size of the file .
it read the whole file .
if i do ls l it show clown . txt have <num> charact .
so it read into handl . read , read into the variabl text <num> charact and the first <num> ar just those thing .
the clown ran after the car , blah , blah , blah , blah , blah .
okai ?
so now thi entir file , clown . txt , ha been split .
so i'm go to print len of word , so how mani word did i get in that split ?
and then i'll print the word themselv .
oop .
clown . txt .
so , i ran it , i read in <num> charact , but then i broke it into word .
and there's <num> word .
and then here is my list of word .
okai ?
so i split the entir file into word at thi point .
and now i have a big list .
now if i do the same thing with word . py , i mean word . txt , it read <num> charact , and here's the first charact .
and then it broke it into word , and it wa <num> word .
now let me chang thi ever so slightli so it print the first <num> charact .
and i'll show you someth .
word . txt okai , so it print the first <num> charact .
let me split thi into two print statement to make it even clearer .
let me run it again .
word . py .
aah !
word . txt .
clear my screen .
so , the first print , thi print right here , is <num> , and then i print the first <num> charact .
thi is that first <num> charact .
what you're sort of not see here is that there is a newlin here .
okai ?
and that's why it print on two line .
so blah blah blah blah blah newlin .
it read newlin and all .
now it didn't do the second on becaus that what where i , my print stop .
the kei thing is , it know that when split work , thi is white space , that space is white space , and the slash n is white space .
so it know that creativ and and ar two separ word and it doesn't somehow put them togeth .
so that's the nice thing about the split with no paramet do what it know to be white space .
it will us newlin as white space as well .
and that's quit nice .
and if there's extra space it just throw those awai .
all the featur of sort of split with no paramet ar veri intellig and veri clever and so it work veri nice in thi situat becaus newlin ar thought of as white space and blank ar thought of as white space and it realli is exactli what you would want .
i mean it's exactli what you want .
i mean , that's becaus human wrote thi stuff and thei thought hmm , what would i want ?
so thei wrote someth that's what you want .
so now we have , in effect , a whole file , and a list of all the word in that file , okai ?
so i'm go to take all thi stuff out .
i'm go to take all thi stuff out .
so now word is a list .
and i'm go to sai for wrd in word , i'm us wrd on purpos , print wrd , right , so that the , a slightli less mnenom word so i'll go back to the clown . txt and now i'm go to print out the wrd .
so now my loop is go through the list on at a time and print them out .
okai ?
so i am now go to make a dictionari .
i'm go to call thi cou equal dict .
to make an empti dictionari , okai .
so cou is a realli unmnemon version of count .
so we'll call them cou , okai ?
so cou is our dictionari .
and i'm go to do thi the hard wai first .
i'm go to sai if wrd , wrd up in cou , then cou sub wrd is equal to cow sub wrd plu on .
so if it's alreadi there , we're go to add on to whatev's store in the thing mark with wrd .
now wrd is not w r d , it's the , and on , and down and whatev .
it's , wrd is a variabl that contain these string , okai ?
but if it's not in there , els cou sub wrd is equal to <num> .
so that's like when we've seen the new person for the first time , we sai , oh , we haven't seen you befor , so we're go to set you to <num> .
okai ?
and then i'm go to , just for yuck , i'm go to print wrd , comma , cou of wrd .
right ?
so i'm go to go as we go through the loop for each word we're go to do thi add or set to <num> .
and then we'll just print it at the end of the loop .
how mani we've got so far .
so let's run thi now .
clown . txt .
that didn't work so well becaus i didn't save it .
so let's try that again .
clown , let me clear my screen .
i like mac becaus i can clear my screen so nice , keep my sort of brain organ .
okai , so what we see here is we saw the word the , and we put it in the dictionari with <num> .
clown , <num> .
ran , <num> .
after , <num> .
now we've seen the , oh , oh , oh , let's make anoth thing to make thi even clearer , hang on .
print ad , print new word .
good thing i , well , actual go to call thi word up .
so when i'm increment , i'm go to sai word up .
and then i'm go to sai new word when i'm creat it .
so i've just ad a print in each of these just to realli clarifi what's go on , right ?
word up .
that mean i'm increment it .
i'm ad on to it , that's what word up mean .
clown . txt .
so , here we go .
so , well , let's make thi even cooler .
word up , comma , wrd .
and now i can sai comma , wrd .
okai .
so it saw the .
did a new word .
it count is <num> .
it saw clown .
and it's new , so it got a <num> .
it saw ran , ran's a <num> .
after's a <num> .
oh now , the .
the's word up , so we add <num> to it , so it's now a <num> .
right ?
car is brand new , and is new , oop , we see the again , so now the goe to <num> .
so you're increment when i sai word up , and you're set to <num> when i sai new word .
yeah , so you get the pictur .
so by now we've seen the a bunch of time , we're ad <num> to the , and it's now <num> .
so at the end of thi , we're go to print c o u .
i'm go to do thi cooler .
blank audio watch thi .
wrd , comma .
now i'm actual go to put the count on in here .
c o u w r d .
and i'll put it after i set the count so it look a littl prettier .
check thi out , it's go to be awesom .
word up and i'm go to chang thi just sai word and now i've got the print insid the els i'm go to sai c o u sub wrd .
it's okai to make your debug output a littl bit fun .
so now , here we go .
so i put , i move my print into the if then els , and i print the word whether i'm increas it or not , and then how mani it's after .
and i do it , i do thi after thi line so it's the the word afterward .
and then i print the whole dictionari out .
so thi is go to be even awesom .
okai .
the word , the count is <num> .
clown , our first word .
word , word , word .
oop , now here we saw a the , and we did word up .
so now it's <num> .
car word is <num> .
the word up , now <num> .
you get the pictur ?
so everi time we hit thi if part , we do word up .
if we hit the els part , we do word .
okai ?
and at the end we have all the word that have been up and ad , etc .
okai ?
so enough of thi debug print .
we don't need that .
we don't need that .
it wa just fun .
but just let's make sure that it still work .
it doe .
okai , now , after all that , we ar go to sai , you know what ?
we don't actual need ani of thi crap , becaus there is an idiom that basic deal with the fact that instead of a lookup , okai .
so , here's , so , let's run thi on real quick .
right ?
it's like hei , i just want to add <num> to it .
and we will watch just how fast thi blow up .
and that's becaus , the , see , we're do count wrd , equal count wrd plu <num> , it's thi count on the left side , it's blow up .
right ?
it's blow up right here becaus the is not yet there .
well , that is what thei made the get function .
so , it ha thi cou . get , now that's a method , so we're go to us parenthes , and we have to give it a default valu .
get sai look up wrd , whatev's in wrd , the , clown , whatev , and if it's not there give me back a number .
well we want to set it to <num> the first time .
so if i return the number zero then ad <num> to it will make it be <num> and so i can captur all of that if then els in on statement now .
clown dot text word up .
okai ?
so we us the get to do the lookup .
it encapsul that if then els that we just got done write .
it is the if thi exist , els give me back a zero .
ok ?
so here we go .
we've got ourselv a nice littl happi gui right ?
so now we want to find the biggest on .
well , we're go to do a maximum loop .
and so let's start by thi and sai lrg equal none .
we're go to us the none pattern .
and so now what i'm go to do is i'm go to write a for loop that goe through .
well let's not , let's get rid of that .
we'll come back to that .
were go to do k y y .
mayb not .
we might do k e e , and val in cou . item .
right ?
so i'm go to go through the item .
rememb it , okai let's just do cou dot .
let's print cou . item here .
yuck for yuckomat .
let me comment thi out for a second .
don't do that .
there we go .
so let's run thi on now .
clown . txt .
okai so now we're print a list of tupl .
so each on is a tupl and the wai we then write thi for loop to get thi cou item , so thi whole thing here is cou item , it's a list of tupl .
and we can basic make it so that the kee and the val move through the list of item where kee is and val is <num> , then next iter kee is on val is <num> , next iter kee is ran val is <num> .
dot , dot , dot , dot , dot , dot , dot .
okai ?
and so that's cool .
i mean it sai , thi cou item is a list of two tupl , tupl with two item in it , two thing in it .
and we're go to give ourselv two iter valu .
so just for yuckomat , we're just go to first , as we would , print out kee and val , and then run that .
so here we go , right .
we've got kee and val , kee and val , kee and val , and it's in whatev order it feel like have thi thing come out in .
okai ?
so , so then what i'm go to do is i'm go to creat a , a variabl call maxval .
i'm go to set it to none .
and i will sai , if maxval is equal to none , maxval maval maxval equal val .
now i'm us thi , i'm us , don't get too crazi .
i am us the contract form of if here .
so i'm not indent , i'm just put the on line , becaus if maxval is none , maxval is the current valu .
and them i'm go to sai , if maxval is less than val .
and , again , i'm do thi in order .
i'm do the check for none first .
but onc i've got it , maxval equal val , okai ?
so thi is in a sens my prime .
we call thi sort of a prime thing so first time through the loop we're go to grab the first valu that we see and then we're go to print maxval .
we're go to check to see if we're go up , basic .
if the current maximum is less than what we're look at , let's grab it .
and i'll just print out maxval here .
just for yuck .
okai ?
clown . txt okai , so we see and , and the first maxval is <num> , which kind of make the thing bore .
on is onli <num> which is not , so ran is <num> , nobodi seem to be better than <num> .
down is <num> .
fell is <num> , the ooh , the is <num> .
so we grab it .
tent is <num> , so then we're all done .
okai ?
so then i'll just print out at the end print out maxval .
so if i do thi , and type clown . txt pow .
we know that the , the best number is <num> .
but now what we want is we want to know what word it wa .
what is our best word ?
well , so , i'm just go to make anoth variabl call max wrd and i'm go to make it none at the begin of the loop and i'm go to add make thi , make that be an indent .
and at thi moment where i'm captur the maximum valu , i'm just go to captur the maximum word as well .
maxwrd equal kee .
oh , wait a sec .
i want to call thi maxke .
so we're go to have a realli stupid , funni maxke .
so we've got kee , which is the kei , and then maxke .
and i'm go to print out maxval and maxke as well , and then i'm go to print out maxke , comma , maxval .
i'll put maxke over here .
and you'll see maxval oh , that's not go to quit work .
it's not go to quit work .
but let's let it not work , and then we'll see what we did wrong .
it'll ultim work , but it'll kind of be flaw .
clown . txt okai , so .
let me get rid of thi count item line .
get rid of that , make it clear .
okai , so here we go .
we've got , umm first time through , the word we're look at is and , and the valu for and is <num> .
and maxke is none .
that's the maximum kei we've seen , but we do have a maximum valu , which mean we've seen the largest is <num> .
now why is that ?
wait a sec .
if the <num> is the largest and we just saw <num> , shouldn't thi be and instead of none ?
and the problem is , when we came through here and we hit thi maxval none , we set maxval equal to val .
and then we check if maxval wa less than valu to captur the kei , so we weren't captur the kei .
so a quick hack on thi , and what the heck , we're not abov quick hack .
so if i chang thi to less than or equal to , then when i set maxval to val , it'll at least run thi bit of code , and then captur the kei .
so , that's a quick wai to do it .
close enough for govern work .
so now we've fix the bug , right , the bug is that we were captur the max number , but we weren't captur the max kei , but now we ar also captur the max kei .
now , in gener a more , slightli more eleg wai to do thi is actual to just make thi a , a guardian pattern with an or claus .
if maxval is equal to none , or , and i'll put thi back to a less than , maxval is less than val , then captur them .
right ?
so if we're in the , oop , get rid of the equal sign .
all right .
if maxval is equal to none , or maxval is less than valu , captur them , grab them .
now , the output's go to be the same , but it will be pretti .
it's more eleg code .
partli becaus we did it all on on if , and partli becaus we just don't have to look at our code to decid , oh , when that first thing run , we gotta get the second thing , right ?
and so now at the end we see the and <num> , and we ar as good to go as you can be , and all we have to do befor we turn in our assign is comment out that littl bit of debug and awai we go .
clown . txt .
the <num> .
and what's my other file , word . txt ?
we just try to run it on a bigger file now .
word . txt it's all the same .
and it show us to <num> .
so here's our happi littl program at the end .
let's take a look at thi .
we read the file .
oh , we open the file .
we read the entir file line after line , all the line includ newlin .
we split it into word .
conveni , the newlin count as a space .
that's becaus it's white space .
then we make a simpl dictionari count loop to loop through the word we just split .
and then we have a real simpl maximum loop where we captur both the maximum valu and the maximum kei .
and then we simpli print the maximum kei out .
at the veri end .
okai ?
so i hope you found thi us .
and see you in the next exercis .
hello and welcom to chapter ten of python for informat , the chapter on tupl .
i'm charl sever .
i'm your lectur and i'm the author of the textbook .
as alwai , thi materi is copyright creativ common attribut , includ the video lectur , the slide , and the book .
so tupl ar the third kind of collect that we've talk about .
we've talk about list and we've talk about dictionari .
and in the dictionari lectur , we kind of allud to tupl .
we don't have to talk too much about tupl , it's realli shorten the lectur by tell you that thei're a lot like list .
thei're a , non chang , thei're a non changeabl list .
and , and the syntax of them is pretti much the same as a list except that we us parenthes instead of squar bracket .
okai ?
and so like here is a three tupl , a tupl with three item in it , glenn , salli , and joseph .
thei ar number zero , zero , on , and two .
so the second thing is on .
so x sub two is inde joseph .
you know , we can pass them in as sequenc to thing like max or min or sum .
and so the maximum of <num> , <num> , <num> is <num> .
and we can loop through them .
so here is y , it's a tupl .
it's <num> , <num> , <num> .
and iter is go to through the three , three valu , right ?
and so it's go to print out <num> , <num> , <num> , which run the intend code onc for each of the valu insid the tupl .
and so in thi respect thei're veri much like list .
but thei're also differ than list in some real valuabl wai .
tupl ar immut , and so if you recal when we talk about list , we compar them to string , becaus both list and string ar a sequenc of element where the first on is zero , on , two , and et cetera .
but if we , if we look at a string for exampl , and we have a three charact string a , b , c .
and we want to chang the third charact , y sub two , to d , it complain and sai , no , you can't do that .
but you can do it on a list , so if we have a list <num> , <num> , <num> , and we sai x sub two is <num> , which is the third item , then the third item chang from <num> to <num> .
okai ?
so thi is mutabl .
thi is not mutabl .
and tupl ar also like not , ar not mutabl .
thei're like string , thei're sort of like list , in term of what thei can store .
but thei're like string in the fact that thei can't be chang .
so here we creat a three tupl , a three item tupl , and we try to chang the third thing from <num> to <num> and it sai you can't do that , not mutabl .
okai ?
so , so it's kind of like list in the kind of data that we store them , we store in them , and it's kind of like string in that you can't chang them onc you creat them .
so thi parenthes , thi constant , is the moment of creation .
onc you've put the thing in , you can't fiddl around with them .
there's a bunch of other thing you can't do with tupl .
you think why am i even , why even us tupl ?
we'll get to that in a second .
so here is a three tupl with the number <num> , <num> , <num> .
you can't sort it , becaus if you sort it , that would chang it .
you can't add to it .
you can't append the valu <num> to the end of it , becaus that would chang it .
and you can't revers it .
so , none of these ar allow .
those ar thing you can do with list , but you can't do with tupl .
and you can read the document , but we can also us that built in dir function , that realli awesom dir function , where we make a list and we sai hei , python , what will you let me do with list ?
well , you can append , count , extend , index , insert , sort , revers , remov , pop .
lot of thing .
now we make a tupl and sai hei , python , what can we do with tupl ?
well , you can do a count or an index , which mean you can't do all these other thing .
so thi is sort of a , a veri much a reduct .
becaus everyth you can do with tupl , you can do with list .
but not everyth you can do with list , you can do with tupl .
so why ?
why did i just wast all thi time introduc tupl ?
all thei ar is have parenthes .
what good ar thei ?
well , it turn out that thei're much more effici .
becaus python doesn't have to deal with the fact that we , as programm , might chang them , python can make them quicker , thei can us less memori , all kind of thing that save a lot of process time in python .
so when would you us a tupl ?
well , in particular , if you're go to creat some list that you're never chang , we prefer to us tupl .
and there's a lot of situat in program where we creat what we think of as a temporari variabl .
and if we're go to us , creat it , us it , and throw it awai without ever modifi it , we prefer tupl in those kind of situat .
okai ?
so we prefer tupl when we creat thing that ar just temporari .
it's the fact that thei're temporari variabl .
thei're like temporari list .
becaus thei're effici .
thei're quick to make and thei're quick to get rid of , and thei're quick to go through .
now , anoth realli neat thing about python that i realli like is that is the fact that you can do sort of two assign in on by put a tupl on both the left and the right hand side of your assign statement .
so if we think about an assign statement , i like to think of it as have a direct .
it sai , these thing go there .
well , in python , you can actual send two thing at the same time .
the <num> goe into the x and the fred goe into the y .
thi is a tupl .
thi is a tupl .
you , you cannot have constant on thi left hand side .
you can have variabl or constant on the , or express on the right hand side , but thi must be two variabl .
similarli , in thi , the <num> goe into a and the <num> goe into b .
now , it turn out that you can syntact elimin the parenthes if you realli want .
and so thi lead to a prettier syntax , i think .
it's the exact same thing with or without parenthes , where we basic just sai , hei , come back , a and b ar assign to the tupl <num> , <num> .
and so you can elimin the parenthes as long as it's veri clear what's go on in the tupl .
and so thi , thi might be a littl disquiet when you first see it , but it's just a tupl with no parenthes and the <num> goe to the a and the <num> goe to the b .
now , it turn out we alreadi did thi .
i sort of blew by thi in the previou lectur in dictionari becaus it allow us to go through the dictionari's kei and valu with two iter variabl .
and so , if you rememb , here is a dictionari .
we put two item into it and and we can call d . item and get a list of tupl , a list of two tupl .
two tupl ar a quick wai of sai a tupl with two thing in it .
it's a two element list that consist each element is a two tupl .
and it's the kei and the valu , kei and the valu .
and so if we just print thi out , it's a list .
so then when we put thi on a for loop , it is a list , but the thing insid the list ar each a tupl .
each thing insid the list is a tupl .
so , when thi iter variabl goe to there , it is like thi tupl is be assign into k , v .
which mean the kei , kei goe into k and the valu goe into v .
the name i pick for k and v don't matter , do not matter .
it's just , it's just the first the first on and the second on .
so k go , k and v point here .
then the next time through the loop , k and v point here .
and so that's how csev <num> and chen wen <num> happen .
and so thi is realli a tupl assign or a tupl iter through a list of tupl iter variabl or a pair of iter variabl walk through the list , okai ?
we don't do thi a lot , and it's realli quit , it's most heavili us for thi situat where you're go through a dictionari and you want to see both the kei and the valu .
and then you us thi method insid of dictionari call d . item .
anoth thing that's cool about tupl ar that thei're compar .
so less than , greater than , equal .
and so , thei look , thei first compar the first , leftmost , thing , then if that match , thei go to the second on , and then if that on match , thei go to the third on .
and so if we're ask , is <num> , <num> , <num> less than <num> , <num> , <num> .
and the answer is true .
and it onli look at the <num> and the <num> , and that's less than , so awai we go .
if we ask is <num> , <num> , <num> less than <num> , <num> , <num> ?
well , <num> and <num> match , so it goe to the second on .
<num> and <num> , well thei don't match and thei're less than , so <num> is less than <num> , so it so it's true and it doesn't even look at these number becaus it doesn't have to .
right ?
in thi on , it doesn't look at those number .
and now if we sai , come here , is jone , salli less than jone , fred ?
well , it compar thi and thei're equal .
so then it ha to look to the second on is salli less than fred ?
well , no , becaus s is not less than f .
and so that answer is fals .
is jone , salli greater than adam , sam ?
well jone is greater than adam , so it never look at these variabl , and that turn out to be true .
so these ar compar .
which mean we can us the less than , less than or equal to , greater than or equal to , equal to , or not equal to .
so we can us these oper on whole tupl .
now thi turn out to be quit nice , becaus thing that can be compar can also be sort .
okai ?
so here is a , b , and c .
a map to <num> .
b map to <num> .
c map to <num> .
if i look at d . item , i get back a list of two tupl , three two tupl .
thei ar not sort becaus dictionari aren't sort .
a map to <num> , c map to <num> , and b map to <num> .
the order that these come out in is not someth that we can control .
but if we put these item into a variabl , call it t , t is the list of tupl basic , and then we tell it to sort , it can do comparison between all these .
and it can sort them and now thei're sort in kei order a , b , c .
now you'll never get ani kei that match so it never look at the second on , right ?
becaus there's on and onli on kei a or b or c .
the valu <num> never get look at .
so thi end up sort by kei .
sort by kei .
okai , so thi is the wai to sort by kei .
we take a dictionari .
we get back a list of tupl , kei valu tupl , then we sort that dictionari .
i mean , sort that list of kei valu tupl .
and then , it's sort by kei .
okai ?
so that's on sort .
there is a built in function in python call sort , which take as a paramet a list , and give you back a sort version of that list .
so we can collaps these oper by sai , oh , well d sub item is thi list of tupl non sort .
but sort of d sub item is that same list of tupl , but then sort .
so immedi in on step we have a , b , and c properli sort .
and we can combin into all thi into on nice littl for statement , where we sai for k , v in sort of d sub item .
so thi is now go to first sort the kei valu pair by kei .
and then k , v is go to run through them , so k's go to be a , <num> .
then it's go to , k's go to be b , v is go to be <num> .
k is go to be c , v is go to be <num> .
so now we've print these thing out in alphabet kei order .
okai ?
so by ad sort to d . item , that mean that thi loop is go to run in kei sort order .
kei sort order .
and that's becaus sort take a list and then return , as a , take a list as unsort list as input and return a sort list .
okai ?
now , if we ar do someth like our common problem of what's the most common word , what if we want to sai , what's the five most common word ?
in that case , we probabl want to sort in descend order by the valu , not the kei .
okai ?
so we want sort by the valu instead of the kei .
so thi is a situat where we're go to creat a temporari variabl .
so here's how we're go to do it .
here is our dictionari with a , <num> and we want to sort now by the valu , we want to , you know , mayb see the most common or sort by the valu .
and so we ar go to make a temporari list and then we ar go to loop through the item .
so , so thi is go to just loop through them and it's go to loop through them in non sort order and we ar go to add us the append oper to thi littl list that we ar make .
but we're go to add a tupl that is valu , comma , kei .
so if we make the valu first and the kei second in thi tupl .
so thi syntax here , thi parenthes v comma k .
that mean make a two tupl with valu from the v and k variabl .
and , append a list .
so you're go to end up with a list of two tupl .
so if we , if we take a look when we're all done with thi , each of these is a tupl .
<num> , a get append ; <num> , c get append , and it wa simpli the opposit order .
the , the tupl , each of the tupl now ha the valu first and the kei second .
valu first , kei second .
valu first , kei second .
so thi is a bit of temporari data that we've creat , thi is a bit of temporari data that we've creat .
then what we do is we call the sort method .
sort , take thi list .
list ar mutabl .
the individu tupl can't be chang , but the order of the tupl can be chang becaus thei ar in a list .
tmp . sort , and then we're go to sai revers equal true so you sort from the highest down to the lowest .
okai ?
and now , tmp ha been sort and now it is in a new order .
<num> , <num> , <num> is what caus it to be sort .
so we know that the biggest valu is <num> , the kei of c .
next biggest is <num> with a kei of a .
and the smallest is a kei of <num> , a valu of <num> with a kei of b .
so the trick here is if we want to sort in some other wai , we just construct a list where we put it in the order that we want it sort .
and thi is more import now .
the valu is more import than the kei .
now if we had anoth , like a <num> , f , it would sort first on the <num> .
and then it would , it would sort the f , <num> after the c , <num> .
right ?
so we don't have ani duplic .
but we could have the we could have the kei of c to <num> and we could have f also be <num> .
okai , so , take some time on thi , get thi on right .
so now i want to show you a program that is go to show you the ten most common word .
we did a , a loop befor where we did the most common word by do a maximum loop at the end by look through all of the count in a dictionari and then pick the maximum .
but what if you want the top ten ?
right , but that , that you don't want to write a loop for that , so we're go to us sort .
so here's what we're go to do .
we're go to open a file .
we're go to creat a empti count dictionari .
then we're go to write a for loop that read each line for line in fhand .
then i'm go to split each line into word , base on the space , us the dot split .
then i'm go to loop through each word in each line and us our histogram or dictionari pattern where i sai count sub word equal count dot get word comma zero .
that basic sai go look in count .
if the word kei exist , give me back the valu that's in that , otherwis give me zero .
so thi both creat the new entri and updat old entri .
all in on nice simpl statement .
so at the end of thi bit of code right here we ar go to have count with keyword word count pair .
okai ?
so , thi is someth we've done befor .
it's just dictionari , read , split .
and then thi pattern of how to accumul in a dictionari .
then what we're go to do is we ar go to make a new list call l s t and now we're do thi kei valu in the item .
so thi is go to go through the kei valu pair in thi list , which is the kei valu pair from the dictionari .
right ?
but then we ar go to creat thi temporari list of tupl that ar val , comma , kei .
so val is like <num> , the ; <num> , hello ; and that's what the list is go to look like , right ?
it's go to be tupl , but it's go to be the valu and then the kei , rather than the kei and the valu .
thi on here is kei , valu ; thi on here , l s t , is valu , kei .
now that we have a list that's valu , comma , kei , we ar just go to sort it becaus now it's go to sort base on the first thing in that tupl and we're go to revers it so the biggest valu ar near the top .
and so when we're all done thi is go to be a list , except it's go to be sort base on the valu .
so that's just on step to sort it .
so thi is a good exampl of how we sort of go through some work , we get a data structur , a list , the wai we want it and now we can sort of leverag the built in sort .
we had to prepar a list so we could us the built in sort .
we could do thi by hand , but it'd be veri difficult .
but it's easier to sai i think i'll make a list , and then i'll sort it .
okai ?
so i , you know , i made two list basic .
i made the origin on , then i made thi on just for the purpos of sort .
and now what i am go to do to print out the top ten is i am go to write a for loop val , kei .
rememb , thi list l s t is valu kei .
and i'm go to sai for val , kei in lst , us list slice , start at zero , up to but not includ ten , which is inde is the first ten item .
now i'm go to print out kei , valu , so it's go to print out the , <num> ; fred , <num> ; and so i'm go to first print the first ten .
so , thi list is in val kei order , the tupl ar val kei order .
and so i'm go to print it out in kei val just so that i print out in a wai that make the most sens .
and so , thi is a simpl wai to do a simpl histogram of the occurr of word in a file .
so again , you should know thi , you should know everi line .
you should know everi line .
go back , review a coupl time , but you should know , you should know the mean of everi line of thi .
and if you do , that's realli good .
so as you becom more power and capabl insid python , you will realiz that there ar sometim even shorter wai of do thing .
now , what i'm show you here is not that differ than what wa on the previou page , it's just realli dens , but you have to concentr .
so if , i want you to understand what's on that previou page .
if you don't understand thi , don't feel bad .
i am go to explain it to you but don't feel bad if you don't get it .
okai ?
so i'm just go to explain it .
if it doesn't feel right to you , go back and look at the previou page .
okai .
so here we go .
i am go to have a dictionari .
and then i'm go to print , in on line , sort by valu .
so we'll start from the insid out .
so thi is a thing call list comprehens .
it look like a list constant becaus we start with squar bracket .
but thi is a python syntax that sai construct dynam a list of tupl v , comma , k and i would like you to loop through the item with k and v take on the success valu .
so thi is creat that revers list where valu and kei ar the order of the item in each tupl .
and it's go to do that , so thi is go to expand .
it's sort of like , it goe expand thi , it make a temporari list , right now .
now if you look on the previou slide we call that thing l s t .
but here we don't even call it l s t , and then onc we have the list of tupl in valu kei order , then we simpli take and pass that into sort .
thi is a function call , the sort function .
and then , now i'm not revers it , but the print statement print out it ascend order of the valu <num> , <num> , <num> .
okai ?
so thi you can , you can make these more dens onc you're a littl more comfort with what's go on .
it's sometim easier to construct someth that seem to have step , where you can put , you know , you can put a debug print here , you can put a debug print here , you can do a debug print here , and you kind of see what's go on , right ?
wherea onc you realli understand thi you can , you can write some more dens python .
when you understand thi , it's okai .
right ?
so i'm not sai you're suppos to understand thi , but i just want to point out that it's possibl to do thi in a tighter fashion .
so , tupl ar like list except that you can't chang them .
right ?
you can't chang list .
and now you can compar them , you can sort them .
you can sort list of tupl .
you can't sort within the tupl itself .
the two valu on the left hand side of the assign statement , we can us sort , and we plai with sort dictionari by kei and valu .
so , that's kind of the end of thi lectur .
and and so at thi point i just want to kind of congratul you on make it through the first ten chapter of the book .
so i'll , i'll drink a cup of tea to you .
here's your cup of tea , here's my toast to you .
in my slitherin cup .
and so it's time for a graduat ceremoni .
so , i'll give a a littl graduat speech here with my graduat hat on and thi is my thi is my slitherin wand and so , so the reason i am congratul you at the end of thi chapter is that at thi point , you kind of know almost , you know all the fundament of program .
program realli come down to what's call algorithm and data structur .
sometim we solv a problem by a clever seri of step that we put togeth .
and sometim we solv a problem by creat a clever data structur .
and so the first few chapter were about algorithm .
step , loop , function , veri procedur .
how you sort of creat these thread of step and do thing a bunch of time or skip around or whatev .
and in the last three chapter that we've cover we're talk about data structur .
and program power come when you combin algorithm and data structur .
now in the next chapter , start with chapter eleven , regular express , we're go to learn sort of more clever wai of do the same thing .
so you kind of know how to do a lot of stuff now .
from thi point forward , you'll see , oh , boi , that's more clever .
or we'll us a databas .
oh , that's more clever .
but it's not fundament differ .
and so that's why it's import for you to understand , befor you leav thi moment , to understand everyth that we've cover so far .
loop , function , string , file , tupl , list , dictionari , becaus thei ar kind of the foundat and everyth els will just kind of be a subtl refin improv .
so onc you understand that you've kind of begun , you've becom a basic programm and i like , i like poof !
like i , i like magic asperio you and turn you into pythonio , someth like that .
okai .
enough with the harri potter refer .
thank you for spend all thi time with me .
if you've gotten thi far , i realli appreci it .
and of cours it's realli just the begin but i hope that it ha been a good begin .
thank you .
hello , and welcom to yet anoth work exercis for python for informat explor inform .
i'm charl sever , i am your tour guid to thi particular work exampl .
and thi materi is creativ common attribut , and i hope to see the clever and cool thing that you can do with it .
thi is part of my www . pythonlearn . com websit that help you to get , learn python sort of from the veri begin with video and other materi to help you go along with the book .
of cours , the book is creativ common attribut , so pretti much everyth here is free for you to us and , and adapt as you see fit .
so we're take a sort of a work exampl from the tupl chapter , and the , the task that we're given is find the ten most common word in a file .
and we will , will do that , and so if we take a look at the basic overal structur .
we're go to read a file .
we're go to make a dictionari , an empti dictionari , and we're go to read the line , we're go to read the file line by line .
we're go to split each line , then we're go to loop through the line , us the dictionari pattern from the dictionari chapter , us get so that we can both access and initi new word that we haven't seen at the same time .
and then we ar go to do , we need to sort , right ?
but we need to sort by the valu instead of the kei .
so we're go to make a list .
and then we're go to loop through the result of the dictionari .
and we're go to make a new tupl .
but instead of be kei , valu , which is what you get from item , we're go to do valu , kei .
and then we'll sort that in revers order , and then we'll simpli print the first ten element of that sort in revers order .
and becaus we're construct carefulli thi new tupl valu , kei in the right order , valu will be what's sort on first , and then in case where valu match , it will sort on kei .
wherea if we just took item , which is kei , valu tupl , then it would sort on the kei , and that's quit easi .
so , that's the basic idea so let's go ahead and and get start .
so i'm go to grab some of thi and save myself a littl bit of time , and past that in .
i'm go to us actual romeo short , becaus i don't want to mess with it .
romeo ha punctuat in it , so i'm go to go and i'll call thi under tupl i'm go to call thi gui topten . py .
i'll see if it's in my tupl folder , yep , just alwai saniti check .
so let's , let's go ahead to pythonlearn and grab that romeo short file .
so i'm go to grab romeo short .
if i look at romeo , romeo short ha conveni ha the , or just romeo conveni ha the punctuat remov and it's small , so we can do debug .
romeo full is a littl harder , and i cover that in the book in some more detail to get rid of punctuat and stuff .
not too bad , not too bad , but we won't talk about it here .
so i'm go to grab romeo . txt , and i'll save thi to my dictionari , my tupl folder as romeo . txt .
and i should be done with that now .
and i'm done with that .
so if i take a look at tupl again and i've got romeo . txt in thi file topten . py .
and it's not romeo , it's romeo . txt .
and i'm just go to , split .
i mean , i think , i hope by now you can read a text file and split it into word , and count those word in a dictionari .
so i'm just go to print out the dictionari , the count dictionari that we've got at the end .
and let's see how that work .
so i'll go onto my desktop and thi is under tupl .
and so there's romeo . txt and topten . py .
so let's go ahead and run topten . py .
and so there we go .
we have just sort roar through , broke it into word , broke it into line .
and we have a nice conveni littl thing here .
now , you know what , i'm go to do on thing that's not in the exampl .
thi , the fact that these ar upper case , i don't know if it's go to caus a problem or not , but i want to , thi is , thi bother me .
and so , so i'm go to , i'm go to forc all the word to be lower case .
and so i'm go to call , i'm go to make a thing wrd equal word . lower .
i think it's lower .
we'll find out fast enough .
so i'm just go to grab a lower case version of word and make it be w r d , and that's what i'm go to put into my dictionari .
so let me run thi again and see if i got it right , yeah .
so now we see thing like 'who' is lower case .
i don't think it chang ani of the number ; it mai have .
but , i just , i think we shouldn't treat upper case or we should make thi case insensit , so we'll map everyth to lower case .
so i just did that by map it to lower , and then us w r d instead of word after i made a copi .
so , so , here we go .
so then what i'm go to do is i've got my count , and i'm go to print the result of the item .
so that give us a list , instead of just show it , it give us a list of tupl .
so there's a tupl .
it a two item tupl .
tupl , tupl , and it's kei valu pair .
okai ?
and we can , thi is us now , in particular becaus we can construct a for loop that goe through for kie , vaal .
kei and valu .
kie , vaal equal , i'm sorri , in count . item .
i get all confus try to creat realli non mnemon variabl .
so we got kie and vaal and , you know , it's , it's two iter variabl .
and the wai it work is , you know , these will iter through each tupl , tupl , tupl .
and then kie will be the first thing in the tupl , which is the kei , and the valu will be the second thing in the tupl .
kei , val ; kei , val .
and so , kie will bounc through these at the same time as vaal is go to bounc through the correspond valu .
so that's quit nice .
so just , and i alwai love saniti check , so i'm go to print out kie and vaal , just print them out .
yeah , someth's wrong .
kie , vaal , and , oh , count .
so if i , so here we go .
traceback line <num> .
the name count is not defin .
i wa so quick , i didn't even read what it told me .
so look at line <num> , go on line <num> , and then i forgot my s .
so it's pretti much .
you know , onc you get us to thi , it's pretti much tell me what it want to do .
so now i'm go through my tupl .
here's my tupl .
now i'm go through the tupl on at a time .
just dump them out in a loop , and awai we go .
now , the whole problem is we want to make a new tupl .
okai ?
and i'm go to call thi newtup , newtup .
and i'm go to creat a tupl , and i can do thi by just put these two thing in parenthes , except that i want vaal first , and kie second , okai ?
so i want vaal first and kie second , and so now i'm go to print out newtup .
now you'll see that as i loop through each of the kei valu pair , i'm just make a new tupl where thei're revers , where the valu is first and the kei is second .
right ?
so valu , kei ; valu , kei ; valu , kei .
and now i'm go to stick thi in a list .
and i'm go to make , i'm go to call my list flip .
and i'm go to sai , give me an empti list .
so , so i mean , i'm start an empti list call flip , and i am go to tell flip to append to itself .
so i'm now extend thi list each time through the loop .
take that newtup that i just made .
so we've got newtup .
and i'll take my print statement out , becaus that'll be obviou .
so i'm go to append newtup to the end of my flip list .
and then i'll print , at the end of thi , print flip .
okai ?
so i make a tupl .
instead of print it i just append it to thi list , then i print the whole list out afterward .
okai , so thi is a littl messi , but here is the first list .
it's got kei , valu , and here's the second list .
it's the exact same list as befor except it's valu , kei .
now , it's exact same list , we didn't take anyth out , we didn't add anyth , we didn't sum anyth , we didn't do anyth .
so then , what is it that we're go to do with thi list ?
well , we can us the total , well , we could us sort but we're not go to do that .
i want do thi .
i'm go to sai , i want to take that flip list and i want to sort it .
sort and then print flip .
just sort it .
now the kei of sort , the kei of awesom of sort , is that sort is done by repeat comparison , and it's compar thi tupl to thi tupl .
but the rule of tupl comparison is it first check the first pair , and then it check the second pair .
it onli check the second pair if the first pair doesn't match .
so <num> , <num> doesn't match and so it sort it base on the <num> and the <num> without even look .
but then when there is two <num>'s that match , it actual doe check the second two word .
so <num> , and will sort .
the and and the the will decid where the <num> , and and the <num> , the tupl end up sort .
if that make ani sens .
okai ?
so let's just print thi out .
actual , let's print , print flip , not clip .
we can make a clip on too later .
and i'm actual go to get rid of thi print , so it's go to print flip befor and after .
so watch thi .
so here's flip befor it's been sort , in whatev order it wa in the dictionari in the first place .
and now , here's flip in the final order .
and you see that you know , it's in , it's in sort of revers order , where , you know , <num> and , is , and not ar here at the end , the <num>'s ar in alphabet order within the <num>'s , becaus tupl , check .
oop , don't do that , don't do that .
that wa nasti .
and that wa realli nasti .
it's becaus i wa copi and past .
so within all the <num>'s it actual sort base on the alphabet sort of the second paramet , or the second item in the tupl wherea in among the <num>'s all sort later .
so thi actual isn't quit what i want .
and so i'm go to sai , revers equal true .
becaus i actual want to sort it so the big number ar at the front .
so let's run that littl bit .
so check that , right ?
so now i got my same sort .
it's got the unsort , no it's got the sort , but the big number ar at the begin .
and you'll notic it's kind of in revers alphabet order becaus the big word ar at the begin among the <num>'s , but eh , whatev , we're close enough for govern work .
so now i want to print out the top ten , okai ?
oop , don't , i did that again .
i want to print out the top ten .
i'll just do like the top five .
do the top five .
so , i could do someth simpl .
we'll get rid of thi .
we trust that it's now properli sort .
i could sai , print thi list up to but not includ <num> , by us list slice .
so there we go , there's the top five .
but that look kind of ugli , mayb it doe , mayb it doesn't .
so i'm go to write a super cool for loop , but again simpl , right ?
just for me to check it i could sai , you know , print the first five flip .
thi littl slice list slice is a great wai if you're us a lot of data to kind of keep your data from be total insan .
okai ?
so i'm go to write a for loop , for kei and valu in flip , and now i'm go to sai so i'm go to sai , onli go through the first five .
so thi loop will onli run for the first five .
just like thi onli print the first five , thi is go to iter onli through the first five .
and kei and valu will go through the kei and the valu valu of these first five .
<num> , the .
kei , valu .
<num> , is .
and now i'm just go to print a sweet cool messag out .
and i'm just print complet insan , partial mnemon thing .
so i print out my top five kei and valu .
so let's take a look at that .
let's go ahead and run that babi .
winner <num> is the ; <num> , is ; <num> , and ; so we saw five of these thing .
five of them , and we're see the kei and the valu .
it will probabl be more easili read if i just did that .
right ?
so <num> , the ; <num> , is ; those ar the top five word in my littl program .
so let's kind of take a look at thi and review .
right ?
we open the file .
we make an empti dictionari .
we do our standard file loop , split each line .
newlin ar kind of chomp up in the split , so we don't have to worri too much about it .
we loop through the word .
we chang it to make it go lower case for each word .
we us the get pattern to both initi new word to <num> and add <num> to exist word , while us thi awesom get .
now we want to flip .
we want to flip the , the order in each tupl .
we want to make the tupl from kei , valu tupl , which we get from item , to valu , kei tupl .
we append each of those tupl to a list , then with the tupl that have the , the vaal and the kie in them .
i can't write with thi veri well .
we sort them in revers order , but the vaal is go to be the most import thing it get sort on becaus it's the left most thing in the tupl .
and then we simpli print out the last five .
the top five of thi tupl after the sort .
and so that , pretti simpl , print out the top five word in thi particular file .
okai ?
simpl enough .
thank a lot .
and see you see on the net .
hello and welcom to chapter <num> , regular express from the book python for informat explor inform .
as alwai , these slide ar copyright creativ common attribut , as well as the audio and the video that you're watch or listen to right now .
and , so regular express ar an interest thing .
you've seen from , in the chapter up till now , i've , i've had a singular focu on sort of pull inform out of data .
raw data , thi mailbox file that perhap you're get tire of alreadi .
but it's a lot of fun , becaus i can have you go look for someth and , and pick it out .
and you're do someth that like would be realli pain to do sort of by hand .
and while it's not all of comput , i mean , there's game and there's , you know , thing like weather comput that do calcul , pull and extract data out is a big part of comput .
and so there's actual a librari that's built specif to do thi .
and , and if you start do a few find and slice , it get kind of long after a while and that's like split , for exampl , realli save us a lot of time .
but sometim the data that you ar look for is a littl more sophist than broken into space or colon or someth like that .
and you just want to like tell someth to go find i see what i want , and i see where it's embed in the string , go get it for me .
and regular express ar themselv a program languag .
thei're like a realli smart wild card for search .
so we've us wild card in variou thing in search , but thei're , thei're a realli smart version of a wild card .
and so , regular express ar quit power and thei're veri cryptic .
and as a matter of fact , you don't even need to learn them if you don't feel like it , right ?
i've got thi littl guid .
i need a guid for myself when i do regular express .
it sometim take me a few minut to write a regular express to do exactli what i want .
so in a wai , write a regular express is like program , write a program .
it's highli special to search and extract data from string .
but it's like write a program and it take a while to get it right and you kind of like , oh , chang thi , what about a slash there ?
and , so , you , but thei actual ar kind of fun .
and , and thei ar a great wai to sort of exchang littl program snippet to sai , oh yeah , i'm look for thi , oh here's a littl reg express you might try and then , so thei're , thei're like program themselv .
it is thi languag of marker charact , so when we look for regular express , some charact like a , b , c , have mean as a , b , c but some charact like caret or dollar sign mean at the begin of the line , or at the end of the line .
and so we encod in thi string a , a program , basic .
and so it's a rather old school languag .
it's from long time .
it predat python , which is over <num> year old , and so it's , it also mark you as sort of a littl cool , right ?
it's a , it's a distinct mark that make it so that you know someth other peopl don't .
right ?
so you can know how to program , but if you know regular express it'll be like woah , i tri to look at those and thei're kind of tough .
in a wai , know regular express is kind of like a tattoo .
so i , it's casual fridai and that's why i'm wear a t shirt todai and so i figur i would come in todai in a t shirt , but see as it's the first time i'm wear a short sleev shirt , it's also the first time i can show you my , show my real tattoo here .
so , here's my real tattoo and in the middl is sakai , the open sourc learn manag system alwai close to my heart .
and then you have the im logo , which is im learn tool interoper , which a standard , it mean a lot to me .
blackboard , olat , learn object , angel , moodl , instructur , jenzabar , and desir2learn .
i call thi the ring of complianc , becaus these ar all of the first six or seven learn manag system that compli with the im learn tool interoper standard specif , which is someth that i spent a lot of my life make work .
so i figur i'd make a tattoo and just kind of part of my rough , tough imag and , and actual regular express ar inde part of my rough , tough imag , becaus i'm like , i'm down with regular express .
and peopl ar like impress with my regular express knowledg .
but as impress as i am , i still need a cheat sheet , so i'll have a cheat sheet that you can download hopefulli on the pythonlearn websit or whatev , and i just , it doesn't have to be much .
it's realli just a kind of a , a crutch , and these ar the charact that have special mean , like caret or dollar sign match the begin or end of line , respect .
so thei're not realli match a dollar sign , thei match , thei , thei mean someth in our littl mini string like program languag .
so , like mani thing that we do in python go forward , onc you want some sophist capabl , it come with python , but it come in the form of a librari .
and so the regular express librari we have to sai import r e at the begin of our program to import the regular express librari .
then we call re . search to sai i'm look for search from the regular express librari .
there's two basic function or method , two , two basic capabl insid thi librari that we're go to look at .
on is search , that replac find , it's like a smart find , and then findal is a combin of a smart find and a automat extract .
so we'll look at both of those in turn .
and i'll do it by compar them to exist python that you kind of alreadi should know at thi point .
so here's some code that's , sai , look for line that have the word fr , have the string from colon in them .
right , so , we're go to open a file , we're go to strip the white space .
if we find we , hunt within line for from .
if it's greater than or equal to zero then we'll print it .
and so thi is just go to give us a number .
if it's , if it's not found , it's neg on .
so it's onli go to print the line that that have from in them .
here is the equival us regular express .
so these two thing ar equival .
so we have to import the librari , like i mention befor , and all the rest of it's the same .
the if test is re . search .
that sai within the librari re , call the search util and then pass in the line , the string we're look for and the line , the actual text we're look in .
so thi is like look for from insid of line and return me a true or a fals , whichev , depend on whether you find it or not .
now you might sai , i , you just got done tell me that it , it wa more dens .
and the answer is , there's a few more charact here .
but we'll see in a second how you can quickli add more power to the regular express .
find , you have to start ad more python line to make it more sophist where in the regular express you start chang , you chang the search string to give more of the direct of what you're look for , and that's what we'll be do , pretti much , is chang the search string .
so now if we want to switch to sai , wait , wait , wait , we don't just want the from anywher in the line , we want it to start with from .
so we would chang line . startswith 'from' , and that's either go to be true or fals depend on whether or not the line start with from .
now , we do the same thing with regular express by chang the search string .
so now we ar in regular express .
so thi realli just isn't a string , it's a string plu charact that ar interpret as command by the regular express librari .
so the caret , which is the first on on our , our littl regular express sheet , match the begin of the line .
it's not actual a caret .
so that sai , the first charact , thi two charact sequenc , caret f , mean f but in column on , in the first charact of the line .
and so , again , thi is go to give us a true or a fals , if thi regular express match .
the , the begin of the line , from and it's the same as thi , it's , doe it start with from .
so again , these two ar equival .
but you see the pattern where we're go to do someth to thi string us these charact that have mean , okai ?
so , the next thing that's most commonli done other than caret and dollar sign for the end of line , is the wildcard charact and so , we've us wildcard possibl in like do , where we can us ?
or in like a dir command .
dir . . if you're familiar with that , or even a unix command like ls , you know , star dot whatev .
thi is not how regular express work .
and the problem is is that dot , dot is that it match a singl charact in regular express .
asterisk mean ani number of time .
so if i look at thi , if i look at thi and color code thi to make a littl more sens , the caret is actual kind of part of the regular expect , regular express program languag .
sai i'm , i'm i'm a virtual charact match the begin of line .
the x is a real charact .
the dot is part of the regular express program languag , ani charact .
star is part of the regular express program , it sai the immedi previou charact mani time , zero or more time .
and then colon match the colon .
and so if you look at line , these ar the kind of line that will give me a true .
becaus thei start with an x , follow by some number of charact , follow by a colon .
so that's true .
start with a x , follow by some number of charact , follow by a colon .
okai ?
and so that's basic how thi work .
and so thi littl , thi , in thi five charact string there ar , you know , some of these thing ar like instruct and some of them ar the actual charact we're look for .
so the x and the colon ar the charact we're look for , and the caret , dot , and star ar program .
right ?
thei ar logic that we're ad to the string .
okai .
so let's sai , for exampl , you're . . .
part of ani of these thing , and part of the stuff we have done so far , ha to assum that the data is some level of be clean and so the data that i have been give you , mbox . txt , is not inconsist .
right ?
it doesn't have like too much weird in it .
i'm not try to trick you and mislead you , although we've had situat where you sort of get a traceback becaus you think there's go to be five word you , you grab a line , you break it , and there's onli two word and then you get a traceback becaus you're look at the fifth word , or someth like that .
but if your data is less clean , or even you just ar want to be real care , you can fine tune your match .
so , here's that same match .
give me a charact x , follow by ani number of charact , follow by a colon , and that's what i'm look for .
give me line that match that pattern .
so thi x start at ani number of charact , colon , great , thi , ani number of charact good , great .
oh wait , and there's an email x that sai x plane is two week behind sch , behind schedul , colon , two week .
well , the regular express didn't know that the dash made sens to you .
and you just assum that everyth that start with a capit x had a dash after it .
so x is what it start with , ani number of ani charact , and then a colon .
so thi becom true .
thi mai not make you happi , right ?
it mai not be what you're look for .
becaus you haven't been specif enough in your regular express .
so , we can be more specif in our regular express .
so for exampl , thi is a more specif regular express .
it still sai start with an x as the first charact , then a dash , that's a real charact not a , then thi next thing , instead of be a dot , thi backslash capit s .
it's on the sheet .
whoa .
it's not on the sheet .
i lost the sheet .
come back , sheet .
i lost the sheet .
i can't live without my sheet .
backslash capit s mean a non whitespac charact .
so that mean space won't match .
and then i chang the asterisk , zero or more time thing , to a plu .
and that mean on or more time .
here is a charact , a non whitespac .
these two thing kind of work togeth .
a non whitespac charact at least on time , as mani as we like .
and then , a colon .
so , if we look here , it start with x dash , ani number of non whitespac charact , and end in colon .
start with x dash , ani number of non whitespac charact , end in a colon .
true .
true .
thi on start with an x , but doesn't start with an x dash .
oh , as a matter of fact , these charact ar blank , so thi becom a fals .
it doe have an x and it doe have a colon and match the previou on , but thi on here is more specif .
okai ?
so it's more specif and so it match what you want .
now it depend on what you ar look for .
mayb you do want thi line , and so you're look for x .
i don't know .
but if you want , you can be increasingli sophist in what you're look for in a regular express .
so now , let's talk about extract data .
so everyth we've done so far is , is it there or is it not .
but it's realli common onc you find someth you that want to break it into piec .
so we can combin the search and the pars into on statement .
and instead of us search , which return for us a true fals , we ar go to us findal .
so in thi exampl , i'm go to to show you a new syntax .
the squar bracket in regular express languag mean a wai to list a set of charact .
so thi sai , thi is a singl charact that sai , i want to match anyth in the rang <num> through <num> .
plu mean on or more of those .
so that sai , so thi is , thi whole thing sai on or more digit .
that's a regular express that sai on or more digit .
you can put other thing insid here .
you can put like , you know , you could make a thing that sai a b c d .
and that would sai , i'm go to match a singl charact that's a or b or c or d .
or you could sai like , you know , <num> <num> <num> <num> , bracket .
that's a singl charact that's either a <num> or a <num> or a <num> or a <num> .
so the bracket is a list of match charact and the dash insid the bracket mean rang .
we'll see in a second that you can stick a not insid the bracket .
it's on thi .
so , so again , rememb in thi littl mini languag , we ar program , right ?
we ar give instruct to the regular express engin , as it were .
okai ?
so , if we do thi , and here is an express that sai i would like to find , you know , thing that ar on or more digit .
and so , so it's on or more digit and , and so it's go to look through here and it's go to find it as mani time as it can .
so there is on or more digit , there is on or more digit , and there is on or more digit .
and so what findal give us back is a list of string .
so it found it .
where do i match ?
where do i match ?
it's look the whole time and then , it sai , oh , i've got it .
<num> , <num> , <num> .
so it actual extract the string that match and give you a python list of string .
python list of string .
kind of of like split , except it's like a super smart split , right ?
it's split , but i've direct it what to look for , and if , so here's an exampl of , you know , that's the on i just did .
find me on or more digit and extract them , so <num> , <num> , <num> .
here i'm sai , us the same bracket syntax , to look for a singl charact a , capit a e i o or u , and on or more of those .
and if you look , there ar no upper case vowel in my string .
so it sai i'm go to find all the thing that match a e i o u .
so thing like aa would match and , you know , ou would match .
and so that's what we , we would get if thei were in the string .
but becaus there ar none , we get an empti string .
so even if there ar none , you get an empti string .
so it alwai return a string .
it mai be a zero length string , and that's what you have to check .
okai ?
okai , now match ha thi notion of greedi , where when you put on of these pluse or asterisk it kind of ha thi outward push feel , right ?
and so when you sai , i'm look for someth that start with an f at the begin of the line , follow by on or more charact , follow by a colon , you can think of thi as push outward .
so if we look at a line here that ha from colon us the colon charact , it will try to expand , so it certainli ha to match the f and it's look for a colon , ani number of charact , but it's try to make the string that match as big as possibl .
so it skip over thi colon and goe to that colon and so the thing that we get is here .
and so , it ignor thi and said i will make as larg a string as i can .
so , that that's the plu that's do it .
dot plu push , it's like , i've got a colon , but is there anoth colon out there ?
so you push it , okai ?
so that's greedi match .
it can get you in some troubl , like be greedi in gener , and both asterisk and plu sort of behav in a greedi wai becaus thei're zero more or on or more charact , so thei can sort of push outward , okai ?
now you can turn thi off .
it's a program languag , we can tweak it , okai ?
and so we add a question mark .
so thi is a three charact sequenc now .
so if you sai dot plu question mark , that sai on or more of ani charact , push , but instead of be greedi and push as far as you can , thi mean stop at the first .
stop at the first .
oop , stop at the first .
i can never draw on thi thing fast enough .
stop at the first .
okai ?
and that's it , just don't be greedi , don't try to make the string as larg as possibl .
go with the smaller on , the smaller possibl on .
we still need to find an f , and we still need to find a colon , but when you find the first colon , stop .
and so what thi doe is thi chang it so that what we match is from colon instead of go all the wai .
so the greedi match push as far as it can .
the non greedi match is satisfi with the first thing that meet the criterion of the string .
so thi is a littl three charact program sequenc , ani charact on or more time and not greedi .
if , for exampl , we were try to solv the problem of pull the email address out of a string .
right ?
we can make good us of thi non blank charact and so the at sign is just a charact and then we can sai , i want at least on non blank charact befor it and at least on non blank charact after it .
so the wai regular express doe it sai , okai , i find my at sign and i push in a greedi manner outward , as long as there ar non blank charact , push , push , push , push , push , push , push , oop , stop .
push , push , push , push , push , stop .
okai ?
so it's some number of non blank charact , an at sign , follow by some number of non blank charact .
so it's , that's us greedi match .
it , it's do that , okai ?
and so thi is where we get stephen marquard , we can , and , and we would know if there wasn't there by the empti list , right ?
and so we get stephen . marquard uct . ac . za .
now , we can also fine tune what we extract , right ?
in the previou slide , we extract whatev match .
right ?
whatev thi match , it look across the whole string and found it , found the thing , shove it over , and gave us what it match .
but it's possibl to make the match larger than what's extract , to extract a subset of the match , and we'll see that on thi next slide .
okai ?
so here's thi same thing , which is an at sign follow , and then with non blank charact as far as the ey can see in either direct .
but i'm go to add to it caret from space .
so , so thi ha to be start with , the first charact ha to be a caret , thi , it's gotta have the word from , it's gotta have on space and then , immedi , it's gotta find thi , right ?
it's gotta find a seri of non blank , follow by an at sign , follow by anoth seri of on or more non blank .
and then what we do , so thi , if we didn't put these parenthes in , it would match and we would get all of thi data .
it would go to here .
but what we can do with the parenthes , the parenthes ar part of the regular express languag , sai , okai , i want to match the whole thing .
the parenthes aren't part of the care , a string up here .
i want to match the whole thing , but i onli want to extract thi part in parenthes .
so thi whole thing is a regular express that's match and then the parenthes part is what's retriev for you .
and so thi make it so that the onli time it's go to look for at sign is , ar on line that start with from space .
it is go to want the immedi next charact to be a non blank .
some number of non blank charact follow by an at sign , some number of non blank charact , it's go to stop right there .
and it's onli go to extract from here to here , and so we get out stephen marquard .
but thi is a pretti narrowli scope thing becaus the first four charact have to be from space .
and so that's a wai to combin a stricter match , even though you don't actual want all the data .
so you can add those thing all over the place .
okai ?
okai .
then , we , we , we can compar the differ wai of extract data .
so if we look at how we extract the host name .
rememb how we did thi mani chapter ago .
so we did a data . find , which sai oh , the first at sign is at <num> .
so the first at sign is at <num> .
then we sai we want to find the space after that .
so that's the at posit , that's <num> .
and then we want to extract the data that's on beyond the at up to but not includ the space .
and that is the variabl that we ar go to print out , host .
and so we've extract thi bit of inform and out come the host .
quit nice .
okai ?
we also saw anoth techniqu , and by the wai , all these techniqu ar okai .
all these techniqu ar fine .
anoth techniqu we saw , onc we sort of plai with split and list , wa what we , what i call a doubl split version of thi , where the first thing we do is we split that line .
the first thing we do is split the line and then we know , and blank , that the second thing , which is the sub on , word sub on , is the entir email address .
then thi is the doubl split .
we take the email address and we split it by an at sign and then we get a list of the piec of the email address , the email name and the email host , and then we grab the , the sub on of that , and then we have the host .
so that's a doubl , the doubl split wai of do thi , right ?
now in thi , we still haven't done the from yet , but it is the doubl split wai to do thi .
so , if we think about how we would do thi in a regular express , okai ?
we're go to sai , look through the string , findal , we're go to , us the findal , and the regular express explod up sai look through the string for an at .
do , do , do , do , do , do , got an at .
then , oh , start extract .
end extract .
and then thi is anoth form of the thi is on charact , it's a singl charact , match ani non blank charact , and zero or more of them .
okai ?
so find an at sign , start extract , end extract , match , thi is on charact .
that is a set of possibl match , and that's some charact , thi mean not .
okai ?
not a blank , that's a blank right there , that's a blank charact right there .
not a blank , as mani time as you want .
you might want to , we might want to turn that into a plu to guarante at least on .
so that might be better done as a plu right there .
so thi is , probabl make more sens as a plu , to sai , i want at least , after the at sign , i want at least on non blank charact .
and the parenthes simpli sai , i don't want the at sign .
so if the at sign , i realli want those non blank charact after the at sign .
okai ?
so that's what i want to extract .
so it's like , go find the at sign .
okai , great , found the at sign .
start extract , look for non blank charact , end extract .
so pull that part out and put it right there .
now an even cooler version of thi that you probabl kind of imagin right awai is , we sai , you know what , i would like thi first charact , the first part of the line to be from , with a blank , follow by ani number of charact , follow by an at sign , so the at sign is real , then start extract , then ani number of non blank charact , end extract .
so thi is a , thi is like eight or nine line of python all roll into on thing , okai ?
so , start at the begin of the line .
look for string from , with a space .
then skip a bunch of charact look for an at sign , skip charact until you encount an at sign , then start extract , match ani non blank , a singl non blank charact .
thi is kind of like on non blank charact , on non blank charact , but onc you suffix it with the asterisk that chang it to be mani non blank charact .
and then stop extract , okai ?
and so , you know , and so it's like find from follow by a space , great .
that's the first part .
now throw awai charact until you find an at sign .
then start extract .
keep go with non blank charact until you hit the first blank charact and pull that part out .
now the result is we get the exact same data .
but with thi ad to it , we ar much more narrow in the kind of thing that we're look for and if we get noisi data that like , someth like , you know , meet at joe's , right ?
we don't want that .
that won't match , right ?
we want that to be like a fals .
and , and it allow us to sort of realli fine tune our match and extract .
and thi is just the begin , thei ar veri , veri power .
so , the last thing that i will show you is sort of a program that is kind of like on of the program that we did in a previou section , except now we're go to us regular express to do it .
so if you rememb , we had thi thing where we're do spam confid , where we're look for line and you know , and pull thi number out and then calcul the averag , or the maximum , or whatev .
and so here is a , we import the regular express librari , we open the file , we're go to do thi with the , append to the , a list , we'll put the list .
we'll put the number in a list rather than do the calcul in a loop .
we strip the data .
now , here's the kei thing , right ?
we're go to have a regular express that sai , look for the first charact be x , follow by a dash , follow by all thi , all thi exactli ha to match liter , follow by a colon .
and then there's a space , and then we begin extract and we ar look for the digit <num> through <num> or a dot and we ar look for on or more , and then we end extract .
so that's the , the parenthes ar tell us what to pull out .
so that just mean that we're go to pull out those number , all the digit and the number , until we get someth other , i mean , all the digit and the period , and we'll get someth other than a digit and a period , and we , and then we'll be done , okai ?
and so if we , and so thi is go to pull those number out and give us back a list .
now the thing about it is , we have to realiz that sometim thi is not go to match , becaus we're send everi line , not just the on that start with x , we're send everi line through thi and so we need to know when we didn't get a match .
and that , the wai we know we didn't get a match is if the list , the number of item in the list that we got back , is zero , then we're go to continu .
so thi is kind of our if where we're search for the needl in the haystack .
but then onc we find what we ar look for , the actual number that we ar interest in , is alreadi sit here in stuff sub zero .
okai ?
and then we convert it to a float , we append it .
and when the loop is all done , we print out the maximum .
okai ?
and so thi is sort of encod a number of thing and end up with a veri , a veri solid and safe match .
so we're realli , it's hard for thi to find a line that's wrong and you could even improv thi a littl bit to make it even a littl tighter where we'd go find a number like <num> . <num> .
you could sai , oh , it's all the number ar zero dot , so you could make thi a littl , a littl more precis .
so it wouldn't , so it would even skip thing that you can make it , so it look exactli the wai you want it to look .
so , i emphas that thi is kind of a weird languag and you need some kind of thing .
we talk about all these .
we have the begin of the line , we have the end of the line , match ani charact , match space charact , match non whitespac charact .
star is a modifi that sai zero or more time .
star question mark is a modifi that sai zero or more time non greedi .
plu is on or more time .
plu question mark is on or more time non greedi .
when you have bracket syntax , it's a set , it's a singl charact that's in the list set .
so that's lower case vowel .
you can also have the first , if the first charact of thi is a caret , that flip it .
so that mean everyth except capit x , capit y , capit z .
so it's everyth that's not in the set , capit x , capit y , capit z , and then you can also put dash in to repres rang .
bracket a through z and <num> through <num> , and lower case letter and digit will match , but again , thi is a singl charact .
now , you can put a plu or a star after these gui to make them happen more than on time .
and you can even put them in twice .
so if i want a two digit number , i could sai <num> dash <num> , <num> dash <num> .
oop .
thi is on charact .
thi is on charact and thi is the possibl thing .
so that's , you know , <num> <num> would match .
<num> <num> would match , <num> would match , etc .
okai ?
and then the parenthes ar the thing that if you ar in the middl of a big long match string and you don't want to extract the whole thing , you can limit the thing you're extract to , to the stuff that's just in there .
with all these charact that have all thi mean , we have to have a wai to match those charact .
so dollar sign is the end of a line .
but what if we're look for someth that actual ha a dollar sign in the string ?
and that's what the backslash is for .
so if you put the backslash in front of a otherwis meaning charact , you don't , it becom the actual charact .
so thi is sai match a dollar sign .
those two charact sai match a dollar sign .
and then thi sai on charact that's <num> through <num> or a , or a dot .
and then we put the plu modifi to sai at least on or more time and so that sort of is a greedi , of cours .
so that will get us thi and extract it , includ the dollar sign .
so the escap charact is the backslash .
okai .
so there we ar .
now we're done .
so thi is littl bit cryptic .
it's , it's kind of a puzzl .
it's kind of fun .
and it's extrem power .
and you don't have to know it .
you don't have to learn it .
but if you do , you'll find that it's veri us as we sort of dig through data and ar try to write thing that ar pretti quick .
and , and , and thei , the thing i like about regular express is that thei tend to be , if you write them well , thei tend to be less sensit to bad data .
thei tend to ignor data , thei're , you can put more detail , i exactli want thi .
wherea you're , if you're write find and extract , you're make a lot of assumpt about the data .
that it's clean and you're not go to , you know , mi hit on someth .
so , okai , well , good luck , and you're us to regular express , and we'll see you later .
hello .
and welcom to python for informat .
right now we're go to cover chapter on .
i'm charl sever from the univers of michigan .
and i'm the author .
and i'll be your lectur , for thi onlin lectur of the first chapter of the book .
thi lectur and my slide , and the book , as a matter of fact , ar all open .
open content , open materi .
thei're copyright creativ common attribut .
and thi video record is also copyright creativ common attribut .
it's import to be explicit about copyright , and so i sai it right at the begin .
so , comput basic want to be help .
thei ar program .
matter of fact , thi is a microprocessor .
thi is realli just an electr part .
it's got wire and circuit insid of it .
and somebodi spent a lot of engin time , to make it so that these pin in the back take instruct from us , from oper system , from the hard drive , from the memori .
instruct come into here and then result come out .
it's realli sort of a veri programm hand calcul and it's our job to put instruct in .
thi thing , in a sens , is wire to be curiou about what's next , right ?
it's like it , it's , like , tell me what you want to do next .
what do you want to do next ?
what do you want to do next , and after that , what do you want to do next , and it just happen to do that a billion or so time a second .
and , so that's sort of the , the low level piec , and , but you can also think , if you have , like , a pda , someth like thi , all the button on here ar some kind of , you know , what's next ? right ?
each of those is sort of someth beg for my attent , some applic develop who's built a realli cool applic and sai pleas us me , pleas click me , i am sort of noth without you .
we human ar the thing that sort of caus comput to start do someth and thi will sit here happili until i caus it to do someth .
now , whoa !
whoa .
hope it's still okai .
yeah , it seem to be fine .
seem to be fine .
take a lickin' , and keep on tickin' .
so , these , anyon can us , right ?
thei sai even anim can us a macintosh , smartphon .
and so you don't have to be a programm .
but to get thi to do what you want you need to learn a differ languag , and we need to learn the languag of the instruct to tell it what to do .
so , that's what we're go to do .
we're go to learn how to talk to thi .
yo !
becaus it's ask us a question , we have to give the answer .
so , what's a programm ?
a programm is somebodi who write a program , which is a script or a set of instruct that tell on of these kind of thing what it is that thei're suppos to do .
and sometim you're run a program like moodl , an open sourc learn manag system , or sakai , anoth open sourc learn manag system .
and sometim you'll even get paid to do that , right ?
sometim you do it for free , sometim you get paid , sometim you write thing for yourself .
and and but , if you think about it , all these applic on my iphon , somebodi's make some monei off of these .
thei mai not be abl to quit their job , but a surpris number have been abl to quit their job or start small compani , mayb not gigant compani , but small compani .
so these peopl that can put applic insid of our comput ar programm , becaus thei understand the wai that we talk to these comput .
and part of what i'm go to try to do is to get you to move from the mindset of the end user who think of thi as someth just to click on to the mindset of the programm , who's kind of on the insid try to get out to you .
so that's , as we sort of move from user to programm , we move from outsid to insid and we think of the world out there and it's like what ar thei go to put , push , what button ar thei go to push .
so here's kind of a pictur of that .
so on the outsid , we're user , we click on button , we click on websit , we click on button on our phone , et cetera , et cetera .
but what's realli go on insid all of that is there's a comput with a bunch of hardwar insid of that , and it ha insid of it data , network , other inform .
and softwar is what make all that make sens .
and so , part of what i want you to do is i want you to stop think about how to us these thing from the outsid , and we move to becom a programm .
we're someon on the insid .
we're with the cpu , we ar with the memori .
we ar with the network connect .
we ar do thing on behalf of the user , and present them back up to the user .
so , why be a programm ?
now , thi class is specif not try to turn you into a profession programm , even though i'd be veri proud if after five , ten more class you were a profession programm .
but that's not the purpos of thi class .
sometim you just want to get someth done .
you got an excel spreadsheet at work and the data's not right .
you got the data from somebodi els and it's got like extra space where it shouldn't have it or doe miss field or someth , you gotta do someth to it that excel can't do .
and you're , you're stuck , like , sai , aw , i want to , i want to mess with thi data and put it in excel so i can do my job , but it's a pain in the neck .
and i have to sit and bring it into a text editor like microsoft word and go line by line and make all kind of mistak and clean the data up .
you can write a program to do that , and that's the kind of program we're go to do .
program that serv our need insid the comput , but to serv our need .
profession programm tend to build thing for other peopl to us , right ?
thei , thei tend to build thing that everyon els doe .
but we're go to build stuff primarili for ourselv .
so .
what is code ?
what is softwar ?
we us these word pretti much independ , a program .
it's realli a sequenc of store instruct .
we learn the languag that thi talk , and then we will feed the instruct in , on at a time .
it take them on at a time , it give us back a result , we give it the next on .
it give it back , in , out , in , out .
so it's realli a sequenc of store instruct .
but it's kind of more than that .
it's , it's sort of like our creativ , and if you've been us some of my softwar , like my mooc softwar , i spent about a month write all that stuff .
and it's like , it's me .
i mean i'm , it's my vision of how cool stuff ought to work , right ?
and so it's more than just get someth done .
it's also a sens of pride and a sens of accomplish .
especi if you're give someth that other peopl can make us of .
it's realli , i think it's veri creativ .
and it's what attract me to be a programm in the first place .
it's that i could , i could leverag the abil insid of here , and i could do thing , cool thing , on behalf of the user .
so , code , softwar , a program .
so , let's get a non technic exampl of thi .
so , i'll have you link out to the youtub for thi .
thi is the macarena .
the macarena is a song that ha with it a well known danc that everyon seem to know , or either get taught veri quickli .
so i'll , i'll stop and let you watch the macarena , and then come back .
so welcom back .
i hope you enjoi that .
in a sens what we've got there is a program .
a program for human be .
and , mayb you learn that at a club or someth , and thei told you what to do next .
well , i can teach you how to do the macarena by write a simpl program right now .
so here's my macarena .
while the music plai , mean you do it over and over and over again , to the beat , that's kind of like comput .
thei do thing in a beat .
thei happen to have three billion beat a second .
but as it were , so we're go to do thi multipl time so we have thi whole group of instruct that we're go to do , right ?
left hand out and up , right hand out and up , flip left hand , flip right hand , left hand to right shoulder , right hand to left shoulder , et cetera , et cetera .
now thi particular littl program ha a mistak in it .
actual sever .
i want you to look and see if you can find the mistak in the program .
okai .
so here ar the place that have the mistak .
right ?
the mistak is right ham to the back of the head , and left hand to right hit , not hip .
now if you're in a bar and you take a ham and you hit somebodi in the back of the head , that's not veri nice when you're danc to thi song .
these ar what's call bug .
now a human read thi would sai , oh , i think thei meant to sai hand here .
but a comput is much more liter than peopl .
we'll see a coupl of exercis where we'll see that peopl can correct littl mistak like thi , but comput thei cannot , right ?
so we have to fix these bug and we have to sai right hand and we have to sai hip when we mean hip .
so we have to be explicit .
comput do exactli what we sai .
thei don't do what we mean to do .
so , let's clear that .
here is anoth exampl , okai ?
let's see how thi come out .
you're suppos to count the number of time the word the appear in thi sentenc .
count it .
and the word the , how mani time ?
okai , it's your turn .
now , here .
thi is not someth human ar good at .
i move it around , i plai a littl music , i confus you , i put a pictur of a clown car in the upper left hand corner .
et cetera , et cetera , et cetera .
now it turn out that comput , onc we tell them what to do , ar veri good at concentr .
it can easili go through <num> word and find the most common word .
or three million word and find the most common word .
and it'll never make a mistak .
we first have to give it a set of instruct .
so , i don't want you to learn thi right now , but thi is a python program .
let's sai that i want to teach , let you count word in file , okai ?
i sai hei , i know how to program python , i'll send you an email , and i'll send you thi program .
just stick it into python , and it will count word for you .
right ?
you've got a million word , million line in a file , you want to find the most common word .
and so , so here we go .
so i will send you thi file call word . py i spent a littl time , it's a friendli gift to you .
and thi is what i type in .
now i'll give you kind of an outlin on what thi is go to do .
first thing it's go to do is open a file and read it , then it's go to split the line and file into word base on the space .
then it's go to run through and accumul number like , you know , thi word is on , thi word is on , oh i saw that again so i turn that to two .
that's what thi doe , it's a loop , it goe round and round and round , on for each word .
then what we're go to do is we're go to write anoth loop that's go to figur out which is the most common word by look at all those littl histogram that we built up .
and then it's go to print those thing out at the veri end .
and thi can certainli do python word . py and read clown . txt and tell us that the word the occur seven time .
but , you know , it can go , it can find out that a differ thing ha the word to and that it occur sixteen time and it's just as fast .
so yeah , you have to learn a languag and you have to tell it what to do , but onc you do it'll do it for a million or a billion word and happili .
so you don't have to do menial work onc you understand the wai to instruct the comput to do menial work .
so , we alwai start all program class with hardwar architectur .
i , i don't think it's essenti , so don't get too excit about it .
it's a good us of terminolog so we can have some word like , sai , like cpu and you don't freak out .
or memori , or ram , or disk drive and you don't freak out .
i don't want to turn you into a hardwar nut .
i just want you to kind of have a few word so we can talk about what's go on insid .
becaus , in a sens , we're go to be write program to do stuff , both data , instruct , et cetera .
so , here's some hardwar that i just bought a coupl week ago and i'm realli in love with , and that is the raspberri pi  .
thi is a singl board comput .
it's got storag on an sd card right there .
that's the oper system and the data .
and it's got the both a microprocessor and the memori is in here , as well , and it hook up with usb and hdmi and variou thing , and if you want , in thi cours , you probabl can do all of the homework us a raspberri pi  if you so desir .
so , thi is what hardwar realli look like .
it's kind of the insid of someth .
normal , it's in some kind of case and you don't get to see it .
and that's what it look like .
it's kind of got thi green and littl silver and gold .
i think thei're veri beauti .
thei're veri pretti .
a lot of engin goe into make these thing .
and and so we kind of have a block diagram of what's go on in here , and there's some , just some terminolog .
the , the brain of it all , well .
we draw thi black diagram partli becaus , and thi is a , from a , oh , part ar come off of thi .
eh .
i don't know what that wa .
it's okai , it's broken anywai .
and if you have a desktop comput , thi is more like what it look like insid .
thi part is call a motherboard , and it's kind of like the thing that connect and bring everyth togeth .
it's got a bunch of wire .
each on of those littl line here is a wire .
it's cover with sort of a lacquer .
and then there ar thing that penetr the board , and then connect to variou chip .
and thi whole thing is what thi pictur is .
but it realli is connect a number of differ compon .
the central process unit that i've spoken of befor .
put that back down .
central process unit is the closest thing a comput ha to a brain , but it's bare a brain .
it's realli just a super fast programm calcul .
it , we make it flexibl by our creativ when we write program .
we make it seem intellig .
it's peopl that make it intellig by take our own knowledg and put it in .
thi is not itself intellig , there's noth to fear from thi .
it's just not that smart .
so , thi is the thing that's program to ask the question what's next ? and then we have to have a set of instruct that feed thi thing realli fast , billion of time a second .
and that's what thi is , thi is the random access memori .
and we have memori chip and thei're connect togeth through the motherboard .
so , we have the main memori and we have the central process unit .
and thi is where our high speed instruct come from , thi is where our high speed data is store .
and thi is the thing that ask what next ? and it read it instruct from here .
and you'll see that kind of like , oop , thei're not quit connect togeth but eventu thei're kind of connect togeth .
don't feel too bad about thi hardwar it's all old and it's all broken and it can't be hurt .
so , the next thing we got is input output devic .
so i'll go back to my raspberri pi  .
so the raspberri pi  ha a usb that you can connect a mous or a keyboard .
it ha a hdmi that you can connect a monitor to .
i ha an ethernet connector .
so these ar all exampl of input output devic .
and then the last thing on the screen is the secondari memori .
so , thi ram on the raspberri pi  , the cpu , the central process unit and the ram ar all on thi on chip in the middl .
it's call soc or system on a chip where thei put more part there .
so in a sens it collaps thi , and thi , and a lot of thi all down in the raspberri pi  to on littl gui .
but it's still architectur the same thing .
there's a central process unit .
there's main memori .
there's graphic card , etc .
so , input output devic .
oh , thi big thi gui ha input output devic too , like usb and keyboard , monitor , etc .
so thei're , thei're veri similar .
it's just , thi is new , and thi is old .
everyth get smaller when it get newer .
okai .
okai .
so the last thing we gotta talk about is the secondari memori .
well , when the power goe off , these thing sort of go awai .
the data in thi ram goe awai .
it's just design to be realli fast .
but not perman .
so we need a place that's perman , that's what secondari storag is .
that's what , that's what thi secondari storag is for , thi is perman .
thi is fast , and it cha cha cha cha cha realli fast .
and but thi is perman , and thi is slower .
okai ?
so the secondari memori .
i've got two kind of secondari memori .
oh , drop it on the floor .
two kind of secondari memori .
i'll start with the raspberri pi  .
the secondari memori of the raspberri pi  is thi sd card .
it's like a disk drive .
it still is perman .
doe not requir power to maintain it data .
the data stai perman .
so , in the futur we will see more of these flash style drive and sd style drive .
so the raspberri pi  is kind of allud to the futur .
there's a disk drive in here .
it's not realli a disk .
it's also flash memori .
but in the old dai , in the good old dai , back when i wa a kid , we , our secondari memori wa a disk drive , and it had platter , and it spun , and it made a satisfi nois .
and it would move in and out to read data , and i'll show you a video of thi just in a bit .
and so these would record the data on the magnet platter and then when the power's taken off , the data would still be magnet .
and then it would go and move to the right spot , spin it around , and read the data .
and again , thi is kind of mess up in a pretti bad wai .
so , there we go .
central process unit , brain of the oper , main memori , fast , but goe awai when we power on , input output devic , keyboard , et cetera .
and then storag , that ha , maintain it data across power cycl .
okai , and i just said all that .
okai ?
so then the question is , where do you belong in thi ?
where do program live ?
where do we write ?
and the answer is , we kind of live in the memori , right .
what we do is we put our program into the memori and then the cpu pull the program out of the memori .
so we have to write our program and put them into the memori .
when we start them and run them we're realli load them into the memori so thei can be fed rapidli to the cpu .
now the comput don't realli execut python , like if x less than three print , but that's what we tend to want to write .
becaus what the comput realli execut is a thing call machin languag , which is a seri of zero and on that pretti much translat directli to what's on these pin .
there's voltag that go up and down .
that's call machin languag .
sourc code , like python , is written in a wai that's most conveni , well , at least more conveni .
machin languag is what's most conveni for the hardwar .
so we either , we have to translat from sourc code to machin languag , and that's what the python program doe for us .
we write in python , and python translat to machin languag for us .
so , i got a coupl of video that give you a sens of how thi all work .
we'll start with cpu .
and what thi is go to do is , thi is go to show you the intens of how much electr , the thing that get hot insid your comput is thi littl gui right here .
and we're go to see in thi video just how hot it can get .
okai , so welcom back .
so the next thing i'm go to show you i show you a hard disk that sort of didn't work .
but we're actual go to show you a real short video on how a hard disk work that someon took the cover off and actual appli power to it .
you don't want to do thi yourself if you have a hard drive , i've read , and some peopl sai that you can do it for a , for a few minut and then the drive kind of destroi itself if you run it with the cover off .
so let's take a look at thi .
now , we're go to talk a littl bit about python .
python is a program languag .
python is a wai that we commun .
now python wasn't invent by comput .
we invent python as human as a wai to encapsul our instruct .
and there's lot of differ program languag .
python , javascript , c , ton of them .
python's just on of them that we happen to teach in thi class .
now , i'll start with a littl harri potter refer .
parseltongu is the languag of serpent and those who convers with them .
an individu who can speak parseltongu is known as a parselmouth .
and it's a veri uncommon skill , and it mai be even hereditari .
nearli all known parselmouth ar descend from salazar slytherin .
there's our harri potter refer .
python is the languag of the python interpret , and those who can convers with it .
we're go to convers with the insid of a comput pretti soon .
an individu who can speak python is known as a pythonista .
it is an uncommon skill and mai be hereditari .
it mai not be hereditari too .
nearli all known pythonista us softwar initi develop by guido van rossum .
guido van rossum , thi gui right here .
yo guido , what's up ?
let's put a mustach on , yo guido .
sorri .
i should be nice to him .
he is the inventor of python .
python's over <num> year old .
he invent it to make it an easi languag but wa both easi and power .
and that's why it's a great languag to start your learn with .
it's a power languag but it's also design to be easi to us .
can anyon guess what the reason for the python languag name is ?
so let's see .
python wa name after a famou british comedi show that wa in the 60s and 70s and 80s , i think , name monti python , monti python's fly circu .
and so and i , i think he wa try to captur a play , a certain kind of silli fun aspect of python .
and and so there we go , enough of that .
we done ?
yeah , okai , the music's done now , thank heaven for that .
okai , so again thi is a languag and thi guido , he made it for us , he made choic .
he said we're go to put a colon here .
i think we should like indent thi and do these thing .
and he , he's made choic .
and and some languag have peopl like some differ better than other .
it's kind of an artist choic .
and , and i like to kind of equat thi to learn a languag to speak with peopl , with human , you know .
you know , when we're a babi we don't know how to talk and we start babbl , blah , blah , blah , blah , blah , blah .
mayb we just start cry .
that's the first thing that we do .
but we're like , we're like on thi strang planet .
we got to talk to thi thing .
so we have to learn it languag .
and we're not go to learn it right awai .
you don't go like , hei studi all night and you know thi languag .
there's no wai you can do that .
although rosetta stone might be a good wai to teach program , mayb i should take some of their idea .
so , the thing that's differ about learn a human languag versu learn a program languag is that when we're learn a human languag we're talk to a human , and thei're go to do correct for us .
so if if i sai a word incorrectli , like , mama alah . right ?
i don't know .
that wa pretti dumb .
someon listen sai , oh , i know what he said , i know what he said .
but python and comput aren't realli listen .
thei're kind of dumb .
thei can't realli correct our mistak for us becaus thei don't know what we're try to sai , thei realli don't .
thei're veri liter .
and , so it is realli common in the begin to get upset .
becaus we sai someth we think is cute , and it sai , syntax error .
and we'd be like , okai let me try thi .
and it sai , syntax error .
and so we get thi notion , and i had thi problem when i wa first program , i wa like , i would like , here's my program , do you like it ?
it would sai , syntax error .
now , the problem is , thei could reword the messag to be a littl nicer perhap , but the syntax error isn't realli a judgment on you that sai you're a failur .
the syntax error is realli sai , i , i don't know what you're sai .
i'm confus .
i onli know a few thing , and what you just said is not someth i understand .
so instead of think of the program , the python as some kind of evil , demon monster that just hate you and just keep sai syntax error , think of python more like a dog .
right , the dog's , what can you talk to a dog ?
can you sai love sunset we're have to a dog ?
becaus the dog's not go to understand that .
the dog doe understand some thing like food , back , walk .
but it doesn't understand the accumul work of shakespear .
so when you talk to a dog , you've gotta be care to talk the subset of the vocabulari that the dog know .
and so thi is a kei thing when you're first learn .
there's onli a certain set of thing that python understand .
it turn out it's easier to teach you python than to teach python to listen to whatev you have to sai .
thing like googl make it seem intellig .
so you can kind of type anyth into googl , right ?
well , yeah , billion of dollar later googl , for at least , like , short thing , can seem like it know what you're talk about .
in term of program , it's a lot easier for you to figur out the exact precis wai to sai it , rather than make it so that we have to spend a billion dollar on someth like python to figur out what you mean in your program .
so , let's start talk to python .
we're talk to python .
so .
if you've instal python properli , whether it's on a mac or a window or on a raspberri pi  , at some point you'll be in a termin program and you'll type python to make python run in interact mode .
you might have to type c someth someth python in window .
but at some point you're run python .
now python itself is a program , it's a program that is ask you to type the python languag .
now the interest thing is you've got thi chevron prompt here , and it's kind of anoth version of what's next ? i told you that thi hardwar wa design to alwai want the next instruct to come in .
well .
python , onc we start it , it realli ha no idea what to do .
it is , is wait for you to tell it what to do .
okai ?
so , let me see if i can pop someth up here .
so here we go .
clear that .
and now i'm go to type .
get thi a littl closer .
i'm go to start python , so it's the oper system now is ask me what next , i'm sai , oh the thing i want to do next is i want to run python .
so , here we ar , we're sit in the python interpret and it's ask what next ? okai ?
now , i , it's like i just land on a , on like a planet .
and it's , like , take me to your leader .
take me to your leader .
that's what you alwai sai when you land on a planet and ar confront by some kind of a robot .
and it sai , syntax error .
rememb , it's a dog .
it should just sai aarf , right ?
could sai , take me to your leader , woof , okai ?
ar you friendli ?
i don't even spell , think i spell friendli right .
syntax error .
ar you dumb ?
syntax error .
pretti dumb .
i hate comput !
syntax error .
it doesn't seem to have a sens of humor .
try thi .
knock knock .
knock knock .
no sens of humor .
so here's the problem .
it want us , it's it doesn't hate us .
it , it just want to know what we want done .
so , we need to know the python languag .
luckili , i know a bit of python .
so i'm go to sai , hmm , hei python , i'm go to want some data .
i want to make a variabl name x .
just a littl place in your memori .
go find it .
go find on of your spare place in memori .
and i want you to put <num> in that .
okai ?
do that .
now , it's happi becaus i know the languag .
bonjour .
that we know the languag .
now i want to , but it's sai , what next ? so we have to put a program in .
so , let's see .
i'm go to sai , hei , python .
i'm go to make a variabl call y , anoth area in your memori label y , and i want you to go back and rememb that x i gave you befor ?
go get that on back and add <num> to that .
and put that in y .
so now i've got someth in x and i've got someth in y , and let's print y out .
what's in y ?
go look in y where you put that and let's print it out .
<num> .
so .
we're do simpl thing , and actual most program is a seri of simpl thing .
the number of statement , differ statement you can do is is rel few .
so we ar talk to python .
let's run back to the slide , there we go .
and so .
we give it a seri of command and you can do the same thing sit on your comput .
and you type exit or quit with parenthes to get out of it when you're done .
and that end the interact session .
now thi is interact python where it's ask us command by command and then interpret or run those command as we run the command , as we finish .
so .
there'll be , you'll be do it in some kind of a window .
there's a differ wai to do it on window .
my instal document on pythonlearn . com give you all of thi , tell you everyth to do .
so now we're basic talk to python .
so , what languag ?
i gotta still teach you thi languag .
so , what do we sai when we get ahold of python , what kind of thing ?
just like ani languag , a human languag , there's like vocabulari , there's basic word , there's variabl and reserv word in python .
then we kind of combin those in line to make sentenc like structur that themselv ar not a full stori .
and then we kind of make a stori out of it .
now , the stori is in the python languag , not sort of english or french or a human languag , but it still is kind of a a sequenc of small piec that build to make bigger piec that then build to make a whole program .
so here is , again , that same program , right ?
that same program of how to count the most common word in a file .
and i mention befor that it start by open the file .
it read the data from the file .
split it into word , count them all up and then find the biggest on and then print it out .
so name is like a word , equal is anoth word , raw is a word , all these thing ar word , each of these thing is like a sentenc .
there ar block of stuff that ar kind of paragraph .
there's kind of a paragraph , paragraph .
i for sure , differ color here .
here's like a paragraph , and a paragraph , and a paragraph , and then at the end of the dai , onc you kind of understand it , and you will understand thi befor it's all over , thi is kind of like a stori .
right ?
it hold togeth , it ha a begin , a middl , and an end .
again .
don't worri about the detail , we've got plenti of chapter to cover thi detail .
don't worri about thi particular program .
i'm just sort of get into the sens that , you'll get it .
but we'll start simpl .
so , the first thing that you gotta know how to do in python is know what not to do .
or when you us these reserv word , thei have veri special mean to python .
it's like when you sai , i don't think you're go to get ani food todai to a dog , the dog hear the word food and noth els .
so food is a reserv word for dog .
walk , bath , there ar other reserv word .
so , what it realli mean is you can't us these for anyth other than what thei mean to python .
so , print tell it to print thing .
return is us in function .
els , if , these ar word that if python see the word if , it's like , thi mean someth .
don't us it for ani other purpos except it state purpos .
we'll learn what those ar .
now if we talk about sentenc .
sentenc ar kind of , in python , like a line that kind of have piec to them .
so here is three piec of code .
on is x equal <num> .
that sai , take and find me a piec of memori .
in your ram .
alloc it , label it x , and stick <num> in it .
thi is kind of like a move <num> into x .
then thi sai go get x , add <num> to it , and then put the sum back into x .
again , littl sentenc that ar kind of like subject predic , right ?
especi thi assign , it's kind of just , and then print .
print's a reserv word .
wa on of the wa on the list in the previou slide .
and then go read that variabl .
so , these ar like three sentenc in our new littl languag .
okai , so that's sentenc , now paragraph , let's talk about paragraph .
paragraph ar the combin of sentenc to make sort of a thought togeth .
multipl sentenc , multipl line .
so , the interact python that i just show you is fine for run on , two , or five or six command .
but ultim , we're go to write much longer bit of python .
and so we write what's call a python script , or a python program .
and we put these in a file .
and we , and if you went through the prerequisit , you will see have seen me edit in a text editor , save a file , and then run from the python file .
okai ?
and so we call these file put . py on the end of them , p y on the end of them .
and we're give python a script to execut .
so , interact , you're type directli into python and it's do it right as you're talk .
you're still do it in order , and the order doe matter .
in a script you type it all into a file onc and sai python , do it all .
now when you write on of these thing there ar pattern for combin these .
there ar thing that we do to these line that sort of treat them differ .
is like a recip , a set of instruct .
start at the begin .
but it's a littl more complex than that .
some step ar just sequenti .
some step might be skip .
some step we do multipl time .
and other time we have kind of like a set of step we do over and over again .
so here's some pictur .
and here's the four line of python , a littl simpl paragraph .
and it's got a sentenc that sai , x equal <num> .
print x .
x equal x plu <num> , which sai , go grab the old valu of x , add <num> to it .
stick it back in x .
and print x .
the output of thi program is <num> , then <num> .
becaus x wa <num> , we print it , and we ad <num> to it , and then we print it again so it wa <num> .
now , these flowchart , don't worri , i'm not go to make you draw these .
i just draw these in case , cognit , it make it easier for you to understand what's go on .
so , x <num> .
is the first step .
sequenti , it just continu on .
it run the print .
x equal x plu <num> .
run the print .
so thi is just straight through .
it'll make more sens when we see a littl more convolut thing .
so , thi program just start natur .
python start at the begin and work it wai down through the end .
that's sequenti stuff .
that's the normal order of busi .
now , a condit is a step that mai or mai not get execut .
if all we did wa sequenti step , program would be kind of dull .
right , thei would just be like blah , blah , blah , blah , stop .
so , there's thing like oh what if you do thi or what if you do that and so we do thing like if .
if you have more than <num> hour , i'm go to pai you a differ rate than if i have under <num> hour .
those kind of thing ar if , the word if .
so in python , the wai we express thi is we us the keyword if .
so we sai x equal <num> , and then we sai if x is less than <num> .
thi is a question that's be ask , is x less than <num> or not , ye or no ?
if it is , we execut the indent bit .
if it's not , we skip it .
thi case , sinc x is <num> , we execut it .
then we come back here , and we're go to do anoth on .
if x is greater than <num> , well , thi turn out to be fals .
so we skip that .
so bigger doe not run .
that line never run .
so , we , the output is smaller , fini .
now , here , we can take a look at it , sort of , in the pictur diagram .
we run x equal <num> .
we ask a question , thi doesn't hurt x to ask the question , is x less than <num> ?
the answer is ye so we kind of drive down thi littl path .
we print smaller and then we rejoin the freewai .
is x less than <num> ?
no , so we skip and we continu .
so , thi never get execut .
so you can think of it either wai .
you can think of either sort of like gestalt , sai , if thi true , do what's indent .
or you can imagin sort of a littl car drive down a highwai make turn choic as it goe .
thei're equival .
over time it's probabl you'll just start see thi and start think thi wai .
but sometim it help to think about it thi wai , for a littl while .
okai .
now , the next thing i want to show you is repeat step , step that happen over and over and over again .
okai ?
and that again , when i said oh , comput ar good at handl a billion word .
well that mean it ha to have a loop or a repeat section , on for each word .
it's go to do someth for each word .
and so , so here we go .
and in python , let's pick a differ festiv color .
let's pick purpl as a festiv color .
so here's our program , start at the begin , set the variabl n to <num> .
and then a kei word , reserv word while , while n greater than <num> , again thi is ask a question .
thi is ask a question .
is n greater than <num> ?
that's a question .
if ye we're go to do thi , if no we're go to do that .
over here if it's true we're go to execut the indent part , and then come back and do it again .
if it's fals we're go to skip down .
so it's kind of like an if , except it keep do it over and over and over again .
so , it come in , set n to <num> .
is n greater than <num> ?
yeah , sure .
so we print n , out come <num> .
then it sai , and n equal n minu <num> , so n becom <num> .
we can chang color .
then it goe back up .
goe back up and ask the question again .
n is <num> .
it's still greater than <num> , so it come through .
print out <num> , subtract <num> .
so n is now <num> .
goe back up .
is n <num> ?
is n greater than <num> ?
ye , it is .
print out <num> .
subtract <num> .
now it's <num> .
so out come <num> and <num> .
then it goe back up , still greater than <num> .
ye , it is .
print out <num> .
or , wait .
now it's <num> .
now we subtract <num> , it becom <num> .
is it greater than <num> ?
no , and we final leav .
and we final drop down .
and so the last thing that come out is the print blastoff .
so thi is a loop , the notion that we're go to run thi littl bit of code five time .
excus me .
we're go to run thi littl bit of code five time , and loop have these thing we call iter variabl .
and that is thi n .
it's a variabl that specif is chang each time it goe through the loop .
and that wai , we can sort of control the loop .
we can decid when it start and when it stop .
we can tell if we're at the begin or at the end , or the first on or the last on .
we'll do a lot of stuff with loop .
thi is an iter variabl , becaus we iter repeatedli iter through the loop .
okai ?
ani question ?
we can't do question .
okai , so now , if we go back to the littl stori that i , you've got sever chapter to understand , don't worri .
you actual got like through chapter nine , so don't try to understand thi program right now .
i'm just try to give you a sens of what the pictur is go to be , right ?
so , so here ar some sequenti statement , becaus thei aren't indent .
those five line ar sequenti .
thei just go on after the other .
then we have for , and it's indent .
thi is a loop .
thi is go to run a bunch of time .
then we're done with that .
we do some more sequenti stuff .
now , we have a for loop , and that's go to run a bunch of time .
and then we have an if , which mai or mai not run .
so these littl , thi littl block of code is condition execut base on someth .
and here is the question that we're ask .
so that's the question .
and then at the end , we do a print .
now , again , don't try to make too much sens of thi .
i'm just try to show you sequenti , repeat , repeat , condit .
okai ?
just , those concept show up in everi , pretti much everi program that we build .
okai .
so , let's do a coupl more littl exercis that get you sort of in the mind set of be a programm , and how programm tend to have to think about problem a littl bit differ .
so , here we go .
thi i call thi an anim short stori .
and your job , i'm go to just give you a differ , sever set of number .
and i want you to find the largest number in a list of number .
now , it's not so import to know what the larg number is , but also to think about how your mind attack the problem .
what your ey ar do .
what your mind is do .
how you break a bigger problem down into smaller problem .
how a human solv thi problem .
and then we'll focu on how a comput might have to look at the problem differ , okai ?
so don't just , like , get the answer .
that's not so import .
think about how you get the answer .
so , don't just like scroll ahead in your youtub and cheat and go get the answer .
think about actual solv the problem , and then monitor what your brain is think as it goe .
so , here we go .
so , i'm go to give you a list of number , and you ar to tell me what the largest number is .
readi ?
set , go .
i didn't make it easi , you're look for the largest number .
did you get it ?
did you have to go back a coupl of time ?
actual i don't care what the answer is .
the question is how wa your brain solv ?
okai , you probabl want to know what it is .
the answer is <num> , that wa the largest number .
of cours what i wa do is i wa move it to make it difficult .
but here's the thing , how do human look at thi ?
like , do human , like , did you look at <num> , then you look at <num> , then you look at <num> , and then did you just look at them slowli on at a time , like thi ?
or no , i doubt it .
if you ar , mayb you're a comput .
mayb i'm talk to comput , mayb you're all comput .
i'm certainli not a comput , mayb you're all comput .
okai , enough of that .
no , that's probabl not how you did it .
what you probabl did wa you had your ey move around the whole thing veri rapidli .
and the first thing that you figur out is that there were on digit blob , there were small , medium , and larg blob of purpl .
and the first thing you knew , right awai , wa there wa no point at look at ani of the small blob .
your brain just threw the blob awai realli quick .
then you sai , okai , given that it , there's no four digit number , thei're three digit number .
then what you probabl did is you start look for the first digit .
you sai , look , there's some on .
is there ani two ?
quickli , you decid there ar no two .
so you knew that you had to look for the big blob .
and the second digit wa probabl the thing that matter .
then you start get to the nine , you sai , okai , there's some nine .
so that mean it's , it's on , nine , someth .
then that wa the part that you probabl had to go check to find the , oh , where the heck wa the <num> , aah !
oh , <num> right there , yeah i color code it , and i couldn't even see it , okai ?
but the point is , is , human ar great at elimin sort of bad solut , realli fast .
and you probabl look at how big , how much purpl wa on the screen , elimin the area that were less purpl , becaus you knew that your brain quickli and instinct knew that the more purpl meant a larger number .
comput don't do ani of that , thei don't do ani of that .
so , in order to make you feel a littl more like a comput , i have anoth test .
and again , the goal is not just to find the largest number .
but to monitor as you go , what your brain is think , while you're do thi , okai ?
do you get it ?
how ar you attack the problem , what is your feel as you're attack the problem ?
ar you a comput or not ?
here we go .
i'm onli go to give you a few second .
so , what did you get ?
my guess is that most of you just said , i don't care .
thi is such a hard problem .
it's a stupid problem .
or i'll try and turn my head upsid down , or someth .
it's a realli hard problem .
the other on wa kind of easi .
not that you , you might not have got it , but you had thi natur instinct that allow you to approach the problem .
okai , i'll show you what the right answer is .
the right answer is .
right there is <num> .
yai .
right .
i , you can't even , even if i tell you to you know there you ar you know , what is thi ?
is thi <num> or two zero zero .
actual , the onli wai i can do thi is i flip it to find it .
i mean it's just not what human ar good at .
thi is a littl bit more like how comput see the world .
but the fact that the data's frontward or backward should sort of make no differ , right ?
comput need a strategi , we need to give them a strategi .
okai .
so here we go .
on last experi .
now i'm go to show you number on at a time .
and at the end , i want you to tell me what the largest number that you saw wa .
readi ?
here we go .
first number .
what wa the largest number ?
as a matter of fact , how did you solv that problem ?
you solv that problem most like becaus you didn't , you couldn't look at all the number at the same time , so you probabl creat a variabl in your head without even know .
and you put into that variabl .
you call the variabl , the largest number i've seen so far .
and you haven't seen ani , so let's sai the largest number you've seen so far is neg <num> .
then i show you <num> and you said to yourself .
well .
neg <num> is no longer the largest number i've seen .
so i'm go to keep that on , i'll keep <num> .
that's the largest i've seen so far .
and now i see <num> , <num> is larger than <num> so i will keep that .
and now i see <num> , now <num> is crap becaus it's nowher near as good as <num> .
so i'm keep <num> .
<num> .
oh , <num> .
<num> , not nearli as good as <num> , so i'm gonna throw that on awai .
<num> , better , better .
keep it .
keep that on .
so i'll keep <num> .
and the last number is <num> .
don't even know it's the last number , but , we don't want to keep that on .
and so now , we're done .
so we know that at the end , what wa dure the loop the largest so far is the actual largest of all the number , and we don't rememb exactli how mani number there were .
so that's kind of like think like a program , you know , thi kind of slide window .
didn't matter if i gave you a billion number or five number .
i think there were five number , actual .
thi notion of the largest so far is a power notion .
as a matter of fact , it's central to the program i've been show you .
and i don't want you to try to understand thi , but thi part in the purpl .
thi part in the purpl is realli sai , i'm go to loop through the count of all the word .
so it's got a word like the is <num> time , and clown is four time .
and it's go to look through all the pair of word valu combin .
and it's go to basic sai , i'm go to go through the count that i have .
and i'm go to check to see if the count i'm look at is bigger than the biggest count i've seen so far .
and if it is , i'm go to rememb it .
now , don't worri about thi .
we haven't even cover ani of thi stuff .
that's what chapter two , three , four , five , six .
but thi is an algorithm , a paragraph , a pattern .
that allow you to find the largest number , and we'll look at thi again in great detail in upcom chapter .
so thi is kind of think like a comput , have a slide window across the long list of number , and come up with someth that is the answer that you need .
okai , so that's the end of thi lectur .
read chapter on , write your hello world program .
make sure if you haven't , get python instal .
as you read thi chapter and even as you instal python , and even as you write the first program , don't get too stuck on the detail .
i wa confus for like eight week or six week in my first program class ; you'll be confus too .
just sort of wander through with me , keep at it .
it will start make sens at some point that's up to you , i can't tell you when it's go to make sens .
so , if , don't sort of stare at everyth until you get it .
just kind of keep dig in , and keep understand , and keep plai and sooner or later thi'll make a lot of sens to you , i promis you .
see you next lectur .
hello and welcom to our first assign , write the classic hello world program .
we do thi hello world program to some degre to sort of prove that we can get ourselv insid the comput .
i think of hello world as put ourselv in the comput and then have ourselv talk back to us .
the version of us insid the comput talk back .
so i think it's a interest philosoph question .
so i'm go to show you how to us our autograd .
thi program is a on line program , so it's realli easi , so you can kind of get us to do how the autograd is .
i realli want you to do the option assign of instal python on your desktop or your laptop , so you can do the program on your desktop or your laptop .
becaus i think you're go to learn a lot more when you do that .
and as you look at some of the futur video that i do for the assign , i do them all on the desktop , right ?
i , i , i hope that if you're read those , you actual learn someth about how to program the desktop , even if you choos not to do it yourself .
and you'll find that sort of as the class start , the exercis video ar exactli what you're do for homework .
and then thei slowli but sure sort of move awai and you have increas respons for write the code .
now don't just work from the homework backward .
becaus if you do you're , you're go to cheat yourself .
becaus all of a sudden , about the sixth week , you'll be like , i don't know anyth .
and the answer is , well , that's becaus you took the easi wai out in the first five week .
and then the right thing to do is to start over and try it again , but then be more disciplin the first time through , and actual learn the materi .
so , so let's wait a sec , oh yeah , i gotta , i'm wear my cool coursera t shirt .
and i'm probabl the onli teacher that you've got that ha a realli cool coursera tattoo along with all the other tool that have to do with teach and learn technolog , which is my research area .
and we're go to be us learn tool interoper in my research to do all thi stuff .
so , at thi point you're probabl watch thi video right there , the turn in hello world video .
and so each of the autograd assign is go to be in video lectur .
that's why i call it video lectur and autograd link .
and so , you click thi .
and when you click thi it's go to open the autograd up in a new window , a new tab .
you see now i have two tab .
and so thi is a piec of softwar that i wrote .
you can see that the url ha chang .
thi is a server that i control .
and it , it contain a simpl javascript base python interpret .
so you're run thi code actual right in your browser .
and so there's a littl editor place .
you can us thi to edit your program .
for the first few , it will be fine .
and it save all your data , so that's fine .
but as the program get longer and longer and your output get longer and longer it's a littl pain .
so , the , the idea here is we have the program that you're suppos to write .
write a program that us a print statement to sai hello world as shown below .
we have the output you're suppos to achiev .
and , then , here's the output of your program .
and so to run it , you type check code .
and so , what thi is sai is , oh , someth's wrong on line on .
and so , i will , i'll fix the mistak becaus thi is suppos to be a t .
and then i'll make differ mistak where i chang thi to hello world with capit , right ?
so now i'm go to run thi program .
it's go to actual work .
and you'll see that it run , but i don't match .
thi is what thi mismatch and it's sai , pleas correct your code and rerun .
now , i'm go to , i'm just go to press done for a moment to show you someth .
so i've left , and now i'm go to go back in .
and if you'll notic , it store my code , right ?
and , and so it rememb the code that , the last code that you've done the check code on .
and and i can run check code again .
and , of cours , i get the mismatch .
and then , when i final get it right by get thi h to be a lower case h and then i check code and it's done .
and then it send the grade automat back up to coursera and so coursera ha your grade .
and then you press done .
now what's nice is at ani point in time later in the class , you can come back and you can take a look at the code that you wrote .
you can even replai , plai it again .
you can sort of cut and past and save it to your hard drive .
i might need to write a littl download gadget so that you can actual download it to your hard drive .
but so that's pretti much , oh , the , the last i forgot to show you is thi reset code button .
you'll , it store the code that you wrote .
if you type reset code , it sai , ar you want to reset the code that i provid you in the first place ?
and so , if i sai ok here , it goe back to code that ha the mistak .
and so , that's pretti much it .
like i said , i encourag you to try to us your own laptop to do the program and then cut and past your work program into here to test them .
but i fulli understand if you decid to us your cell phone to do all the program .
it'll be a littl tire type all the program in on your cell phone .
but , but of cours , you can do that .
so again welcom to class .
hello .
welcom to my video on how to run python on window .
i'm charl sever and thi is my book , python for informat .
and i have a bunch of free cours .
the book is free .
and so i , i hope you enjoi learn how to program .
so the first thing we're go to do is download some softwar .
you need a programm editor , and so notepad plu plu is a good on .
it ha syntax highlight and other thing , and it doesn't mess up your file .
it understand that you just want a plain text file .
so i'm go to download and instal thi .
you want to be an administr when you're do thi in your window box .
it might , i'm an administr on my particular window box .
go to run it .
and you might get prompt for a password here , but , i am just go to sai ye becaus i am the administr , and i'll run through the instal process here .
so that's all done .
i'm not go to bother run it right now , so there we go .
so i've done notepad , the next thing i want to do is i want to download python .
it's here on the python download page .
for my class i us python <num> .
you could us python <num> , thei're slightli differ languag , i think it's fine to learn both languag , although we're realli at the point where increasingli peopl ar start to us python <num> , but there's so mani thing that ar there for python <num> .
so , the question often ask is like , which on of these two ?
do i go the x86 or the non ?
it's pretti safe to do thi on , but so , if i go start , and then i type pc info , thi will tell me someth about thi pc .
differ version of window have thi in differ place , but basic i get to the point where it sai i have a system type <num> bit oper system .
so i can get a <num> bit download , which is nice to do .
so i will go back to control panel .
and i'm go to download my window <num> bit instal .
and i'm go to run it .
and again , i'm go to need to be an administr .
i'm go to instal it for all user .
i'm go to leav it in the directori that it want to put it on my local drive .
python27 .
you can put it elsewher , but then you're go to have to rememb it .
pleas don't put space in the path , no matter what you do .
and again , i'm the superus , so i'm go to sai ye .
so , we're all done .
okai , so now i'm go to minim my web browser .
so the next thing i'm go to do is i'm go to run notepad .
and of cours you can have shortcut , but i'm go to us the start button .
i'm go to hit start and i'm go to type , in my keyboard , notepad , n o t e p a d .
and up come notepad plu , and i will take that .
so here we have notepad plu .
and i'm go to write a simpl python program .
p r i n t hello world okai ?
and i'm go to file , i'm go to save thi .
so i'm go to sai file > save as .
and i'm go to put thi on my desktop .
i might , i could make a folder .
sure , let's make a folder .
i'll call thi learn , becaus i'm python learn .
so i'm go up a folder .
you'll notic the folder show up as soon as i made it .
now i'm go to make thi file , i'm go to call it first prog p y .
now you'll notic it did syntax color as soon as it realiz that thi is a . py file .
it know the python languag and so it's give me some help .
and if i go into learn , i will see that there is inde , sit in thi folder , a file call firstprog . py .
unfortun , window hide the . py but show us thi littl python icon .
you can run it by click on thi but thi is not my prefer wai of run it .
okai ?
so i'm just go to hide , minim that and i'm go to sai start , and then i'm go to type c m d .
thi is the command prompt .
sometim you'll do start > run > cmd on realli old version of window , or just start > cmd .
and then run command prompt .
and , you know , thi , thi will initi seem , you know , like , why am i us thi old school command prompt ?
but after a while , part of the goal is to realli get to be good at your comput and know how the comput work .
so thi is the command prompt and you type command .
so on of the command you can type is dir .
you're in your home directori , that's what user csev mean .
and i'm go to go into my desktop with a cd , which stand for chang directori , d e s k t o p .
now i'm my desktop , move my littl cursor there .
and i do a dir and you'll see a whole seri of thing there .
and then you'll see thi learn folder , l e a r n .
so i'm go to chang into that directori , cd learn , and do a dir there .
and lo and behold , i see exactli what i wa see in here .
so thi is realli just a graphic imag of what's in that folder .
i mean , you can even sort of , see the path if you look here , that it's in my c user csev desktop learn , which exactli is where i'm at .
c user csev desktop learn .
thi mai seem , and when we , when we start read and write file , it's import that you put your file in the same folder here as first , as the program .
so to run the python program you simpli type firstprog . py .
it's as , it's as if whoop .
f i r s t p r o g dot p y .
it's as if you built an extens of the system .
the littl program you wrote in python is sit there for you to run .
and i can make a chang , like someth els , and save that file .
and then i can run it again .
now , here's a trick .
i can hit the up arrow and just run the same program again .
syntax error , p r , oh , i put an m in .
print , save .
now i just come back here .
i hit up arrow .
and run it again .
so now i have my littl two line program , and awai it goe .
so the onli other thing to know is to how to start python for the command , so you can do interact plai with python .
and thi wai you can type python command .
and you can add it to your path and go look on googl as to how to add someth to your path .
becaus , it's in , it's in , but it's easier just to sai c python27 , cuz that's where we , oop , python27 python .
i cannot type .
and so thi is the chevron prompt .
right there's the chevron prompt .
so i can type a print yo , or i can type , take me to your python leader .
syntax error .
yeah , we've been through thi befor .
i hate comput .
okai .
so to get out , but here you gotta be care becaus you can't run program , and so you can type quit to get out and now you're back at the command prompt , and you can type dir .
so you can learn the command here .
all we realli know is we know dir , cd , and when in doubt , just close thi window , if you get lost in the wrong folder or someth .
so that's pretti much all i want to do .
pleas don't make directori name or folder name with space in .
it just make life confus , so stick with simpl name .
don't put long space in either folder name or file name becaus then it's harder to do thi stuff , okai ?
thank .
hello and i'd like to talk to you about how to us the snip tool to do a screen captur .
there ar other wai to do thi , but the easiest wai is the built in screen tool , and i'm do thi on window <num> .
the snip tool exist on earlier version of window as well , and so the gestur and the ui might look a littl differ , but it's about the same .
you'll find the snip tool .
so i'm go to hit the window icon and i'm go to type the s n , and it bring up the snip tool .
and so here i go , and it's give me thi option to sai snip tool .
and i'd like to sai , i'm go to do a new window snip .
and now it's kind of grai out the screen and follow me around with thi red line .
and i click on thi and it ha made a copi of that , of that window .
now i'm , thi is , snip tool is just a snip tool .
that window still exist but thi is now , well i didn't want to do that .
thi is now just a , a draw tool that's so , and so here you ar .
we could save thi .
but the other thing you can do , and thi is in the more recent snip tool , is you can make chang .
so let's sai for exampl that you didn't want to show your name , and your name wa in thi path .
and so i will just go and scribbl my name out , like with thi littl scribbl tool .
pretti sweet , huh ?
so i scribbl my name out , and i just happen to have my name in it and so i didn't want to put it in .
so now i'm go to do file > save as .
and of cours find somewher , i'm go to put thi on my desktop and i'm go to call it notepad . png .
now you don't have to put the suffix of . png or jpeg but it's good if you're move file between system to put these suffix on .
you know , window would know that thi is a . png file , but . png is a wai to nice tell other system when you're move it around that it's a . png file , or if you send it as an email or whatev .
so i save it , i'm save it on my desktop .
and there we go .
so it's , it's hide the . png , but i can look to make sure the png is realli there , and so there it is , it's a . png .
so there's a file , and awai we go .
okai ?
so there's the snip tool .
if i close thi window , and i click on notepad , you will see that it's got the littl scribbl thing .
thank you for that .
okai ?
so there you go .
that's how to do a real simpl snip tool .
hello .
welcom to run python program with textwrangl on the macintosh .
so i'm here in googl , and i've type textwrangl and i can just go to the textwrangl websit .
and we're go to download textwrangl .
and we're plai with usabl .
i guess we've got just a littl , nice littl download button here , download now .
okai , so we're go to download .
right there , that , mayb that'll work .
okai , so here we come .
okai , so now it's download and is mount up the imag .
and so i'll come over here and all we do is we drag the textwrangl into applic .
and then sinc i'm not a super user on thi account i have to authent , which mean i have to type an account and a password .
and i've alreadi done thi onc and so i'm not go to bother copi it but so we'll cancel thi but it will copi in and you'll have textwrangl instal .
and i can close all these window .
and you have textwrangl , and i'm go to unmount thi textwrangl drive so i have a nice , clean desktop .
so i want to run textwrangl , and the easiest wai is to start in with spotlight , and do textwrangl , and click on textwrangl when it come up .
and so it's go to ask me a few question when we first start out .
and it's got thi cool littl window here which i'm go to close that show us recent open document .
and so i'm go to write some python code here .
and i'm go to sai print hello world , oop .
i want to sai hello world .
and now i'm go to save thi , by sai file>save as and i'm go to instead of go straight to my desktop you mai not , you might not have to push thi littl button to see these .
i'm go to make a folder call assign <num> .
and then insid assign <num> , i am go to name my file firstprog . py .
now you'll notic that thi assign <num> appear as soon as i made it in the desktop , becaus thi folder desktop under place is the same as as my desktop .
so now i'm go to save my file .
and so you'll notic that it doe what's call syntax color and show me the fact that it's now got a doubl quot string in hello world .
so now i'm go to run python .
now there's coupl of wai to do it .
first , i'll show you the built in wai in textwrangl .
you go up to here , !
and sai , run in termin .
and thi will start up a termin and then run the python command interpret and feed it our program .
so we sai run in termin .
and so , there's some stuff here .
thi is just sort of cruddi overhead .
but right here it basic is my output for my program , and it sai oh , in the file user demo desktop we got a syntax error on line <num> hello world , invalid syntax .
now it doesn't , doesn't tell us much about how we might fix thi , show just how , not clever python is , but it certainli know that we've made a mistak .
but we know it's in line on so let's go back and take a littl more closer .
we meant to sai print , oh i forgot the t .
so let's go ahead and sai t and we'll save it .
oh , i didn't mean to lock it .
i'll just save it .
file>save .
and then i'm go to run it python again , run in termin .
and then i see my littl python output .
so you gotta realiz that everyth other than thi bit here is the python output .
and i can make chang , and i close each time .
hello there , world .
oop , hello there world .
and i will us a shortcut .
now , thi cmd s , there's a littl appl symbol , appl s will save it , so i'm not go to actual save it .
i'm just go to save it with cmd s and then i'm go to run it , oop , i didn't mean to run a debugg .
no wai , did not want to do that .
close , die .
let's try that again .
i'm go to run it in termin .
and then awai we go and you'll see that my program ha chang .
and so we can see that i can run thi program and chang it over and over .
now after a while thi will get kind of tire .
i'll hide the termin , get rid of it .
and especi when you need to be in a particular directori and if you're open file and so you're go to want to run the termin by hand .
and learn a few termin command , and so i'm go to type termin .
termin is , we've actual been us thi , but now i'm go to open a separ on .
and now i'm at thi command prompt where i can type command .
make that a littl bit bigger so you can see it better .
and on of the command is ls , which stand for , i don't know , list all my file or someth .
in window , thi would be dir but in unix , it's ls .
and on of the folder that i see is the desktop folder there .
so i am go to sai , cd desktop , and then i'm go to sai ls , and you'll see i have effect thi littl folder that i have got there is shown as on of the folder is in , in my desktop folder .
so , it's a subfold .
so , i'm go to go into assn , oop , n0 , and do anoth ls .
now , if you're wonder where you're at , you can alwai type thi command pwd , which stand for print work directori .
so , i'm in the main hard drive under user demo desktop assn0 , and then within assn0 i've got on file , firstprog . py .
if i want a littl more detail , i add minu l to my ls and it can tell me that it's a file , how big it is , when it wa creat , et cetera .
now if i want to run thi , i simpli type the command python firstprog . py .
and python sai start the python interpret and then feed it firstprog . py , and then python run my littl program and give me output .
now a coupl of shortcut .
first shortcut , hit the up arrow .
and you can hit the up arrow a coupl of time .
you can hit it a coupl of time .
i am hit up arrow .
then i'll hit down arrow and i can run previou command .
okai ?
i can also type part of a file name like python fir and then hit tab and it actual auto complet becaus it know the file name and look at the file name and it sai oh , fir is the begin of the onli f , there's onli on file that begin with fir , so i'll finish it for you .
and so , the command line is pretti easi .
so , if you want to make a chang , you can just have the command line sit there in on window .
and make a chang .
and i'm go to just hit cmd s to save it , and then i'm go to come here .
i'm go to hit up arrow , and i'm go to hit enter .
so now i can , you know , make a mistak , like a syntax error .
i can hit cmd s to save it , then i can go over here and hit up arrow , and run it again .
and it tell me whoa , line two you've got a syntax error .
and then i will go ahead and fix thi , print sorri .
and so now my command , now i've got valid python and if i hit up arrow , and hit enter , it sai two line .
print sorri .
now you'll also notic that it's do what's call syntax color .
it's show us what part's keyword , what part's not a keyworld , word , and i don't know if you notic , but when i had the mistak it wa black .
becaus blue mean it's a python keyword , prin is just text , so it doesn't realli know what we meant by that .
and then when i get the syntax right , it turn blue .
it's , it's not realli critic .
it's just , it help you understand what's go on .
syntax color give you good clue .
you can see what line you're on , down here in the lower left hand corner what line you're on , what column you're in .
and that can actual help you as you look at syntax error when it tell you oh , thi syntax error is on line two .
so that give you a good start to us download and instal text edit and us it to do python on on macintosh .
thank you .
hello and welcom to the podcast on take screenshot on the macintosh .
nice , macintosh ha a veri simpl tool built in .
we go into macintosh hard drive , we go to applic , and then we search down for preview .
p , p , p preview , preview right here .
so , preview , and i'll close thi now .
so , we've got preview .
preview's the applic that that wa origin built to view pdf on the macintosh , but it also ha a whole seri of screen captur capabl .
and i like to keep preview in my dock all the time , so i come down here on the preview icon and , oh , it's alreadi in my dock .
if i said remov from dock .
and then i would sai keep in dock .
it wa alreadi there .
as soon as i start preview , i alwai keep it in the dock .
i put all the thing i need to us all the time in the dock .
and so let's take a screenshot .
i'll just sort of start a jedit program .
and i'll sai , take me as a screenshot , whatev .
doesn't matter .
just thi is the window that i want to take a pictur of , thi window right here .
so i go to preview and i sai file , thi is in the most logic place .
you can either grab a rectangular select , which you'll be allow to draw with your cursor , or a window , or the whole screen when time .
<num> of the time what you realli want to do is take a window .
you can sai , grab window , it , it tell , you , oh , you know you can grab , go over differ window .
i can click here , i can click there .
and click there .
and i just want to captur thi window .
so , click .
i go like that .
now here's a littl weird .
thi is now an imag , okai ?
and so you can't click on thi stuff .
okai ?
that's that .
so what you need to do , i'm go to close the origin real window now , thi is my jedit .
i'm go to cmd q to get rid of the jedit .
and i do not want to save that file .
so now i'm in preview .
see , i'm in preview here .
and so , i've got thi as , as an imag .
now the on thing it doe , is it alwai save it to your desktop .
so which get to be sort of pain as a , after a while .
and give them them long name call snapshot that ha the date and store it in thi format call . tiff .
so i prefer to switch it to a , you know , non appl format .
so i want to do a save as , and i'm go to save thi , save thi as a . jpeg .
and i'd give it a , a better name , call first imag .
and it'll be a . jpeg .
and i'm go to store it right on my desktop .
so now here we have first imag , okai .
and i can click on that and take a look at it .
i'll close thi .
click on it .
interestingli , it just come back up in preview .
so , that's pretti much it .
thi would be the file that you would upload , if your job wa to do thi .
i'll show you a coupl other trick that i like to make my imag a littl bit better .
now , preview ha a simpl tool for crop .
and the wai you crop someth is you sai , you draw a rectangl here on the imag , and then you sai tool , crop .
and i've gotten rid of all the rest of that imag except that which i want .
and i'll sai save thi as it's a . jpeg , and i wan't to save it as . jepg .
tini .
i'll save it as tini .
and so i now have two imag .
i got that first imag .
and i got thi tini imag .
and there it is .
i'll us cmd w to quickli close it .
i realli like , i mean appl w to quickli close it .
and so the on thing is , you just , after a while , your snapshot fill up on your desk , and so just keep clean them off .
and if you were upload to hand in a screenshot or whatev , thi would be the file that you upload .
so that's pretti much all there is .
us the preview command .
to take screenshot with the grab and typic it's grab window .
okai ?
thank .
hello , and welcom to our how to us notepad to run python applic .
thi is part of my open and free textbook , python for informat explor inform .
at thi point , you should have , hopefulli by now , instal python .
if you haven't yet instal python , you can go , my book is realli ani python version <num> is fine , <num> , <num> , , <num> .
the simplest thing to do is to go down to thi link right here which is the window x86 msi instal .
if you're in doubt as to whether or not you're a window <num> or x <num> bit , just go ahead and grab the <num> bit .
download it , run it .
i won't go through that here .
it's straightforward .
it's pretti much the same as run most instal packag .
the other thing that you're go to want to instal is a programm editor .
i recommend notepad plu for window user .
you realli don't want to us notepad .
it will mess up your program and turn them into variou thing and not save them the right wai .
so we just want a programm editor that understand program , that's go to , it'll be good for html , it'll be good for css , good for lot of thing .
so , again , download that .
there's a coupl of wai .
you can just go notepad plu and googl and find it and download it and instal it .
but i'm go to assum that you've done both of those thing .
so now what i'm go to do is i'm go to show you how to run the program , assum you've instal these two thing .
so let go ahead and start notepad plu plu .
i've alreadi got it here .
and there we go .
so now i'm go to write my first python program .
print , hello world , world .
i'm not a veri good typer .
okai .
so then what we got to do is , i've got to save it somewher .
so we're go to run thi .
thi is just edit a file , so i'm go to save it .
save as , and i'm go to put it on to my desktop , and i'm go to name the file firstprog . py .
now you might want to put thi in a folder .
if you ar go to be us , pleas don't put name in your folder , okai ?
i mean space in your folder .
so i can put thi in a folder but i'm go to put it in my desktop , so the save show up right here .
it is inde on my desktop .
now to actual run thi we ar go to run it through the command line .
there ar mani wai to do thi but i prefer run it through the command line so you realli get a sens of control rather than click on thing and so , so thi is thi version of window i have to start a command prompt cmd .
i start cmd , sometim it's start run cmd depend on your window , but on wai or anoth you get thi littl black and white beauti littl screen .
and where i am at is tell me the current directori .
i'm in the c drive>user>screencast .
that's my home directori .
and i can go on folder down to go into my desktop .
and when i am in my desktop in thi window , it's the same as here .
so if i do a dir , which is the command to list the file , i see first firstprog . py sit in the exact same place that i am .
okai ?
so the wai that you run thi is you simpli type firstprog . py at the command line .
we ar go to run a python program and python sort of understand , window understand that file that end with a suffix . py ar python program .
and so , here is my first program .
but it's sai i've got a syntax error .
it sai someth , someth , someth print hello world , let me look at thi more close , print oh , oh , oh , i should have call that print .
oh .
and there we go , we see syntax highlight , so now i am go to save thi , oop , file , save .
now here is a littl trick that you can do .
see as how i just type firstprog . py , and i want to run the same command again , i just hit the up arrow .
and it automat know what my previou command is .
you can scroll thru these thing .
a wai to go .
firstprog . py .
okai , that work a littl better .
it sai hello world now .
so you just basic will write , second .
you know .
your do stuff here in your python and you will save it .
save it .
and then you'll hit the up arrow and run it .
and there we go .
i'm , i'm chang .
so , thi is a python program .
it's store both on your desktop , and here you can run it .
okai ?
so that is basic , the , the , the idea of how thi , how thi work and , oh , let me show you on more thing .
sorri , i wa check my note .
if you want to run the python interpret interact , you have to type it full path .
c , colon , in my case i've got python two seven instal here .
python <num> backslash python dot ex .
oh , i didn't do that veri well .
but here i can type the up arrow and i type ex .
and so now i'm at the chevron prompt .
and so i can sai like print .
yo , i can sai , x equal <num> .
print <num> .
now to get out of the chevron prompt , you either type quit with parenthes or ctrl z and i will type ctrl xz to exit .
and that exit the python interpret , the interact mode of python , okai ?
hello and welcom to the podcast on how to screen captur on window , microsoft window vista .
so , thi is pretti easi actual , becaus there's a program doe it on window vista , the snip tool .
so let's just sai i want to take a pictur of thi jedit run right here .
it doesn't realli matter .
so , i am go to write hit the start button and type snip .
and there is the snip tool .
and so , i will launch the snip tool .
sure i'll , i like launch ad snip tool to my quick launch bar .
and basic , it's tell me here that the snip tool is kind of grai out the rest of the screen , and it's allow me to do sever kind of snip , a free form snip where i draw with my cursor , a rectangular snip , or a window snip .
probabl the most effect is a window snip so i'll select window snip .
chang my cursor and it sai , take that .
now , i'm go to throw that awai .
oh , wait a sec .
i'm go to just sai do thi again .
where did that show up ?
switch desktop .
where's the snip , speedi snip tool , there .
now , all right , again .
snip tool .
okai .
so on thing you'll probabl want to do befor you go snip is chang the option .
and see how thi ink select ?
it's cool while you're cruis around figur out which window , but onc you take the snip , i don't quit know why thei default thi to on .
so turn off show ink select after snip ar captur .
then sai ok .
and then sai , i would like to do a window snip .
and now it's show me which window it's snip , and you'll notic how i chang between them , and i click on the window i'd like , and now i don't get thi funki red around the outsid .
and i simpli sai save as .
i'm go to put it on my desktop just for yuck .
instead of in pictur , you can stick it anywher , my snip and i want it to be jpg , that's go to make perfect sens , and it's save it and now i can close the snip program .
and son of a gun , if i have someth be snip and grab and you can click on it here and open it up in the pictur viewer .
just to make sure , come on , pictur viewer i don't understand why the pictur viewer is not start .
well , there we go .
so there is is the pictur viewer and so it look pretti nice , and so if you were to have to turn thi in now , we've got a bunch of these becaus i click so mani time .
if you have to turn thi in , you just upload thi file .
and that's pretti much all it take to do screen captur in window vista , veri nice .
hello and welcom to pythonlearn . com .
we ar on thi particular video we're go to show you how to write a simpl program us a text editor and a termin on the raspberri pi  .
raspberri pi  is a realli cool system that run unix linux and so we have a desktop , onc you got your raspberri pi  work .
you should have a desktop .
it ha a start icon at the bottom .
and we're go to start .
we actual don't have to instal anyth .
for the macintosh and the window we had to instal variou thing but now everyth come on linux becaus it's sort of set up for programm .
i'll start a text , a simpl text editor and i'll write a littl python program in the text editor .
we call these script .
and the classic thing to do is to write a program that sai hello world .
and i am go to do a save to thi file , and i am go to put it on my desktop and make a new folder call assign <num> .
and then , in assign <num> i'm go to call my file hello . py and save it .
i got my screen a littl small , so you can see a littl better .
you'll notic on that desktop that folder show up , and if i click insid the folder , there is inde hello . py .
so now what we're go to do is we're go to there's a lot of wai you could run thi .
there ar thing , there ar tool call idl and you mai have even learn and us these befor .
i prefer show you realli how stuff work .
the techniqu i'm go to show you work pretti much the same on a macintosh or window , where you actual talk to the oper system and sai hei , run my python for me .
so i'm go to open up a termin window .
and a termin window let us type oper system command .
and so for exampl , the first command is ls , that list the directori and file that of wherev you're at .
the pwd stand for print work directori .
it sai where ar you at .
and i'm in the home c7 , that's my account .
and cd sai chang directori .
and i'm go to chang into the desktop .
and just as , i can type d e tab , and as long as that's uniqu it automat goe to the desktop .
and then enter .
if i type ls , well i see kind of what's kind of on that desktop .
that desktop ha a folder call assn0 .
a s s n <num> .
and , then i go into that folder , assn0 , so you navig on folder in , and you'll see it's tell you roughli where you're at .
and if i do an ls here in thi command line , it sai , oh , you've got on file , and it's name hello . py .
and if you look at thi , it's show you the exact same inform .
so we're realli , thi , thi termin's a differ view .
and i like it becaus we can type command here , and be smaller , there we go .
you type command .
i can tell you exactli what to type .
it's easier to write document frankli .
so , we want to run thi program .
we wrote the program over here and now we want to run the program in thi window .
so we type python hello . py .
and that sai , go find python .
that's like microsoft word or some other program that happen to be the python itself that we're run .
and feed it hello . py , thi on file .
so , when i type enter , it's go to run it .
and so it's go to interpret these command .
and i told python that the first thing and last thing i want to do wa to do a print of hello world .
that , of cours , is thei're tradit .
thi is a script .
it is a seri of command .
print howdi world .
print yo world .
i can have all kind of thing in here .
print peac out .
i don't know what to type .
now there ar some short cut that you will get us to us pretti fast .
i can keep sai file save , but you'll notic ctrl s is a save .
and you'll notic thi littl asterisk up here .
watch when i press ctrl s , that asterisk mean the file's been modifi , but not save .
thi will save you a littl bit of insan .
make sure you know that .
it's like oh it's not save , so ctrl s , press , and now it's been save .
that's how i know it's save and it's been save over here .
and now i'm go to sai , python hello . py , to run it again .
and , oh now it's yell at me .
oop , i see what i did wrong .
i should've said print , i should've said instead of pring i should've said print .
you'd think it would be smart enough to know that like why isn't thi gui do print .
so i now have to save it again , so i do ctrl s .
and now here is now is anoth trick .
you can hit the up arrow and run the previou command again .
so i hit the up arrow , and hit enter , and there is my output .
okai ?
so not too hard .
everyth's alreadi pre instal on the raspberri pi  linux .
pretti much all linux ar go to have someth like thi .
and so awai we go .
thank for listen .
hello , and welcom to the option extra credit assign for python for everybodi , week <num> .
i realli want to encourag you to follow through the script , instal python , and write your first simpl on line program , us a text editor and a command line .
i realli think that you're go to learn a lot from thi , not just , you know , how to program , but how to us your comput in a sort of a more profession wai .
now if you're us a phone or an ipad , you can't do it .
and that's okai .
but if you're us a laptop , i'd like to see you learn a littl bit more about how to us that laptop .
and so thi what you'll do is , you'll do , do , write the program .
take two screen shot .
on of the text editor and on of the program be run , and then you'll upload them .
thi is a peer grade system that i wrote and host on my own server and it's suppos to make it so that you can , you know , peer grade realli quickli .
so , let's assum that you have your your two screenshot .
you go here .
now the on thing you'll notic is it ask you thi cours util third parti learn tool from servic provid lti tool , dr chuck . com .
you're share your data with these third parti .
that third parti is me , in thi case .
and thi is realli good .
coursera is make sure that i'm not get your data unless you want it .
so you sai ok , and then you continu to my server , extern server .
and it give now the what you're suppos to do .
instal the python , write a hello world program , take some screen shot , yada , yada .
and then what you do is when you have those screen shot , you upload those .
so , i'm go to grab , i've alreadi thi , of cours .
i'm go to grab a second file , and i can put some comment , i am us a mac or someth , whatev you want to sai .
and then you submit , and when you submit you can see your submiss .
you're not allow to remov your submiss onc the process start .
and if there ar other student to grade , you get to grade the other student .
and your , part of your grade come from you do grade , and anoth part of the grade come from other grade you .
and so you'll get six point for the grade that you get from other , and you'll get four point for the grade you give to other .
you've got to grade at least two submiss , you can grade up to five submiss .
so i'll just , it'll randomli pick anoth student to grade .
so here we go , i'm go to , i'm go to take a look at thi person's thing , and like okai , there's , there's their python .
that look pretti good , and then there is their editor .
that look pretti good .
so i'm go to give thi person six point , and sai love the pic and then grade it .
and i've grade on student , and i could grade , if i want , anoth student .
so , i will grade anoth student .
and let's see who thi on is .
thi is , well , thi is oh , thi is anoth version of me .
that's my instructor account so and so there we go , session .
your shouldn't sai hello dr .
chuck , it should sai hello you and so i'll give myself six point nice work , instructor chuck .
grade .
now .
no on ha grade it .
so i got <num> percent as my grade .
i just have to stop , right .
i have to quit becaus there is no on els , i mean i've grade everyth i can grade .
i can grade more student up to five , and i just have to wait till other come and grade me .
but the grade will come back in , onc thei grade me .
so , you know , in mayb <num> minut or an hour , or whatev .
someon will grade mine , and my grade will go up , okai ?
and that's it , and when you're all done , you gotta close the window .
and go check your grade in the grade book .
at thi point you should have a <num> but as the grade , other evalu you , your grade'll go up to point on .
so , it shouldn't take you veri long to get all the wai up to point on .
and so , that's my littl realli lightweight , i call it a social peer grade system that you should get feedback within an hour or so .
i us it for like check off assign , just to make sure that you pretti much did it right .
there wa , you saw it wa realli easi to grade and real easi to take a look at them .
so , i think thi is a fun wai to grade assign and you should get realli quick feedback .
hello , and welcom to chapter two .
hope you enjoi chapter on .
it wa on of the longer lectur .
try to motiv you a littl bit .
and now we're go to kind of go back to the basic , to the , chapter chapter on cover sort of the first four to five chapter of the book .
so as alwai , thi thi video , these slide ar copyright creativ common attribut , as well as the audio .
and so , now we're go to talk about sort of the realli low level thing that make up the python languag .
constant .
so i'm go to summar thi terminolog just so i can like sai the word constant and you won't freak out .
a constant is as contrast with someth that chang , a variabl .
we talk about variabl in the next slide .
but for now , constant .
constant ar in thing that ar sort of natur and instinct .
thing like number .
a hundr and twenti three .
<num> , or hello world .
and so in , in , what , what i'm do here is we're , we're us a python interpret , and that , that's how you can tell , the chevron prompt .
and i'm sai print <num> , and then python respond with <num> , print <num> , python respond with <num> , and print 'hello world' .
so the constant ar the <num> , <num> , and 'hello world' .
so these ar thing .
we can us either singl quot or doubl quot to make string .
and so program kind of work with number and work with string and we have these non vari valu that we call constant .
so the other side of the pictur is a variabl .
and the wai i like to character a variabl is it's a place in the memori of the comput .
we give it a name as a programm .
we pick the variabl name .
in thi , i'm sai x equal <num> and y equal <num> .
i am choos the name and i'm choos what to put in there .
thi is a statement call an assign statement , and the wai to think of the assign statement is that it sort of ha a direct .
we're sai , dear python , go find some memori .
i will us label x later to , to refer to that memori , and take the number <num> and stick it into x .
then thi is sequenti code .
then the next thing i want you to do is i'd like you to go find some more memori , call it y , i will call it y later , and stick <num> in there , okai ?
and so that end up sort of with two littl area of memori .
you know , the on label x , and here's a littl cell in which we , like a drawer , or someth .
and on label y .
and we put <num> .
after these line run , we have <num> in on and <num> in the other .
then , for exampl , if there's anoth line that's down here , so there's thi third line after thi ha happen , after thi ha happen , x equal <num> .
rememb , thi ha kind of got an , a direct to it , see ?
oh , rememb that x that i had , you know , i would like now to put <num> in that .
so as i'm think thi through , i think of that as sort of remov the <num> or overwrit the <num> and put <num> in it place .
and so at the end here , x is left with <num> and y is left with <num> <num> with <num> .
so these variabl can kind of have on valu in them and what we can look at them and we can reus them and put differ valu in if we want .
there ar some rule for name your variabl .
again , you get to pick the variabl name .
often we pick variabl that make some sens .
we'll talk about that in a second .
in python variabl can start with an underscor .
we tend not to , as normal programm , us those .
we let librari us those .
it ha to have letter , number , and underscor .
and , and start with start with a letter or an underscor .
case matter , so spam is good , egg is good , spam23 is good becaus the number is not the first charact , _speed , that's also perfectli fine becaus it start with an underscor or a letter .
23spam start with a letter , start with a number , so that's bad .
thi start with someth other than a letter or an underscor .
and you can't us a dot in the variabl name .
it turn out the dot ha mean to python that would confus it .
that would confus it and wouldn't understand what we realli mean there , and so that would be a syntax error .
that would be a syntax error .
becaus case is sensit , that mean that thing like all lowercas spam is differ than a upper case s and all uppercas .
these ar three distinct variabl that ar uniqu .
most peopl don't us , choos variabl that might be so confus .
so that's to you as you write it and as to anybodi that might read it would find three variabl name thi veri confus .
so it's a bad idea .
don't do it , but i'm just show you as an exampl that case can make a variabl name distinct .
and again , thi variabl is a place in memori that we ar go to store and retriev inform .
whether that be number or string or whatev .
these ar thing that we control .
now python also ha a set of reserv word .
what it realli mean is you can't us these for variabl .
these word have veri special mean .
and , for , is , rais , if .
so you can't make a variabl name i f .
it would be like , oh no , that is if .
i know what if is .
so these ar word that python ha as it core vocabulari .
and forbid you to us them for other purpos , like variabl name or later function name .
so that's kind of the vocabulari .
constant , variabl , and reserv word .
now , we take these and we start assembl them into sort of sentenc , statement , python statement that do someth .
so we've alreadi talk about an assign statement .
it ha kind of an arrow here .
it sai , hei python , go find me a place call x .
take the number <num> and stick it in there for later , then continu on .
now , becaus there's an arrow , the right side of thi is done first .
and so it said , so thi right side , you can kind of ignor for the moment the left hand side and it calcul the right hand side by look at the current valu for x .
which happen to be <num> , and add these two thing togeth , and then get <num> .
and then , at the point where it know <num> , that thi number is <num> , it will then store that back into x .
and so then , later , we print x and we will get the <num> .
and so again , thi is a sequenc of step and the , the variabl x chang as these step continu .
and when we're sai print x , that realli mean print the current valu for x .
so , we can do a number of differ oper and assign statement .
we calcul thi right hand side .
thi is sort of all calcul , whatev thi is , base on the current valu for x doe thi calcul , and then when it know what the answer is , it assign that into the variabl that's on the left hand side of the assign statement .
again , calcul the right hand side complet and then move it to the left hand side .
some earli languag actual didn't us the equal sign for the assign oper .
thi assign oper in , in a wai it kind of some languag an earli languag actual us an arrow .
arrow aren't realli on peopl's keyboard .
anoth languag us colon equal as thi assign oper .
but we us equal .
now , if you're familiar with math thi can be a littl confus , like x equal <num> and then x equal <num> .
that as mathemat would be bad math becaus in a proof or a problem , x can onli have on valu .
but in program if thi wa two statement , that mean just x had a valu , and then the valu for x chang later .
okai .
so just kind of go through thi becaus it's work from the right hand side to the left hand side on assign statement .
it is pull out these x valu , so x mai have <num> .
it pull the valu out befor , sort of ignor thi part right here , and it's just go to try to resolv thi express .
and it ha multipl and parenthes and thing like that .
so it basic pull the <num> into the calcul , doe the <num> minu x , which give you <num> .
then it multipli these three thing togeth , give <num> . <num> .
and then when it is all done with all of that , it take that .
oop .
it take that <num> . <num> , and then put it back into x .
and so thi is just sort of emphas how the right hand side is comput to produc a valu , then it is move into the variabl , and that is why you can have sort of x on both side .
becaus thi is like the old , and thi is the new .
thi is the old x particip in the calcul , and then when the calcul is done , it becom the new x .
hope that make sens .
so , thi , on the right hand side here is a numer express .
so we have a number of differ oper .
some of them ar instinct , intuit .
the plu and the minu .
the reason some of these ar so weird is in the realli old dai , we didn't have too mani thing on the keyboard , and a lot of program were veri mathemat .
and so thei figur out what wa on the keyboard of the comput equip of the dai .
and then thei had to fake certain thing .
so , it turn out that plu and minu were on the keyboard , and so plu and minu ar addit and subtract , respect .
there wa no kind of time oper for multipl , and dot wa us for decim point .
so thei us asterisk for multipl .
so on comput' languag , nearli all of them , thei basic us a mult time for multipl .
slash is us for divis .
so we sai like , <num> <num> , which is <num> divid by <num> .
rais someth to the power like <num> squar , that is doubl asterisk .
and then remaind is if you do a divis that give you the remaind rather than divisor .
so <num> over <num> is <num> remaind <num> .
so the remaind is what you get with thi particular oper .
there's a few cool thing that we can do with remaind that we won't talk about right awai .
but it's there .
and so here's just a coupl of sampl express .
that's give me green .
okai .
so , so again , i'm us a python interpret .
so you can kind of , thi is just the prompt .
these chevron ar the prompt .
creat the variabl xx , and assign it to <num> .
retriev the old valu and an addit .
then print it out and put it back into xx so xx ha <num> .
yy , thi is a multipl , <num> time <num> .
it is <num> , <num> .
yy over <num> , <num> .
now thi is a littl counter intuit becaus yy is an integ , it then doe it in a truncat divis .
and so , <num> , <num> divid by <num> is <num> .
now if , and , and so that's an integ divis .
we'll see in a second about float point divis .
now we take the variabl jj and we set it to <num> .
and now we're go to us the modular or modulo or remaind oper .
sai what is jj , what is the remaind when divid thi jj by <num> .
and so if you think about thi , we take old long divis , <num> divid by <num> , you end up with <num> and then remaind <num> .
the modulo oper , or the percent of the remaind oper , give us back thi number .
and so that's why kk is <num> .
it is the remaind of <num> when divid by <num> , or the remaind of the divis of <num> into <num> .
and the rais to the power , <num> cube .
that's not so nice .
<num> cube is <num> star , star <num> .
and so that end up be <num> .
so that's just oper .
now , just like in algebra and mathemat we have rule about when to which , which oper happen first .
in gener , thing like the power happen befor the multipl and divis , and then the addit and subtract happen .
and so there ar some rule that , when you're look at an express and try to calcul what it valu is , if you don't have parenthes , it follow these rule .
and so the , the most , the rule that sort of trump all the rule is that parenthes ar alwai respect .
so a lot of us just write these with parenthes in place , even sometim though you don't need it .
then after parenthes have been handl , then it doe exponenti .
then it doe multipl , divis , and remaind .
and then it doe addit and subtract .
and then , when all els be equal , it just work left to right .
so let's , let's look through an exampl .
so here is a calcul that is , you know , <num> , <num> plu <num> time <num> divid <num> over <num> .
and the question is , what order doe thi happen , okai ?
and so let's sort of take a look at thi .
and so , we start with ar there ani parenthes ?
and the answer is no , there ar no parenthes .
so let's go next .
power .
and so the , the power sai okai , let's look across and find those thing that ar rais to a power .
and <num> cube or <num> to the third power is the , the power .
so we're go to do that on .
okai .
and then we can , the wai i do it when i'm sort of do these slowli is i rewrit it .
so the <num> to the third power becom <num> , so it's <num> plu <num> over <num> time <num> .
and then now we can sai oh power , that's taken care of .
now we're go to do multipl and divis and we go across .
now we have both a divis and multipl .
okai ?
multipl and divis ar done at the same time , so that mean we do left to right , which mean we do the first on we encount first .
and so that will be <num> over <num> becaus of the left to right rule .
and so we find that on , and that's the on that get comput next , and that turn into <num> .
and again , i like to rewrit these express just to keep my brain realli , realli clear .
after a while you just do it in your head , but i rewrit them .
when i wa first learn it , at least , i rewrot it all the time .
and and so next look at thi , there's a multipl .
we're not done with multipl yet .
so the <num> over <num> is the next thing .
and then we do that calcul , and that becom <num> , and again we rewrit it .
and now we've done the multipl , and we're go to do addit next .
and that's just <num> over <num> , and that becom <num> .
and so basic , thi big long thing , through a seri of success step , becom <num> .
and inde , when we print it out , that's what we get .
okai ?
so , there's the rule that ar parenthes , power , multipl , addit , and then , left to right .
but smart peopl usual just put parenthes in , you know ?
so here's thi , here's an exam .
oop , go back , go back .
here's an exam question .
now , i wouldn't write thi code , right , i wouldn't write thi code thi wai .
i would put a parenthes here .
and a parenthes there .
it's the same thing becaus that's exactli the <num> time <num> is go to happen and <num> over <num> is go to happen and then the plu and the minu will happen left to right .
but why not make it easier on your reader and just put the parenthes in .
becaus thei're redund .
thei're not necessari , but awai you go .
now , if you don't want it to happen in that order , of cours then you have to put parenthes if you want the addit to happen befor the multipl , then you have to put parenthes in , which you can .
but we tend to recommend that you us more parenthes rather than less parenthes .
now , python integ divis in python <num> , which we're us python <num> for thi class .
there's a new python <num> that the world is slowli transit to and a lot of peopl ar us it in teach .
but it's not as common , sort of , in the real world with librari and util .
and so we'll stick with python <num> for a few more year until python <num> realli kind of turn the corner .
it's nice to have it there , but there's so much python and it's so popular , python <num> , that it's just kind of hard to get everybodi up to python <num> .
so in python <num> , integ divis truncat and you saw that befor where i did the <num> by <num> and i got <num> as and , and , but we can look at a coupl of exampl that make thi realli veri quit , quit clear .
so , <num> divid by <num> is <num> as you would expect .
<num> divid by <num> is <num> .
not exactli what you'd expect .
you kind of expect that to be <num> , instead of <num> .
but in python <num> , it will be <num> , but for now , in python <num> , <num> over , <num> over <num> is <num> .
and <num> over <num> is <num> .
now that seem rather counter intuit , but it is a truncat divis , it's not a round divis , it's a truncat divis .
now , interestingli , if you make either of these number have a decim , make them what we call float point number , then the divis is done in float point .
so , <num> over <num> is <num> .
now , these ar differ .
thi is an integ number , and thi is a float point number .
it's <num> .
and then <num> over <num> is exactli as you would expect , and it's a float point number , so .
now you can also mix integ and float point number as you go .
so here we have <num> over <num> .
those ar both integ .
integ , integ .
and , or , and that come out with <num> becaus it's truncat .
now if we have an integ and a float point number , <num> over <num> , then that come out as <num> . <num> .
and either on , if we have <num> over <num> , that's a float point , and that's an integ .
we still end up with a float point , so thi is a float point , float point .
and even in complex express , as it evalu when it see an integ , so the first thing when you evalu is thi would becom a <num> , so it would be <num> plu <num> over <num> minu <num> .
then it would be do the <num> over <num> and that would be <num> , <num> plu <num> minu <num> .
and so thi is an integ and that's a float point and the result becom a float point .
and then the rest of the calcul is done float point to the point where the ultim is a float point neg <num> .
so you can throw a float point into a calcul and as soon as the calcul touch the float point , the remaind of the calcul is done in float point .
it kind of convert at the float point but it doesn't want to convert it back becaus it consid float point sort of the more gener of the represent .
so , here we ar , talk about integ and float point .
these ar a concept in program languag and in python call type .
variabl and constant have a type .
we can see that if you sai <num> , versu <num> , thei have differ , thei , it work differ , it function differ .
and so python keep track of both variabl and liter constant , and have them have a type .
and we've seen thi , right ?
now , the interest thing is , is python is veri awar of the type and can us the same syntax to accomplish differ thing .
so if we look at thi line here , where we sai dd equal <num> plu <num> .
well it look at the <num> and look at the <num> and it sai , oh those ar two integ .
i will add those togeth and give you a <num> .
so it give you an integ , an integ , and an integ come back , okai ?
and then ee equal 'hello ' plu 'there' .
well these ar two string , 'hello ' and 'there' .
and it sai hmm , thi must be a concaten .
all right ?
so i'm go to concaten those togeth becaus those ar string and i know how to concaten string .
and that's kind of like string addit , right ?
and so we see a hello there as a result .
now the interest thing is , where did thi space come from ?
let me chang color here .
oop .
where did that space come from ?
well , the plu doe not add the space .
here's a space right there , and that's the space .
so i can concaten it , hello space plu there , and that's how i got hello there .
but , the kei thing is , is thi plu oper , clear , thi plu oper look to either side and sai oh , thei're string .
i think you mean concaten .
here it look either side and sai oh , those ar integ , i think you mean addit .
so python is veri awar of type and type inform python what you realli mean .
so , it look like those ar kind of the same , but thei're quit differ oper .
so the type can get you into troubl .
rememb python is look at the type .
so here we have a littl problem , our first traceback , first of mani traceback .
so here we have ee which is hello there which is exactli what we did .
thi is a string and thi is a string .
so ee should be a string .
and then we try to add <num> to it .
and again , python is sai oh , i see a plu sign here , so i'm go to look over here , yeah , that's a string , and look over here , and that's an integ .
and it's like , aaah !
and thi is a traceback .
now , here's a good time to talk about traceback .
traceback , i color them red .
becaus you might think that python dislik you or think that you're , you know , unworthi of it brillianc .
and certainli the wai these thing ar word it sound like , you know , the , you're be scold .
it's like , hei , type error .
you can , cannot concaten str and int object , right ?
that's , i'm , i'm scold you , you bad , bad programm .
and it doe feel a bit like you're scold .
but , if you go back to lectur on , thi is also the moment where , realli , we shouldn't think of thi as like scold .
we should think of thi as python sort of ask for help .
it's like , wow , you gave me thi line , and i , python , have no idea .
in all your great , could you give me some possibl clue as to what you realli mean for me to do ?
becaus i'm so lost .
and given that i'm python and i'm lost and you ar the onli purpos for my exist , i must stop until you give me better guidanc .
so , don't look at traceback as scold .
thei sound like scold .
i'll stop color them red after a while .
so , if python is so obsess with the type of thing , you should be abl to ask python what the type of someth is .
so there's a built in function call type .
thi is part of the python languag .
type , and you can put a variabl in here .
what's the type of the variabl ee ?
and it sai , oh yeah , i know what that is , that would be a string .
and then you can also put a constant in here .
and sai what's the type of quot , hello , quot , and that's a string too .
and what's the type of the number <num> ?
well that would be an integ .
so it's picki about the type , but it will also share with you what it believ the type is .
and there's sever type of number .
as i've alreadi mention , there ar integ , which ar the whole number .
thei can be posit and neg and zero .
and then there ar the decim number , the float point number , like <num> or neg <num> or <num> .
python know these as well becaus it doe divis differ if it's present with two integ , or an integ and a float , or a float and a float .
and so here we have x is <num> , and we'll sai what is it ?
it's an integ .
and we sai it's <num> , and we'll sai , well , what's that ?
it's a float .
and you can ask for both variabl and constant .
so what's the type of <num> ?
it's an integ .
and what's type of up <num> ?
and it's a float .
you can also convert type .
it ha a bunch of type convers function built into it .
so , there's implicit convers go on when you're sort of sai , you know , divid an integ by a float point .
it sai okai i see , i look to the side and i will make the , i will make the convers for you .
but you can also be explicit .
so in thi case we're go to sai , take thi <num> and convert to a float point version of itself .
which is <num> .
and then do the divis .
so python look out here and goe oh , after that , that's a float , and that's an integ if i look over here .
and then that mean that the result is a float .
and the divis is done as a float .
so we ar forc convert the <num> integ into a <num> float .
and we can even do thi like and just stick it in the variabl .
so we can just put <num> in i and that is an integ .
then we can sai , hei , convert float that i into a float and stick it into the variabl f .
and so we can print it .
and now it's <num> instead of <num> .
right ?
thei're not the same .
thei're both kind of <num> , but on is a float point <num> and the other is an integ <num> .
and we can ask , and that is a float .
and you can also do the same thing in the middl of a calcul , where you have <num> plu <num> time a float of <num> .
thi float is done quickli .
so the first thing that happen thi is <num> plu <num> time <num> over <num> minu <num> .
so the first thing that happen is these float ar done becaus thei ar parenthes so thei matter .
so thi is a built in function call float that take , as it argument , a non float point number and give you back a float point number .
we'll talk more about function in chapter four .
you can also convert between string and number , and if you recal , i , we did the exampl where we took a string .
in thi case , i'm be a littl confus , becaus i'm make a string with the charact <num> , <num> , <num> .
now , thi is not the same as <num> .
thi is a three charact string with <num> , <num> , <num> in it .
and i can ask what kind of thing is in there , and it sai , oh , there's a string in there .
i know about that .
and then i can try to add <num> to it , and it seem intuit that quot <num> plu <num> would be somehow <num> .
but it's not .
python take a look at the plu and sai , oh there's a string on that side , and an integ on that side .
i am go to freak out and tell you that you cannot concaten a string and an integ .
okai ?
but there is an int function that convert variou thing , includ string , to an integ .
so we can give as it paramet , it input , the string valu , then it convert it to an integ , and then we'll put the result in the variabl ival .
we can ask what the type of that is , it's an i , it's a integ .
and now we can us it in an express , print ival plu <num> , and so now python look to both side , see an integ , see an integ , and get <num> .
voila .
now , if i make a new variabl and i stick hello bob in it , and i sai hei , let's convert hello bob to an integ , as you might expect , it blow up .
and it sai , invalid liter for int .
these , these traceback again , onc you kind of get us to the kind of harsh word of them , becaus thei're not sai , sorri , comma , thei're try to tell you what's go on .
so , cannot concaten string and integ , and invalid liter for int .
it's try to be as help as it possibl can be to give you a clue as to what to fix .
so , again , not scold .
okai , so that's variabl and type and type convers .
now we'll talk a littl bit about user input .
and there's a function that's built into python call raw_input .
and what happen when raw_input run is it , it ha as on of it paramet , a prompt , which is someth that show up on the screen .
who ar you ?
and then , it wait , tik , tik , tik , tik , tik .
sit and wait , sai , what next ?
and then , you type a string , dot , dot , dot , dot , dot , and then you hit the enter kei .
the enter kei .
and then whatev you type here goe into a variabl .
and it is a string .
and , then you , then you can us it .
so i'm go to print the string welcom , comma .
so that mean i'm print two thing now .
the comma add a space between welcom and then nam , and so welcom is a liter , and then chuck is come from thi nam variabl .
so thi is a two line program .
i think thi is on of your assign , actual , to well , it's on of the exercis in the book .
to a prompt for a user's name , and then welcom them , okai ?
so raw_input is a function that issu a prompt , wait , and then take whatev string that's enter , and then return it and then put it into that variabl .
so , now we're go to creat kind of the first us program .
it's not a power program .
it is a , an interest problem of the fact that for some reason there is a differ in the number scheme of unit state elev and european elev .
european elev , the floor that you walk out on is the zero floor .
the floor abov that is the on floor and the floor below that , the basement , is the minu on floor .
and so you walk in and you can go either up the elev or down the elev .
of cours , in the unit state , the floor that you walk in is the on and then there's the two floor abov that and then there's like , the basement .
so thi is the imagin that the american have as to how to number floor , right ?
the european go zero , on , minu on .
so , children who go to hotel learn instantli the notion of zero and the notion of posit and neg number and the symmetri between posit and neg number .
i mean , i just wish the unit state hotel would switch to thi to teach young peopl zero immedi and neg number .
so we somehow think that number all in the unit state start at <num> and then there ar no neg number , there's the basement .
i wonder why that is , but whatev .
for peopl who travel a lot , thei mai be confus by thi .
thei need a wai to convert back and forth between the us and european number system .
so thi is a simpl program that demonstr a real classic pattern of input process and output .
it's just three line , but it ha the essenti thing that all program that ar us .
thei gener read some data , do some work with the data , and then produc some kind of result .
and so , so the first line is a raw_input that effect , that put out a prompt and then it wait .
it sai , pleas enter your europ floor .
it sit there .
we type a zero , then zero goe into inp , but it is a string .
it's not a number .
it's a string .
so we can't add to it .
but we can take and convert it to an integ with the int function .
int of inp , that a string be convert to an integ so now it a real numer zero .
and we can add <num> to that and we sum that togeth .
and we put it into the variabl usf and then we print us floor , comma , and then whatev the variabl for usf is .
and out come us floor <num> .
so we've written a veri simpl elev floor convers from a european floor to a unit state floor .
don't ask about neg number , it's not realli good at that .
but from zero and posit number it work great .
so anoth thing to think about in ani program languag is comment .
comment ar like commentari , you know , and basic it's a wai for us to add notat for ourselv and for other human interspers in the code .
and so in python anyth after a pound sign is ignor .
you can have a pound sign at the begin of a line and then the whole line is ignor .
there ar two or three reason why you could do thi .
on is sort of like paragraph head , where you can sai what's go to happen in english or , or your languag .
and you can write document sai thi code wa written by charl sever , decemb <num> .
and you can also just hide a line of code to test and , and turn it on and off without actual delet the line of code .
it's a real common thing in debug .
so for exampl , here is a , here is a , the program that we've been plai with .
thi is our word count program that we've been talk about from the begin .
and here is an exampl of four comment , on , two , three , four .
four comment that basic tell us what these paragraph ar go to do .
now , thei don't have ani effect on the program whatsoev .
but thi on sai get the name of the file and open it .
kind of help , right ?
count the word frequenc .
that's what thi littl bit doe .
find the most common word .
that's what thi littl bit doe .
and all done , print thi out .
so it's realli can be veri help just to add a littl tini bit of stuff .
and you don't want to overus comment .
you don't want to sai like x equal <num> , take <num> and put it into x .
sometim peopl teach you and try to sai , oh you need a on comment everi three line .
i don't believ in ani of those rule .
i basic sai if it us to describ it , then describ it .
so that's comment .
so some oper appli to string .
we've alreadi talk about plu .
it's kind of silli , although us in place .
you can actual multipli string .
the asterisk look and sai i've got a string and an integ , and it print out the string five time .
not a lot of us for that .
now , let's talk a littl bit about choos variabl name .
thi is someth that is realli confus .
so i said like , x equal <num> , x equal x plu <num> , what doe x mean ?
and the answer is , it doesn't mean anyth .
i chose it .
i want to make a variabl , and so i pick x .
we pick x a lot , probabl becaus we learn in algebra in sixth grade that x wa a variabl .
so , and it's short , and so , why not call it x ?
but as your program get larger thi get kind of frustrat to have all your variabl like x and y and z .
and so the notion of mnemon , it mean memori aid .
we choos our variabl name wise , so thei remind us of what the variabl's go to do intern .
and so , as i go through thi lectur in the begin if i choos a variabl that's too clever you're go to think that it's part of the languag .
and so i sort of switch back and forth between well chosen variabl name and stupid variabl name to kind of reemphas the notion that i can choos .
mnemon is a good practic , okai ?
so here we go .
let's take a look at a bit of code .
so the question is , what is thi code do ?
what will it even print out ?
is it syntact correct ?
now you could probabl cut and past thi into your brow , into python and figur out that it is syntact correct .
there ar three variabl .
thi on here and thi on here match .
thi on here and that on there match .
and these two match .
so it's take these two number and multipli togeth , and then print out the product of the two number , if you're real care and like look at everi , everi charact .
now , thi would be call non mnemon variabl .
thei're realli messi .
now python , it's happi , becaus all it want is to sai , oh .
here is then name that i , the programm , decid i want to call thi piec of memori and i'll refer to it down here , okai ?
and so python is happi .
now if you hand thi to anoth human be thei ar go to be realli unhappi .
becaus thei ar go to be like , what ar you do ?
so on better wai to write it would be to make the variabl veri simpl .
and then cognit we human can figur out which is which , becaus again it's still onli about match .
the a ha to match the a , the b match the b , and the c's match .
it's actual the exact same program .
a equal <num> .
b equal <num> .
c equal a time b .
and print c .
it is these .
python see these as the same program .
it doesn't care what we name them .
now , a human will be much appreci if you sai , here you can either have thi on or thi on .
thi on will make them a lot happier .
okai ?
so that is certainli cognit easier , but it's not realli give you ani sens of what's go on here , right ?
so an even better wai to write thi exact same program to do the exact same thing would be to choos variabl name hour , rate , and pai , if inde that is what you're do .
now you can look at thi and you go , oh well , shoot , <num> is the number of hour , and <num> is the rate , and the pai is the number of hour time the rate , and then we ar go to print out the pai .
and that make a lot of sens .
so thi is realli a awesom and wonder character .
and if that's what you're do and those ar hour , rate , and pai , it's a great thing to name the variabl .
but , thi is where begin student get confus .
and so sometim i'll write it thi wai and sometim i'll write it thi wai .
becaus you'll look at thi , until you get a littl more sophist , a littl more skill , and you'll sai like doe python know someth about payrol ?
is hour a reserv word ?
is rate a reserv word and pai a reserv word ?
ar these thing that python know about ?
and the answer is , no .
python see these three program as exactli the same name .
it's just thi person realli made a veri bad choic of variabl name .
thi person made a less bad choic of variabl name , and thi person made a realli awesom choic of variabl name .
so the onli differ between those two thing is style .
thei ar the exact same program .
and python is equival happi with these , but human ar most happi when the variabl ar easi to rememb and thei ar somewhat descript of what their expect content will be .
that's mnemon .
to help you rememb what you were mean to do when you write the program .
thi is still a bit cryptic , have these realli short , on charact variabl name is still a bit cryptic .
so , you have a coupl of assign at the end of the chapter .
on of the assign is to write a program to prompt the user for hour and rate per hour and comput pai .
so , i won't do thi here , but just a coupl of sort of odd thing .
you're go to be us raw_input .
but rememb that hand a string in so you're go to have to us float .
the function to convert it to a float point number so you can actual do a calcul .
and then you're go to have to us multipl and print .
so then multipl , and then print .
so some combin of raw input , float , multipl , and print , construct to make your program do exactli thi .
so , thi is the end of chapter two .
we talk about type , reserv word , variabl , the mnemon , how you choos variabl name .
we'll hit thi a coupl more time becaus choos variabl name is alwai problemat .
oper , oper preced , which just mean like doe multipl happen befor plu , parenthes .
integ divis is a littl weird becaus it truncat , oop , right , <num> over <num> .
oop , <num> over <num> equal <num> .
that's the integ divis truncat .
convers , thi is like the int float .
and then user input , which is raw_input .
and then comment , which ar wai for you to add human readabl text to your program .
okai ?
see you next lectur .
hello , and welcom to week <num> .
i'm go to walk you through assign <num> .
spoiler alert the best thing to do is to do these befor you watch thi , right ?
so just click over there , and go ahead and do it .
if you're do it on your desktop or laptop that's great , then cut and past .
so , a spoiler alert .
but i'm go to show you how to do it becaus some of you in the forum have talk about how you're still a littl lost , and that's okai .
you're go to be lost .
it just , that's why i give you these so that you don't get too stuck .
becaus with repetit , thi all becom second natur .
and give yourself a coupl of more week you'll , you'll know everyth .
so , so , so thi is my last weather alert , so let's go take a look at assign <num> .
so here i am , assign <num> , i'm go to go click in to the autograd and write a program that us raw input to prompt a user for their name and welcom them .
and you're go to do thi , so i'm go to first do thi not in the autograd .
i'm go to do it on my desktop , and later i'll do it in the autograd .
so by now i hope you know if you're work on your desktop .
for those of you who aren't us desktop , you can just watch thi .
so i've got to write a program that us raw input .
and so raw input is a function .
i need a variabl , name equal raw_input .
if you've watch the lectur what is your name .
so basic , raw input paus a program , prompt with the what is your name prompt , and then whatev you type is move into the variabl name .
okai ?
and then i will sai , print hello , comma , name .
and that sai print the string hello , then afterward fill in that variabl name .
so thi is the first line and then the second line .
okai ?
and so that's hello name .
and so that's our littl program .
and i'm go to save thi file , file > savea .
i'm go to put it on my desktop and make a new folder call pr4e and go into that folder , and i'm go to save my file as assign <num> . py .
it's best to not us space in your assign name , just us like dash , and don't get too tricki .
i mean , your oper system often can't handl thi .
so i've got thi , it's in my home directori , that's what that littl tild mean .
desktop pr4e assign <num> . py .
and i go to termin program , or command line if you're run on window .
and then i'm go to go into my desktop becaus i'm in my home directori alreadi , with cd desktop .
then i'm go to go into pr4e and then i'm go to type the command ls .
now if you're on window you type dir .
and now i see that i've got thi file , it's the file that i just save up there .
and in window , you would actual type , assn <num> <num> . py , you don't need to type python .
but in the mac , you type python and then the follow , a s s n <num> .
so you'll notic that i said a s s and i do thi so fast .
a s s n <num> and i hit the tab kei and it complet for me automat .
and that sai load up python and then read the program instruct in that file , python a s s n <num> . py .
what's your name .
sarah .
hello sarah , okai ?
so then we ran it .
now , let's go back to the autograd .
now , if you ar just us the autograd to do your develop , you'd type in thi program .
but if you're us your desktop , the clever thing to do is just copi , copi and then come over here and then past .
past in the work code .
okai ?
and then i'll type check code , and thi is go to , the raw input here is go to prompt up , pop up a dialog box .
and the prompt is what is your name , and it tell you you're suppos to type sarah .
well , then you make a mistak , all right , sahar .
i can't type sarah becaus i type too fast .
so it's go to run , the program's go to run and now it's go to sai , mismatch , and sai , pleas correct your code and re run becaus i didn't match the desir output .
i don't have to chang my program , i just have to type the right thing .
so thi time when it ask me , i'll type sarah .
and now , hello sarah .
and my .
i get a match .
and it upgrad , it doe the grade updat on the server .
okai ?
so that's , that's pretti much it .
i mean if you realli want to , you would , you know , type name equal .
you can just do all your code right here .
what , what , i type so terribl .
what is your name ?
and again , i could run thi .
oh wait .
raw input is not defin on line <num> .
well , i miss a w , i miss a w .
so i can edit it here .
and then i can sai run it .
but then there's no output becaus thei don't have a print statement here .
and i got a littl coach here .
it sai you must us the print statement .
so even , even if your output look perfect , it sometim want to coach you on what you did .
it sai , hei , you must us the print statement to print the line of output .
thank you , virtual coach in the autograd .
and so , you don't want to do that .
okai .
so then i'll put a print .
print name .
and i'll check that .
and sarah .
and it sai sarah .
now it look like good , but it's like it want hello sarah , so now we we gotta go , hello sarah .
now the space get ad just by that .
the comma actual add a space .
i keep draggin' these thing on my screen .
hello sarah .
now the output match , it look happi .
and my grade's updat on the server .
so there you go .
kind of us both the termin and a command line to do program <num> , and then past it in the autograd or just write it in the autograd .
thi is an auto grade assign .
pleas launch the autograd from the coursera resourc list associ with thi video .
good luck , and have fun .
hello and welcom to the , a work exercis for python for informat , explor inform .
my name is dr .
charl sever , and i'm your host for thi particular work exercis .
thi materi is copyright creativ common attribut .
again , try and work these exercis yourself .
in the begin thei're intend to be easi , thei're intend to be work from the book and the other materi .
not , and thi is suppos to be us as a last resort .
but you're here , so i assum you know those rule .
i assum that you also have everyth instal .
python's instal , you know how to us your text editor , you know how to us your command line .
thi screencast will not , sort of , go through all of those .
although it will review some of them .
go back to pythonlearn . com and go through the softwar instal screencast to get to the point where you're readi to run program .
so here's our exercis .
we're go to write a program that's go to enter the hour and enter the rate and then comput pai .
it's go to prompt and read some string and convert from float point and then do some multipl , and awai we go .
so , i'm go to minim that .
i will start up my textwrangl .
and thi is the last program i wa work on .
and i'll hide those , get rid of those .
start up my termin , make it a littl smaller .
pull it down here and textwrangl .
so now i have a new document .
and so i'm go to do what i alwai do and so the first thing we've got to do is we've got to prompt for some hour .
and so i'm go to make a variabl call inp which is just sort of mnemon for some input , it's a string , it's raw input , alwai , alwai read a string , it doesn't read it out , even though thei're number , it read them as a string .
we'll have to convert them .
raw_input enter hour colon space .
and i'm just go to keep it simpl , and i'm go to print inp out .
now i have to save thi file , save as , and i'll put in python here , and i'm go to call it hour1 . py , becaus we're go to do a whole seri of these thing .
save that .
now you'll notic that as soon as it save as a . py then it doe syntax color .
thank you veri much .
so then i go into my command window , cd desktop , i have everyth in thi folder py4inf on my desktop , right there , that folder .
cd then i do a ls .
again , dir for unix , and then , here we go .
so i sai python h o , hour1 . py again , and i , i us tab a lot , becaus i just don't like type .
so let's run it .
so i enter some hour , <num> , and it print out <num> .
and just to show you it's just a string , i'll just put some crap in there and out come exactli as you'd expect , crap .
so it's not realli .
and let's do thi .
let's just sai , print type of inp just to sort of prove ourselv .
it's a string , right ?
it is a string .
it is not an integ .
so how do we convert from a string to an integ ?
aah , float .
we us the built in function float .
and now i'm go to call my variabl hour to be quit mnemon and i'll call the float convers and then i'll print hour and print the type of hour .
now you might sai , hei chuck , you know , you're a pretti smart gui .
thi is onli like five line of code .
how come you're do thi slowli ?
how come you take step ?
that's what we call inter develop .
so i'm just be realli safe here .
i'll get to the whole program in a bit .
i mean , that's thi dot , dot , dot stuff down here .
there'll be more .
but i'm , i'm just sort of plai with it on bit at a time and , and make sure that i know what's go on .
and even , even in , i don't , i'm do thi a littl bit more exagger here , but when i write program , i usual start with hello world and then add to it .
it's , it's sort of the , you start with sort of a nice blank canva , and put some basic stuff on the back of it .
okai .
so , so now i'm go to read some input .
i'm go to , i have to prove that thi is a string .
i'm go to convert the string to a float point , put in a differ number .
then i'll print out that thing and the type of it just to sort be sure that it work .
so i have python hour1 . py and i go <num> , <num> , <num> .
and it turn out that now i , i've convert it to <num> , <num> , <num> , <num> and i've got myself a float .
and of cours now , if i call , if i put junk in there , it's go to get us a traceback error , becaus it just cannot convert dskj to a float .
but we're not go to , we're go to fix that later .
okai ?
so now i'm go to start delet some of thi stuff , becaus that's pretti clear that that's work .
okai ?
so now , i've got to prompt for rate .
well , good programm don't type if thei don't have to .
so i'm just go to cut and past thi and then i'm go to chang thi to rate .
so raw_input enter rate .
and then that will be a string of cours , then i will chang that to a float and i'm go to put that into rate .
and just to be sure , i'm go to print out rate , hour .
now at thi point , thei should be float point number , so let's run that and we'll start with a simpl test , <num> hour , <num> dollar an hour .
there we go , thei've been convert to float , just peachi fine .
so i'm go to creat a variabl call pai , rate time hour and we'll print out pai .
and i will just get rid of thi on with a comment .
and did you notic how i us a comment , a pound sign , there , becaus , i'll , i'm , i'm not delet that .
i'll keep that in case someth goe wrong .
i don't think it's go to , but here we go .
whoa , syntax error .
invalid syntax , pai rate time hour .
and oh , i forgot the equal sign .
need to make that an assign statement .
let's try thi again .
python hour1 , <num> , <num> , <num> .
there we go .
and let me go and check .
let's run the data .
<num> and <num> .
i'll run my program again .
<num> , <num> . <num> an hour and <num> . <num> .
is my sampl exampl right ?
ye it is .
so there we go .
so here you have it .
hour and rate equal pai .
hello , and welcom to chapter three of python for informat .
chapter on , chapter two , now we're go to get to someth kind of programmi .
i mean , assign statement and reserv word , that just kind of gurgl .
now we're go to start see composit .
we're go to start see the condit execut .
get us start , sort of , see the power of comput , where you're start to make decis .
so , as alwai , thi lectur and audio , video , and slide ar also avail , ar copyright , creativ common attribut .
so , condit step ar step that mai or mai not be execut .
so here's , here's a bit of code .
so , and , and i draw these pictur .
i won't draw too mani of these pictur on the left hand side .
if you've taken a program class , you mai have seen these .
thei're sometim call flow chart .
sometim peopl realli think these ar import .
i don't think thei're all that import for understand .
the , the python code is here on the right hand side , and thi pictur's on the left hand side .
and , and the realiti is is that thi mai , initi , make more sens , cognit , to you , than thi .
but thi part on the right hand side is what's import .
i like to call these like road map , so you can sort of trace where the code is go by drive down a littl road .
that's kind of a , someth that you do onc or twice and then , pretti soon , you'll start read the code .
so i'm go to start on the right hand side here , and just walk through the code .
rememb , code oper in sequenc .
well , there is a if , which is a special reserv word .
it's on of those thing that you can't , you can't name a variabl if .
and it is our indic that to python , that the next statement that we're go to do mai or mai not be execut , if .
and the thing that come on the same line as the if , up to and includ the , the littl colon , is a question .
thi is a question .
you're ask a question .
so an assign statement is move a valu into a variabl .
and a if statement is ask a question .
in thi case , we're ask a question about a variabl .
so alwai think , when you're , sort of , here , that thi is a question to be ask .
and , you'll notic when i'm do the same thing over here , i put a question mark there .
is x less than <num> ?
ye or no ?
it's a question that ha a ye or no .
and so , the wai thi work is , thi statement that's indent , after the if , is either execut or not execut base on the result of that question .
so the wai to sort of read thi in english is set x to <num> .
if x is less than <num> , which it is becaus x is <num> , then we're go to execut thi .
so print smaller come out .
and then we come back out and we continu and sai , oh , okai , now i have anoth if statement , and then a bit of , a block of indent code .
if x is less than <num> , that's the question .
the answer to that is no , and so it doe not run that line , and so it run fini .
so the printout of thi program is smaller , follow by fini .
what happen is , thi line never execut becaus the answer to thi question is fals .
okai ?
so , let's go through that a littl faster .
set x to five .
if x is less than <num> , print smaller .
then , if x is greater than <num> , which it's not , skip that , and then print fini .
that's the short version of it , okai ?
condit step .
thi step is condit , thi step is condit .
thei mai or mai not be execut base on the result of the question .
now , if we're think of thi as like a gp road map or someth , we can look at thi right hand side .
so , the cpu come roar down here , x equal <num> , okai , i'll run that .
then it's face with a choic .
do , is x less than <num> , ye or no ?
if it is ye , and it is , i will go thi wai .
if it wa no , i would go that wai .
so if it's ye , i go here and i run thi littl thing and i print smaller , great .
and i follow the littl road .
and now the road take me to here .
and it's ask anoth question .
is x greater than <num> ?
thi time , the answer is no , so i'd come down here , right ?
and so , thi bit of code is never execut .
now , thi is a veri simpl exampl , but you get the basic idea .
okai ?
so that's condit execut .
now there's a number of condit oper that we want to us , just like we had multipl , divis .
some of them ar pretti intuit , and the other , you just kind of have to memor , like less than and greater than make a lot of sens .
the on that probabl , that , easi , like less than or equal to , or greater than or equal to , those kind of make sens , too .
thei're less than or equal to .
just becaus we don't have a less than or equal to sign on a symbol or a greater than or equal sign , which we would us in mathemat .
equal , ask the question of whether someth is equal to someth els or not , is doubl equal .
and that's becaus we're alreadi us singl equal as assign .
so when we sai x equal <num> , that is an assign and stick a valu into x .
thi is the question .
is x equal to ?
if i wa build a languag , i would make it be equal question mark , or someth like that .
i'd be like , huh , is it equal ?
kind of a question mark .
but that's not what we do .
i didn't invent thi , so we're , doubl equal is the question , is someth equal to anoth .
singl equal chang someth , x equal five chang x .
okai , and then , not equal , exclam is commonli us to mean not in comput context , so if someth is not equal to someth , it is exclam equal .
here ar some exampl .
just kind of run through them .
thei're all , thei all turn out to be true , becaus i set x to <num> .
if x equal <num> , print equal <num> .
come out here , if x is greater than <num> , which is true , print greater than <num> .
if x greater than or equal to <num> , yep .
if x less than <num> , print less than <num> .
now here's a , there ar two , sort of , syntax to , to the if statement .
on is where the if statement is down here on a separ line and it's indent , and the other is where there's a singl line and it's right on the same line , if x less than <num> , print less than <num> .
so thi is true , so thi whole thing execut .
then it continu down , if x less than or equal to <num> ?
yep , print less than or equal <num> .
if x is not equal to <num> , which is true , cuz it's <num> , then not equal to <num> .
so , all those will turn out to be true , and all those will execut .
and so , the , the tricki bit , here , is , you know , just know , see thi syntax for an if statement , where it's all on line , and thi syntax , where you end the first line with a colon and then indent the second line .
thi , you can onli do on line .
we will soon see that you can put more than on line in the indent block .
okai .
here we have more than on int line in the indent block , these ar call on wai decis .
and so , we sai x equal <num> , we print out befor <num> , so that print out .
if x equal <num> , rememb the doubl equal is the question mark version of equal , singl equal assign , it sai ye .
so we indent , and the convent is to indent four space , although it doesn't realli matter as long as you're consist .
then it's go to run all three of those .
is <num> , still <num> , third <num> , these line all come out .
and then it come out and print , and the de indent , the fact that thi print ha been move to line up with the if , that's what indic that thi littl block of condit execut code is finish .
so then print out afterward <num> , come down some more , befor <num> , then it ask anoth question , if x is equal to <num> , again , that's the question mark version of it .
and if thi is fals , now , becaus x happen to be <num> , so the answer to thi express , the logic express , is fals .
then it skip all of the indent bit , so none of thi execut .
so , sinc it's fals , it skip all of the indent bit , but then it , thi print line up , and so then it pick back up with afterward <num> .
so we call thi a on wai decis , where you have the question , and then you have a coupl of thing that you're go to do on thi true , true thing .
or , if it turn out that you're fals , you're go to skip all those thing .
so , python is actual on of the few languag that us indent as syntact signific .
we like to indent code to , for if , and in a moment , we'll see you learn about loop .
we like to indent code as a wai to make sens of stuff , it make it easier to read .
you know , if thi thing's insid , and so , it , it's realli quit nice .
and then , we , sort of , us it as a match , to help us cognit understand what's insid of a program .
but in python , it's realli , realli import , and it's almost , it's , it's , you have to think of , like , when you ar move in , you mean someth , and when you move back out , you mean someth .
so you can increas the indent , which you do after , like , an if statement , or ani other statement that end in a colon .
you increas the indent , and then when you're done , you decreas the indent .
you maintain the indent , sort of , for sequenti code .
now blank line and comment ar ignor .
so you can have a blank line and it , it , the indent just goe right past it and the comment don't affect it .
and so , while we're here , we'll interrupt us for a recommend .
in your text editor , notepad plu or text edit or textwrangl , or whatev you're us , it mai be set , when you hit the tab kei , to move in four space .
sometim you also might move in four space by hit space bar four time .
python will see that as differ .
and it is possibl in all of these word processor to sai , hei , don't actual put tab in my document , when i hit the tab , put in four space .
then , whether you're hit the space bar or hit the tab , at least you ar put the same thing into your document and don't , not freak python out .
if you don't , you mai get indent error .
indent error ar syntax error to python .
and what's realli frustrat is , if you , it look good to you in your text editor , you have an if , and the block goe in , and come back out , but on of them is four space and on of them is a tab , then python will yell at you .
and thi is realli frustrat , when python yell at you about that .
so what i'd like you to do is go into your text editor , whatev it is , into the properti or the set .
and here is , you know , your , your mai be differ , but here is where you set thi .
auto expand tab , that is on the mac in textwrangl , and then , in notepad plu plu , there is replac tab as space , and that's underneath prefer .
so you have to find it .
stop right now , and go set thi so you're not go to make yourself crazi .
okai , so , thi is kind of a busi slide , but it give you the sens that you have to explicitli think about indent and de indent .
okai ?
and so i'm just go to walk through thi .
so , when you have two line line up that mean thei're go to run sequenti .
if you see an if , or later here , we'll see a for .
we haven't talk about for yet , but it's , it's like if .
so , the fact that we go from thi second line to thi third line and move the indent in , we're actual creat a block that ha to do with thi if , and it , you can also kind of tell these , the if and the for end in a colon charact .
now , we could pull thi print back out , but we want it to be part of the if , so we maintain the indent .
and then we're done with the if by pull out .
so we line the p with the i , and that mean thi is outsid of the if .
thi for , which we haven't learn about for yet , for is anoth statement that end in a colon , and afterward you have to indent .
then you maintain the indent .
here's an if .
but now we have an if , and we're alreadi in , but that end in a colon , so we go in farther .
and now thi is the block .
now , we come back out , and we line up with that if , right there , okai ?
and now , at the end of thi , thi indent , thi x here come all the wai back out , so it line up .
the rest of these ar kind of weird in that comment don't matter , blank line don't matter .
and so , it just is , sort of , you have to get , mental get us to the notion that these don't count .
thei can realli cognit mess you up .
so these don't count .
and now , if i look through it , without , with the comment hidden , it start in column on .
ignor , ignor , goe in , stai in , ignor , ignor , ignor , come out .
so that's , it all make sens .
those comment and blank line ar just , kind of , confus .
so , increas and decreas indent ha mean in python .
we'll learn more about thi in a bit .
our program won't get thi complex right awai , but it's import to think , these indent aren't just pretti ; thei actual ar commun someth to python .
and what thei're commun is , basic , what's in a block .
and it shouldn't take you veri long , when you start look at python , to sort of visual these block .
so , here , here's a big block .
thi block here , that's got these three thing .
and then , thi is a block as well , and you can kind of sai , well , here's an if statement .
and then these ar the two statement that ar part of that if statement .
so mental , you kind of make these block pictur .
so here's anoth block .
thi is that for loop .
thi part's the indent part , but then there's a block insid of the block .
so you gotta kind of start see that as well .
so thi is a block that ha to do with thi green block is the , the on that ha to do with the if .
and then there's a block here , and then thi is a great big block becaus thi is where it final de indent .
so , don't worri about it yet , but at some point you're just go to start see thi indent and de indent as defin block of code for variou purpos .
now we don't have all the purpos yet , but we'll get there .
so , we saw in that previou thing on block within a block .
and , and we're go to do that .
we can have if , we can have loop that get indent , but then we can indent even more .
we call that nest , where there's an indent area that's in an area that's alreadi indent .
so here's a nest decis .
and it might be easier to start on thi side , where i'm go to have a first choic .
is x greater than <num> , ye or no , and if it's ye , i'll do some work , and then i'm go to ask anoth question , and if that's ye , then i'm go to do thi , then i'm go to come all the wai back in .
and the wai we encod thi in python is , x equal <num> , if x is greater than <num> , it's true , so we continu work in the indent .
and now we sai , oh , if x is less than <num> , which is still true , so we go in farther , and we do thi , and now we come out .
we don't come out to here , we actual keep go all the wai to here , so that end both block .
and so if you sort of think about thi , again thi is where i want you to start see what's in a block of code and what's not in a block of code , and how the indent sort of , like , put a boundari on the block of code .
and so , the first thing you should see is , sort of , like , that purpl part , the , the x less than <num> , print , that's kind of a box .
and you can see the box on the , on the sort of flow diagram as well .
the box ar there .
the box on the flow diagram ar place where there's on entranc and on exit .
and then there's also , sort of , the larger box , right ?
there's thi if box that includ the smaller box .
so , the , there's thi nest , which is box within box , or indent area within indent area .
now that wa a , what we call a on wai decis , where you're do if , and thi code either run or it doesn't run .
it is extrem common to want to basic sai , look , i'm go to do on of two thing .
i'm go to ask a question , if the question is true , i'm go to do on thing .
if the question's fals , i'm go to do anoth thing .
so that's what we have shown here .
we sai , is x equal <num> , is x equal to question mark ?
if it's ye , we're go to go here .
if it's no , we're go to go here .
we , re go to execut on or the other , and then we're go to continu .
so we're realli at a fork in the road here , right ?
we're , we're at a fork in the road , go to make a choic , and on or the other , but never both , right ?
so , we're go to do on thing , or we're go to do anoth thing .
we're go to do on of the two , and depend on what the question that we ask , the question that we ask is , which on that we're go to do .
so here's a littl bit of code .
x equal <num> , is x greater than <num> , the answer is ye .
then we come out and hit thi els and we automat skip , right , becaus we're onli go to do on of the two .
and here's the pictur , x equal <num> .
is x equal to ye ?
print , done .
which mean we'll never do both thi and that , never do both , both side .
we're go to do on or the other of the side .
and just sort of go with the box , that is our box , oop , go back , go back .
thi is our box , right ?
it's sort of the indent follow by the final indent .
the els is realli kind of part of it .
and then we can draw the pictur here .
it ha on entri and on exit .
okai .
so we have on wai if , and we have two wai if , and now we have multi wai if , okai ?
so , here is a multi wai if , and it introduc a new reserv word , elif , which is a combin of els and if .
and thi on , probabl , is just as easi to talk about the pictur here .
the first question is ask , there's still go to onli be on , there's onli go to be on , on and onli on of these three choic ar go to run .
onc it's run on , then it's done , okai ?
so the , the wai to think about thi , if x is less than <num> , we're go to run thi on , and then we're go to kind of flush all the wai out to the bottom .
if x is not less than <num> , and it's less than <num> , we're go to run thi on , then flush out the bottom .
and if x is not less than <num> , and x is not less than <num> , we're go to run thi on , and flush out the bottom .
so , on of these three , on , two , three , on of those three is go to run .
and it's go to run base on the question that ar be ask .
the question do get ask in an order , and the order doe matter , okai ?
so that is a multi wai if .
if , els if , els .
so thi is kind of like an otherwis .
the els is like an otherwis , you know , on wai or anoth , we're go to run someth , and if none of these first two have run , we will run thi on .
we call it a multi wai if , okai ?
so , here's an exampl of our multi wai if .
that , if we sai x equal <num> , x equal <num> .
is it less than <num> ?
ye , it is .
so we run small , print small , and then we flush out the bottom .
if we switch , instead , x to <num> , x is <num> .
is it less than <num> ?
no , it is not less than <num> .
is it less than <num> ?
well , <num> is less than <num> .
so the answer is ye , so we print medium , then we flush out the bottom .
on and onli on ar go to execut .
now , in thi case , we got x is <num> .
and so we come through here .
is it less than <num> ?
no , it is not .
is it less than <num> ?
no , it is not .
so we're go to do thi on , and then flush out the bottom .
if we go here , it's fals , fals , go here , all els be equal , we run that on .
so thi on doesn't run and that on doesn't run , right ?
becaus these ar like gatewai .
if it were true , it would run it .
but it's fals , so we're go to skip it .
thi on , it's fals , so we're go to skip it .
but then we hit the els , that's like a catch all .
and then if none of these were true , then it will run the els .
ani question ?
okai .
well , i'm go to ask you a question , in a second .
okai , so just a coupl of thing that probabl you're wonder about .
you don't actual need an els .
you can have a multi wai , x equal <num> , if x is less than <num> , there's no els here .
you'll notic that thi print just come back .
and so thi wai , it could , if both of these ar fals , it could skip them both and just run right through here , and there's no els claus , okai ?
so , in thi case , if thi on's go to , the wai thi on's go to run is , x equal <num> if x is less than <num> , it's , it's not .
and it skip to here .
els if x is less than <num> , which it is , it will run that on and come here .
but , for a differ valu of x , like <num> , boop boop .
if x wa <num> , or <num> , thi would be fals .
it would skip it .
thi would , elif , would still be fals , and it would skip it , and the onli thing it would print out would be , all done .
okai ?
okai , you can also have mani elif .
so , better chang to green .
it check thi on , if it's true , it run the first on .
if it's fals , it check thi on .
if that's true , it run thi on , and then it skip , right ?
and so , so the wai to think about thi is , is , it just goe through and check thi on fals , thi on fals , fals , fals , oh , i final found on .
and now i'm done .
it still is go to do on and onli on of these .
thi on ha an els , so that sooner or later , it is go to do on .
and it onli will do the els if all of these ar fals .
all have to be fals .
then it will , actual , come and hit the els claus .
it's great , becaus there ar lot of situat where you're like , oh , is it befor eight in the morn ?
or is it between eight and noon ?
or is it between noon and five ?
or after five ?
after midnight ?
i don't know .
okai , so , here , come up , is a question .
and , you , there's two puzzl and i'm go to stop so you can look at them for a while .
and i want you to figur out , in both side of thi , which of the line will not execut , regardless of the valu for x .
so in both side , there is a line that won't execut , regardless of the valu for x .
which will never print ?
there's two problem , problem a and problem b .
okai , i'll have some coffe while you think .
okai , hopefulli you paus it so that you could actual think for a bit .
so , so i'm go to guess you probabl got the first on right , that's pretti straightforward .
i mean , actual , you're in great shape if you got both of them right .
if you got ani of them right , you're in great shape becaus that mean you're start to get it .
start to like , oh , i'm see , kind of , thi flow pictur , there's a pictur .
i look at these charact that seemingli look like gibberish , and a pictur arriv .
or a pattern of access execut aris .
that's what we want to see .
so , the in the first on , which will never print ?
well , we're look for kind of a valu for x which will be defect .
so if x is less than <num> , we're go to do thi .
els , if x is greater than or equal to <num> , we'll do thi , els we'll do that .
well , here's the problem with thi on .
for all valu of x , it is , is either go , x is less than <num> is either go to be true or greater than equal to <num> .
greater than or equal to be , pah , for x to be greater than or equal to <num> is go to be true .
so it's go to run thi on , or it's go to run that on .
so for big number , number abov <num> , it's go to run thi on ; below <num> , it's go to run that on .
so thi on is never go to run , okai ?
becaus the , on of the first two is go to be true , and so the third els situat is not go to run .
hope you got that right .
okai , so let's take a look at the next on , okai ?
so the question is , you know , if x is less than <num> , do thi , if x is less <num> , do that , and if x is less than <num> , do thi , and otherwis do that .
well , the on that will never execut is thi on .
and , x equal <num> , no , x equal <num> is a bad on , x equal <num> is the on that will , sort of , caus it to behav badli .
and so , if x is <num> , thi is fals .
if x is less than <num> , thi is true , and then it's done .
so the problem is , thi is the on that will never execut , becaus if a valu is less than <num> , it's also less than <num> , so thi will be true .
so for a valu like <num> , which happen to be less than <num> , which you would think would caus that line to execut , doe not .
thi on execut becaus it's check first .
now , if we just move thi code , took thi code and we move it down here , then it would make more sens , okai ?
oop .
if we move it down there , it would make more sens .
but basic , the answer to these is , chang color , thi on won't execut , and thi on will never execut for ani valu , so there's the answer .
okai , so we're almost done with condit .
okai , so we're almost done with condit .
i want to show you on more kind of condit .
it's a littl bit differ .
it's not a bit of code structur that you make , it is , it is deal with the fact that some thing mai blow up .
like , if you read a number from a user and you try to convert it to a float point number , as you mai have alreadi done in some of your homework , it can blow up .
you know it's go to blow up , but you don't exactli want it to kill your program .
so , the concept of try and except ar , hei , thi is a danger thing .
i know it might blow up .
i know exactli what it might blow up , but i don't want to die i don't want to stop my program when it blow up .
i want to continu .
and that's the purpos of the except block .
so , here's a littl bit of code .
and , you know , it's , we've done thi code befor .
thi is code that's kind of similar to , like your rate and pai homework , where you read a string us raw input , you convert it us float , but then if you type in fred , the thing blow up .
so we're kind of simul that right here .
so here we have a variabl astr call hello bob , and then we try to turn it into an integ .
and then we're go to print that out , and then we have anoth string call on , and that ha the letter <num> , <num> , <num> .
we convert that to an integ , and then we print that on out .
the problem is , is that when thi run , thi is go to fail .
it's go to fail with thi traceback , okai ?
and the problem is , is when the traceback happen , the program stop execut .
the traceback is python's wai of ask you , hei , thi would be bad , i don't know what to do , i'm stop .
so that mean that the rest of your program is gone , right ?
it , the fact that we had stuff down here doesn't matter .
thi line di with the traceback .
it stop .
it doesn't , like , give you a traceback and then keep go .
it give you a traceback , and that's the end .
now thi might be someth , instead of just the string , hello bob , which is insan .
data might have come from a raw input , where the user wa type , and you sai , give me a number , and thei type someth that's not a number , and thi would blow up .
it's like , hei , i know it's go to blow up .
the problem with thi is that you don't , oop , erp , clear the thing .
oh and now we have to start it on fire again .
okai , it's on fire .
the problem is , is that in a sens , thi program is you .
if you recal , we have you as the , type these command into these script , feed the central process unit , answer the question what next ?
so you should take it a littl person when your program get a traceback .
becaus that mean you , in the form of your program , have been vapor .
and you're not present to give ani more instruct .
it stop .
it stop dead in it track .
you ar gone .
so , we want to make sure we control thi behavior .
we know it might blow up , and we want to captur the situat where it doe , and execut altern code .
okai .
so here it goe .
it's a bit of syntax .
i mention that it us the try and except keyword .
these ar reserv word in python .
and then it's a littl indent block .
so , astr equal hello bob , great .
try mean , we're about to do someth danger , let's take out some insur polici on it .
and that is , we're go to convert thi to an integ .
take astr , convert it to an integ , put it in istr .
if that work , great , we'll just continu on , and ignor thi except .
if it blow up , we're go to jump into the except block , and then we'll have altern substitut code .
in thi case , i'm go to set the variabl to neg <num> as an indic .
then i'll print it out , and i'll do it again .
try thi code , and awai we go .
so , when thi run , we know exactli how it's go to run .
it , whoa , woop , come back .
we'll set thi string , the try take out the insur , thi blow up , so it run down to here and run thi part , and then it'll print first minu <num> .
and it set the string to <num> , <num> , <num> , not <num> , but <num> , <num> , <num> as a string .
it take out an insur polici .
thi time it work , and that put istr is go to be <num> , so we don't run the accept code , and so out come the second <num> , <num> , <num> , okai ?
so the try is , take out insur on thi littl bit of code , and if it fail , run thi altern code .
if not , skip the altern code .
so it's kind of condit .
if you put multipl line in the block between the try and the except , it run until on di .
so it doesn't come back , okai ?
it's not take insur out on , separ , on all three statement .
it's like , here's a block of stuff , and if anyth blow up , stop .
and the thing that run do run .
so if , thi is realli kind of bad code , becaus you realli don't want the print in here .
it's actual a good idea on the try except to have as littl in the try block as you possibl can , so you're real clear on what's go to fail .
but , so here we come in , shh , it's bob , so it's go to fail .
we run thi .
that run successfulli .
thi blow up , so it quit and jump into the except block and continu .
the point is , is that thi code never execut , never execut .
the other point is , thi code doe execut .
just becaus thi blew up , thi is alreadi execut , it might have done someth other , more complex than print hello , okai ?
so , so there you go .
so , if we look at thi kind of in a pictur , we , we set thi through the try block , it run , it run .
and the , the try except kind of ha thi escap hatch that sai , if there is a explos somehow , then it run thi altern code and then it come out and finish , okai ?
and , again , thi , it doesn't go back and finish the block , and it doesn't undo the work that is done by that .
so it doesn't un execut it .
if it execut and work , it just keep on go , then it blow up , and then sort of flush it wai out , okai ?
so here's an exampl of how you might do thi in a run program , like the program that you're about to be assign , where you're suppos to check for user input have error .
so , here is a littl convers of a number , and and so we're sai , you know , enter a number , and we're put a string into rawstr .
it's a string , and and so , we don't know .
and here's where we're go to convert it into an integ , and we're just not sure if it's go to work or not .
so , we know how int work .
it either convert it or it blow up .
so we know it's go to do that , we just don't know what the user's go to type , we don't know .
so we have to take out insur on it .
so thi run , and then we do a try , and then we try to convert it , and if it work , it's great , and if it fail , it run thi and set it to neg <num> .
and afterward , we either have the number or neg <num> .
and so , if the person enter <num> , it sai nice work .
well , let's show you where it run .
if the person sai <num> , it run through here , get the string <num> , convert that to an integ , skip here , and then sai , nice work , and that's how it run .
if , on the other hand , thei type forti two , the word , thi get to be the string forti two .
it run here , thi blow up .
so it come and run thi part here .
and then it sai , if ival is greater than <num> , which is not true , so it run thi part and sai not a number .
so thi is our wai of compens for user input that might have error in it , error that we're anticip , right ?
you'd , you'd rather at least put up some kind of a messag , rather than just have a traceback , if you're write code for somebodi els .
it just kind of is not veri classi .
so , the classic program to do thi is a time and a half for overtim pai .
so you get some pai rate like <num> an hour for your first <num> hour , and then you get <num> hour , for ani hour abov it .
so you have to sort of sai , oh , okai , if thi end up be , thi end up be some kind of a thing , where , let me draw that pictur a littl better .
hour greater than <num> , you're go to do on thing , and if hour ar less than <num> , you're go to do anoth thing .
so you have two payout calcul .
if the hour ar greater than <num> , then you're go to do a overtim calcul , which is kind of like , <num> time the regular rate .
and then , the number of excess hour , like <num> overtim hour time the reg , rate time on and a half .
so thi is kind of the calcul that happen if the hour ar greater than <num> .
and then , if the hour ar less than <num> , it's just pai equal rate time hour .
so it , you're go to do on of two calcul , depend on how it work .
so that's on of the program problem for thi chapter .
that's a classic .
it's the classic if , then , els .
you can actual do it with an if , then if you're tricki .
there's a lot of wai to do thi , so pick a , pick on and do it .
now the next thing i want you to do is , i want you to take that same program , do it again in anoth , anoth assign , or anoth problem in the chapter , and that is have some kind of a non numer input , and have it blow up .
so if thei type , you know , someth like nine , put out an error .
or , if thei type someth here , put out an error .
now , don't write a loop .
no loop .
thi is on execut of the program , and thi is anoth execut of the program .
later , we can write loop .
we haven't even talk about loop .
so thi is run it twice .
all i want you to do is exit .
so take a look in the book as to how to just get out .
so it , it's , it , i don't want you to try to sai , i'm go to prompt for these number until i get a good on , we'll do that later .
i just want you to deal with the fact that you read a thing , you us the try to convert it to a float and see if it work .
and if you don't , you just quit .
don't , don't , don't try to be tricki and repeatedli prompt .
so don't repeatedli prompt .
on prompt , and then quit , okai ?
so , thi is contint , condit execut , if , if then els , and then i ad a littl bit with the try and except , as well .
and the try and except is realli a limit kind of a problem .
it realli is to compens for error that you anticip ar go to happen , and you can imagin what you want to do as a replac for what those error ar , okai ?
see you next lectur .
hello , and welcom to a work exercis for python for informat explor inform .
i am your host , charl sever , and thi materi is copyright creativ common attribut .
so again , you're suppos to try to work these exercis yourself befor you attempt them .
just , these ar good crutch to make sure that you understand , but make sure you give it a try yourself .
and if you don't understand how to basic creat and edit program , you should go back to www . pythonlearn . com , and work through some of the instal instruct for python and your text editor .
so here's our exercis , we're go to do the classic rate time pai with overtim .
and so the idea is that , oop , you have , pai time rate and for <num> hour you get the basic rate and if you work abov it , you get on and a half time that .
so if it's <num> an hour , you get <num> an hour for the hour abov <num> .
so let's go ahead and start textwrangl , and start a command line .
i'm go to close that , close our drawer , make it smaller .
and i'm go to , i'm go to pull my , go into the desktop , go to py4inf , see i've got a few file here .
and in thi case , i am go to open hour1 . py .
and i'm go to immedi save it as hour2 . py .
i mean , why rewrit all that stuff we did befor ?
so thi i guess i can get rid of thi on now .
so it's hour2 . py .
and so now we have , the , i'll keep that in .
we have the rate and the hour .
i'll put that print statement back in .
and the problem is i can't i can't just do pai equal rate time hour , so i need an if then els .
so let's do an if .
if the hour is less than <num> .
and we can sai , pai equal rate time hour , that's fine .
so now let's come up .
i'll make that four space .
there we go .
i could write anoth statement that sai like thi .
if , actual it should be less than or equal to <num> .
if pai is greater than <num> , we need a differ calcul .
and , and that on is pai , is , there's a coupl of wai to do thi , but i'm go to do it thi wai .
rate time <num> , which mean those ar the , those ar the hour .
that's your basic rate .
then i'm go to add rate time <num> , that's on and a half time the rate , time , and then the hour abov <num> , which is hour minu <num> .
so thi bit here is the hour abov <num> .
now oper preced would sai that these multipl ar done befor thi subtract .
and that might not work so well , so let's go ahead and run thi and see what happen , okai ?
so we got pai is rate time hour , and pai is equal to rate time <num> time hour minu <num> .
let's go ahead and run thi .
i got python , hour .
let's do <num> hour and <num> , that's look good .
so , that is , we have , you know , and that's run through thi bit of code right here .
and let's do exactli <num> hour , and that's look good .
so let's do <num> hour becaus we can calcul that in our head , that's <num> hour extra .
and then a rate of <num> should be <num> .
that doesn't seem right , so <num> time <num> , what's wrong here ?
<num> time <num> ?
hour is less than <num> .
now i'm confus .
let's run thi , well , oop .
what did i do here ?
pai is greater than <num> , that doe not seem right .
did i save thi file ?
i'm crazi .
<num> hour , <num> an hour , oh , okai , i must not have save the file , okai .
so , pai is not defin on line eight .
oop , i wa type too fast .
that need to be hour greater than <num> .
okai .
so that's better , so now we have hour less than <num> and hour greater than <num> .
so let's run that on again .
<num> hour at <num> an hour .
<num> hour at <num> an hour .
that'd be like <num> someth , thi doe not look like the right number .
we , and so we got i will , i will just take thi print back out , print of rate and hour , save that .
let's run it again .
<num> hour , <num> per hour , <num> .
that doe not look right .
let's take a look at thi .
rate time <num> , that's pretti obviou , it'd be <num> .
rate time on and a half , that'd be <num> , time number of hour minu <num> .
oh , so thi is an oper preced problem .
so , if you recal , multipl happen befor addit , and so python is go to do thi calcul first .
thi is the actual calcul , it's multipli the rate time on and a half , time the number of hour , and then it's subtract <num> .
thi end up be a rather larg number , and that's how our calcul is wrong .
that is not how we meant to do thi .
oop , so let's put parenthes in , becaus we want to subtract <num> from the hour befor we do the multipl .
we want thi to happen first .
we want the hour to subtract the <num> so we'll end up with <num> hour and then multipli that by the rate .
so let me save that .
and run it .
<num> hour , <num> an hour .
<num> .
much better , much better .
that look pretti much better .
okai , so that's , so we're kind of done with that .
we had that littl mistak there , of the parenthes not work .
and the other thing is , is that the much better wai to write thi is just put an els here .
all right ?
so we just sai els .
and so now , we have an if then els .
if it's less than <num> , less than or equal to <num> , we do thi .
if it's greater than <num> , we do that .
and then we do print pai .
so let's save that on .
so <num> hour , <num> an hour , <num> .
so thi if then els formul is a much better wai to do thi particular problem .
welcom to our work exercis .
thi is dr .
charl sever and work exercis from python for informat .
thi materi is copyright creativ common attribut <num> .
and if you need basic guidanc on how to instal python or us your text editor in gener , or how to us the command line , stuff that we'll be us in thi exercis , go back to pythonlearn . com and work through the introductori materi .
so here's our exercis .
we're suppos to rewrit our pai program and we're go to us try and except in thi situat so that we can handl non numer input gracefulli .
and we're suppos to print out an error if there's ani non numer input and otherwis print out the right thing .
so let's get start .
let's go ahead and start textwrangl and start termin program and make it a littl smaller , a littl bit to the bottom .
make thi a littl smaller , get rid of these .
so i'm go to start with a program that i've alreadi got written .
and so i'll open the last on i work with , which is hour2 , and i'm go to save thi quickli as hour3 .
we programm do thi all the time .
i mean , why wast time type if i just got done type it ?
there we go .
and that's why these exercis build on it , so you get us to thi notion of just kind of hack code that you had befor .
okai , so i'll put the print of rate and hour back in .
thi part from here down is pretti safe .
so i'll go into my desktop , go into python for informat and sai python hour3 and i'll sai , you know , <num> , <num> , super duper , and i sai , gluh gluh , crash .
so where is it blow up ?
well , it's blow up on the float .
so the float is the , the danger thing and thi is , thi float is the danger thing too , right ?
and so , thi is where it's go to blow up and now , becaus of thi , the rest of the program hasn't run and thi is exactli the situat where you us a try and except for .
okai , so let do try and we're go to just , we're go to us a sledg hammer on thi on .
we're go to put all four of these statement in the try block , but onli two of the statement ar in some danger and in a second , i'll show you what can go wrong with thi approach , but for now we're in the begin .
e x c e p t colon , and thi is where we put our error messag , where we go print and what ar we suppos to print ?
a let's just kind of steal that error .
here , pleas enter numer input .
so i just cut and past that .
so now we've taken insur out and if everyth goe well , thi except is ignor .
if anyth goe wrong , and realli it's go to be the float , on of the two float ar go to go wrong .
awai it goe .
so let's go ahead and run thi .
make thi a littl bigger and i will save it .
okai .
python hour3 .
let's do it right first .
look good .
now let's do it wrong .
now i type in a bad number and it said error , pleas enter numer input , but then it blew up .
traceback to line <num> .
thi is line <num> right here .
oop , well , that's becaus i didn't tell it to do , i didn't tell it to stop .
it just kept on go , right ?
and so there's a coupl wai we can solv thi .
we could solv it cleanli but i'm just go to be crude at thi point .
now i'll put all thi stuff in the except becaus that wai if it di , it's go to run thi and then the program's go to be done .
okai ?
and if it succe , it's go to fall through and it's onli go to do thi code if that other code work .
and i will show you in a moment the fallaci and why thi isn't the best wai , but thi is proven effect , right ?
we're earli on , so all we have to do is find a solut .
in a bit , we'll talk about what the better solut is .
so here we go , python hour3 .
so we type fred .
kabloom , it di .
so it di on thi line right here and then it transfer to the except and ran thi and the program wa over .
and if we give a good on and then someth bad , it , it , thi line di , and then it continu on .
so let me show you a coupl of fallaci or some mistak in thi .
so watch thi .
i'm go to make a mistak here .
print i'll sai print r comma h .
so i'll print r comma h .
so i'll type python hour <num> .
<num> .
error , pleas enter numer input .
so what in the heck wa happen ?
so like , it is numer input .
where did it die ?
so what , i'll tell you what , i'll just show you what happen here and we won't worri too much about thi .
it came into the try .
it did thi .
the <num> is good .
so that work .
the rate is good .
so that work .
what work wa r is not defin .
but it turn out that thi is anoth error .
it's just a differ error .
it's not the same as thi on and we just didn't type it right and so it jump to the except .
doesn't do ani of thi code but it jump to the except .
so that's why it wa numer input but awai we go , okai ?
so , that's not so good .
you don't realli want to put too much code insid your try and except .
so let's take a look and do thi on a littl better .
i'm go to cut thi back out , i'll move it down to the bottom .
now i gotta de indent it .
i'll fix thi rate in hour .
indent .
i'm try to get my indent right .
okai .
so now my indent ar right .
so let me go ahead and run the program just to make sure i'm not crazi .
<num> , <num> , that's good .
<num> , <num> , that's good .
so i'm good .
okai , the problem now is i've reintroduc my error that if i give it a bad thing , okai ?
so let's take a look at the kind of thing that we can do to make thi a littl more eleg .
so so we're right here .
thi is the problem .
we , we need to stop .
we don't want to continu at thi point .
if there wa a thing that we could sai just , just stop here .
if there wa such a thing in python , we'd be fine but that would be bad python syntax .
but there is such a thing in python , if you want to quit your program , you type quit .
it's a function .
we haven't cover function yet .
we will soon .
it's a function that never come back .
most function come back , but the quit function doe not come back .
so that when it come down here and it print thi , the next thing and then it doesn't continu .
so thi is a wai of sai we ar done .
so now let's run thi and put in some bad inform and it inde quit and so it doesn't continu down here .
let's make sure it work with good data .
put <num> hour well , okai , i guess that's right .
so let me comment out my debug print statement here and finish it up .
and run it on last time .
error , pleas numer input .
good hour , bad rate .
that's good .
and good hour , good rate , and that's good .
so we've accomplish thi on .
hello .
and welcom to our short littl lectur on peer grade assign .
sinc thi is often a first class for peopl on coursera and peer grade assign mai be someth that ar seen differ in differ cultur , i figur i'll just do a littl bit of a lectur on that .
first off , thei're extra credit .
thei're complet option .
i understand that non english speaker mai not want to particip .
and that's okai .
and you can earn all the credit in the class just by do the regular homework assign and take the quizz or exam .
so don't worri about it .
but the beauti is that you can take a bit of risk on thi becaus the point ar extra .
right ?
thei , thei don't count against you if you don't get a perfect grade , unlik the normal point where you sort of have to achiev a high grade to maintain your percentag .
and so , it's extra credit , and then give it a try .
so you have basic a week to write and then a week to grade .
and the grade is part of it .
you get point for do the grade as well .
and so if you don't do grade , then you don't get full point .
you can get , and so you get point for what you write and point for what you grade .
and you have a few other peopl .
now , the kei differ .
thi isn't a write class , right ?
we're not , i'm not your english teacher , i'm not your composit teacher .
i'm a comput scientist .
and the peopl you're write for , it's a peer grade assign .
you're not write for me .
you're write for them .
and so , we have a lot of variou educ level .
not everybodi is at the same level as whatev .
thi class is suppos to be sort of a begin class .
it's not suppos to be a super advanc class .
so we realli write to that level .
we write to , you know , a <num> or <num> year old person .
and we want to explain it .
so think of all your write as explain to somebodi , to someon sit right next to you , rather than try to impress me .
and understand that we're a lot of differ peopl .
thi is some data from a previou class that i taught .
about half of the student ar non english speaker .
i , i teach in english becaus it's the onli languag i know .
and a lot of student , it'll be their first onlin class .
and so let's just kind of understand that we're , we're build cultur here .
we're not , we're not , there's not someth for us to fall back on .
if we were do thi in a live classroom , everyon in the classroom , in the freshman class , would be somewher between , you know , <num> and <num> year old .
and , and , often from the same cultur , especi in undergradu , and we're quit differ than that .
we're also veri divers in term of the ag that we ar .
thi class is realli aim at the <num> <num> rang , kind of thi ag right here .
and so , if you think about it , that's a veri small fraction of the class .
the great major of the class is older .
and often educ .
right ?
we'll see that on the next slide .
and so understand that thi is how we're , the question ar be ask .
thi is the student for whom thi class is design .
and the other thing is , is that we have a lot of educ in thi class .
thi is not thi particular class , it's anoth class .
but thei're , all the data is show that thi is the typic makeup , although i want to chang that .
i want to make it so that more of the target audienc of earli colleg high school ar the on take thi class .
but , for now , we often have the great major of the peopl ar pretti educ .
so , oh , in thi , just kind of three quarter ar educ .
do not write , if you have thi degre , don't write as if you have a master degre .
you know , don't write as if you have , like , a jd or a doctor degre and show off how smart you ar .
be thought , and us languag that peopl can understand in the class , for in the class .
so if you're uncomfort write in english , googl translat doe a reason job , but not perfect , and we'll talk about that in a second .
and , and pleas , pleas , pleas don't , don't run someth through googl translat and then not tell the grader that you did that .
so pleas just sai , i wrote thi in spanish and i translat it in english becaus my english is not so good .
becaus that's a signal to the grader to sai that thei realli need to ignor small grammar error .
so again i'll talk about that in thi next slide .
so here's a bit of text that i took from a descript of my python program thing , python program class .
and , you know , what i did wa i ran it through googl translat a coupl of time , and you see all kind of weird artifact , right ?
thi cours is specif design to be a first program class .
thi cours is , is a program cours , that's not too bad of a chang .
masteri of each of the topic in the class , masteri of each subject in the classroom .
that actual might be better , the write of that on might be better than my write .
but then if we get down here we'll us simpl data analysi as the program exercis .
we will us the analysi as simpl program exercis .
that's start to sound not so good , but again that's an artifact introduc by translat .
and thi last on is terribl , right ?
process data is valuabl for everyon regardless of your career .
look what happen .
treat that .
understand how to treat the data is valid for all regardless of race .
thi is terribl written .
that's not what i wrote .
that is an effect for googl translat .
now when you're write for googl translat , you do want to keep your languag less floweri in your nativ languag , whether it's spanish or french or whatev .
you want to us basic structur , sentenc structur .
not a lot of , you know , us activ voic , be veri direct in what you sai .
and give it a try to translat it back , although what i've found is googl translat is surprisingli good at translat it back , to on to go into spanish and then back out .
what i tend to do is i go from english to spanish to french to english and then i start see the artifact .
so you might want to do that .
you might want to take your french to spanish to english to french and then take a look at the initi french and the chang french and see if you can't make it so you can see in my situat i could see to rewrit thi sentenc a littl bit , right ?
i , i probabl wouldn't rewrit anyth els in thi but i might , if i did my english to spanish to french to english and i saw thi , i'm like , oop , i'm go to just rewrit that sentenc a littl bit and run it through those three translat again , to give you a sens of how it's go to be seen .
right ?
so that you final ar translat the english back in , so .
so again , give it a try , put your name , i mean don't put your name , put the fact that you translat it front and center in the top of your document .
plagiar alwai come up in these class and in the earliest of coursera class , now well over a year and a half ago , it wa fierc discuss .
i think we're better now .
we understand that plagiar is potenti a cultur issu .
and differ cultur think of plagiar differ .
and so it's import to establish rule about plagiar .
how i perceiv plagiar in thi cours .
plagiar is simpli includ materi and not acknowledg that you've includ the materi .
it's not wrong to includ materi from other sourc .
it's wrong to includ materi from other sourc and repres it as your materi .
so when you're turn in an essai , the word in that essai you're repres , ar , came from you , right ?
you know , if the question is , why is the sky blue , and you go to , to wikihow or someth and you cut and past someth , and that's your answer , then , and you didn't sai where it came from , that's not good .
so it's perfectli okai to us quot .
i mean , that's part of write is research .
and if you realli love how someth wa said , bring it in .
so here's kind of an exampl .
you know , let's sai i ask you to write a stori , an essai about vint cerf .
and i saw thi realli good sentenc in wikipedia , the bit in the red here in the top .
so the , so thi , i saw thi bit in wikipedia .
and i just want to talk about , you know , hi earli career .
so , i think vint cerf is an import figur in histori of the internet .
that's my statement .
then i sai in the earli dai cerf wa a program manag , blah , blah , blah , blah .
and then i sai he later , back to my word , he later help defin .
now as a teacher i see thi realli , realli quickli .
becaus thi first part is veri convers thi next part is veri convers , and thi is veri textbook like .
it take a while , but after a while , it's not hard to see when the tone of a , of a write chang .
and all of a sudden it get realli formal and veri fact orient , versu veri narr orient .
when i'm write , i tend to be narr orient .
tell a stori .
and when wikipedia write , thei tend to be fact orient , not tell a stori .
so if you intermix your write with wikipedia write , it kind of jump out at peopl .
now , let's sai you read that and you can't even think of a better wai to , to , to phrase it .
don't just like move the word around .
just sai , put it in as a quot .
right ?
that's what i did in the second on .
i think that vint cert's an import figur in the histori of the internet .
accord to wikipedia , and then a littl , , a littl refer mark there .
and then i liter cut and past the exact text from wikipedia .
total legitim .
i have indic that it is a quot .
i made it ital .
you don't have to make it ital .
and i had a littl thing , and then i sai he later help defin .
i mean , it's the same thing , but at least i am valu the wikipedia contribut .
now you can't take your whole articl and sai , oh , why is the sky blue .
i past the entir answer from wikihow , or whatev .
but , do you understand the point ?
the point is , if thei said it realli well , includ it .
acknowledg it .
plagiar is not the inclus of the text .
plagiar is the lack of the acknowledg of the inclus of the text .
okai .
i think i've sai , i think i've said enough about that .
okai .
so even though i made a big fuss about plagiar , i don't expect you to be the plagiar checker , right ?
read it .
if it feel like there's a sentenc or two that wa plagiar , or a paragraph , go ahead and stick it in googl .
googl will find in the wikipedia page if it just came from wikipedia .
you know , if you think there's plagiar , take off point as appropri .
you know , if you think that , you know , you're award six point , and you think that , you know , it's onli worth two becaus of plagiar , then just make it two .
and pleas add comment describ the plagiar .
sai like , you know , i think your fifth sentenc came straight from wikipedia , and so i've taken three point off .
pleas do not , do not , do not , do not , do not , do not add comment about your opinion about plagiar .
okai ?
and don't sai , like , do you realiz that plagiar is the world's most grievou crime ?
or , i , let me tell you a stori about some on time i caught somebodi in plagiar in a class that i'm teach .
just sai , i think these two sentenc came from wikipedia , so i'm onli give you three point .
stop there .
stai with what you , is sort of factual about it .
do not add your feel about plagiar pleas , pleas , pleas , pleas .
it's simpl enough to sai i think these sentenc came from wikipedia .
do not talk about your view or , just stai awai from that stuff .
so the kind of grade rubric that i give you in these , i realli am measur whether or not thi wa well written for peer .
is it interest to read ?
doe it support it argument ?
is it on topic ?
doe it includ refer ?
okai ?
so that's what you're realli do .
so just enjoi the read of these thing .
don't , don't go like , wow , i am a grader .
i'm an english teacher .
i don't want you to becom an english teacher .
i want you to just becom a reader .
think of it as you're read a blog post .
did you enjoi the blog post ?
would you like it ?
would you recommend it to your friend ?
did the , did you enjoi the read ?
so , don't be too harsh .
don't try to think about thi as a write class .
we ar commun idea , and write is on wai that we commun idea .
so , in term of grade , don't get too worri if you get a bad score .
it is not the averag of all the score , there is the , some of the high and the low stuff get thrown out , and the score realli come from the middl grader , and that's why we have multipl grader .
so just relax .
if you get a six in your first on , don't worri about it .
see what you can learn from it , right ?
and some of the peopl will be wrong .
thei'll just be , some peopl ar bad writer , and some peopl ar bad grader , and you will get some peopl who ar simpli bad grader .
relax , it's okai .
hopefulli your score won't be neg affect by that .
we're not go to punish bad grader .
we're not go to sort of swoop in and and , and be the polic on the grade system .
gener it work fine with a few anomali .
and you just have to toler a , a few peopl that kind of sai thing that , that thei probabl shouldn't sai .
so just take what is good and ignor anyth that's bad .
and i remind you that thei're extra credit .
right ?
if you get six point , it's six free point .
it doesn't , it doesn't chang how mani point you must earn , it actual make it so you can miss point , or miss quizz , or whatev .
and i just think part of our goal is to learn how to do peer grade .
you know ?
i mean , i think part of our goal is to learn how to learn togeth , and i think that thi peer grade is a great wai of exchang write .
i mean , it's a , it's like a , write a blog post and then forc five other peopl to read it .
and it , there's a lot of great stuff that come from thi .
so let's just learn a lot from thi .
so i guess that's all i have .
and i realli look forward to read your essai onlin in thi class .
i have chosen essai question that i am curiou .
i'm curiou about the answer that you write , so i'll be look at them , and learn from them .
who know ?
mayb we'll have to turn them into a book some dai .
cheer .
hello , and welcom to chapter four , function , in the book python for informat .
as alwai , these slide and thi audio and thi video ar copyright creativ common attribut .
now we ar to the point , you know , chapter four , we're sort of well into the class .
so i figur i should introduc myself a littl bit , let you know a littl bit .
as i said befor , i think in the begin , we're tape , i'm tape thi in a wonder build at the univers of michigan call the north quad .
it's a rel new build , it's got some residenti section and some academ section and some classroom , and on of the classroom that i typic teach in is actual <num> north quad .
it's a realli beauti room with great wai for peopl to interact , and so sometim i'm teach , you know , littl tini dr .
chuck down here .
with a smile on the face .
and sometim my student ar take me on , take my class on campu and sometim student ar watch me through lectur .
and so thi build is realli beauti and if you ever get a chanc to come to ann arbor and look at it , mayb walk through it , it's realli , it's realli quit nice .
on of the thing i like about it is that i think it's realli highli inspir by harri potter .
the kind of , of cours , oxford and cambridg ar the real inspir for harri potter , but our , our cafeteria , for exampl , it kind of look like the four tabl in hogwart and you can kind of imagin a snowi owl fly around and a sort hat at the , at the front sort peopl .
and so the nicknam , the nicknam for the place is quadwart , becaus it's north quad quadwart , that's like hogwart and north quad kind of jam togeth .
and of cours , given that we sort of think of ourselv a littl bit as harri potter , peopl when thei first come in septemb often sort of decid to sort themselv and a few year back when we first start the build the student decid that i did not get to be in gryffindor .
as a matter of fact , it's probabl time for me to to show you who i am , and who i've been sort to be .
so the student decid that i couldn't be in griffindor .
that i had to be in slitherin , and that's becaus of my name , charl sever .
and sever is snake .
what's even cooler , of cours , is given that i teach python , slitherin's hous is a snake , right ?
so it make a lot of sens , i even have thi realli fanci slitherin teacup that i us to drink tea dure lectur .
sometim i drink coffe , and sometim i drink tea .
oh wow , thi thing itch .
so let me just get rid of it .
if i had ani hair , that would mess my hair up .
so let me get rid of thi for the rest of the lectur .
so there i am , okai .
enough of that , back to , back to dr .
chuck .
so , with that sort of brief , brief interlud , the topic of the actual topic of thi lectur is function .
and so store and reus is basic an idea that we will often have a seri of step that we will want to us over and over in a program , increasingli complex .
the thing that we'll us in thi lectur ar kind of silli becaus i have to keep them short so the slide don't get too long .
but a good exampl of , you know , the kind of work is mayb i am go to us googl's geocod servic and i am go to send some unstructur data and get a gp coordin back .
and that's a servic that i want to call and it would mayb be about thi much line of , thi mani line of code .
and i'm go to want to do that all over the place .
so do i want to put thi mani line of code <num> place in my program ?
or do i want to put it on place and then call it in the variou place that i need it ?
and so that's why i call it the store and the reus function .
so if we take a look at the simpl syntax here .
these thing ar call function and in some languag it's call subprogram , but we call them function in python .
and the keyword that we're realli go to focu on is def , which stand for defin , and what happen here is when python see thi def keyword it actual doesn't run the code .
it sai , oh , you're go to make a function and you're go to kind of turn on a record and start record thi code .
so it ha a colon at the end of it .
so it ha an indent block afterward .
and so the indent block becom record .
so instead of run the code , like if we just put print hello and print fun , it would run it .
instead it sai , hei don't run it right now , name it hello .
we give it a name .
it's kind of like a variabl .
we choos the name .
we've chosen hello as the name of thi .
defin it as hello , have it have these two line of python in it , and we'll us it later , okai ?
and so that's the function definit .
that's the store phase .
that is it's sort of like , it doesn't realli run those line .
it sort of make a variabl call hello that actual contain python code rather than contain like <num> or a string or someth like that that we've work with befor .
so thi is the store part , and then the reus part is , we then have extend python .
we now can call our bit of code .
so we sai , hello , hello name is what we came up with , parenthes , and then that sai , rememb that code that i put in there under the name hello ?
run it now and , so , so , so if i start look at that and then it just continu .
so let me kind of clear thi and start over again .
and , so if i watch what python doe from the begin as it read here and it goe oh , you're defin a function name hello .
great , i will sort of rememb , rememb .
i got that rememb for you , let's continu on .
oh , hello !
you want me to run that stuff that you just got done store under the name hello .
so then it kind of goe and run it and out come hello fun .
then after that it run to the print and out come print zip .
and we sai , you know what ?
i want to reus that again .
i store it onc , i can reus it as mani time as i want .
and now , hello , and then these two line of code run a second time .
so we store them onc , gave them a name , and then ran them twice , in the context of wherev it is we want .
now thi is not sort of a profound a profound reason to us it in thi .
i'm just try to give you the notion that there's a wai to store and name code that then you can retriev later .
that's realli what's go on here .
there's two kind of function insid of python , and we've actual been us them almost from the veri first lectur .
and that is there ar built in function that python provid to us like float , raw_input , int , those kind of function .
those ar just part of python but we call them as function .
the differ is we don't write them .
and then there's user defin function , function that we write .
function that creat function that we want to make us of .
like encapsul the abil to comput pai for time and a half for overtim .
and so , we name these thing and we treat them as new reserv word that we've creat .
thei're kind of an extens to the languag as it were .
so when we're come along , we defin a function with the def keyword , right ?
the def keyword is a reserv word .
it's on of the mani reserv word back in chapter on that we talk about , and it indic to python the begin of a function .
we defin it , and then when we call it , which is call invok , it's like , we're build it , and then we're invok it .
and you can build it onc , and then invok it mani , mani time .
so for exampl , here is a built in function call max that find the largest charact , the sort of lexicograph largest charact , in a string .
and so it's like okai , tell me the maximum charact .
and so max is not some code that we've written but we ar invok a function here and we're pass in an argument to that .
so the argument is thi stuff in between the parenthes .
so the max function can find the maximum of mani differ thing .
at thi moment we want it to find the maximum of that particular string .
the highest charact in that particular string .
so , thi is a left , a right hand side of an assign statement too .
so that ha to be evalu to a valu .
so it goe into the function , doe whatev thing the function want to do , and then the function give us back a valu that becom the valu for max parenthes hello world .
and that valu in thi case is the letter w , okai ?
becaus the letter w wa decid to be the highest letter and that's what max give us back .
and then when we're done with that , then that w end up be assign .
the assign statement complet .
and so you can think of the function evalu as happen as part of the right hand side express calcul .
there could a plu here and other stuff and it's just , at some point , a big express .
and thi on , it's a simpl express with just on function call .
now if we look at thi , there is some code somewher .
somebodi wrote some code .
it's part of python .
you didn't write it .
there's a max function somewher .
and you can think of a function as have some input .
it's kind of like a program , that's why some languag call these thing subprogram .
becaus thei have an input , thei do some kind of us work , whatev that us work happen to be , and then thei produc some kind of an output .
right ?
so hello world is the input , a string , the argument , the thing we're pass in .
hello world is what's be pass in to the function .
the function is run and then someth come back and is sent back .
so it ha input , process , and output .
input , process , and output .
so that's how a function .
some store code , whether we wrote it or not , thei work the same when we call function , right ?
so you could think of thi as , somewher insid of the python librari is some code that mayb ha a littl def in there , and the name , thei name the function max , and it take a singl paramet .
and it doe some blah , blah , blah , blah , loopi blah , blah stuff , whatev max want to do .
whatev we need max to do base on the specif that max is suppos to support .
but somewher there is code insid of python that actual repres the function definit .
it's a built in function becaus it come with python and we didn't have to do anyth to add it .
so some common built in function that we have been us all along , good exampl ar the float , which take as input anyth and return you a float point number version of that .
type , which take a paramet of a variabl or a constant and sai , what is the type of thi .
float , again convert .
type , again , and float .
so these ar all thing that , we've been call function all along .
and it pass the input valu into the function , the function run and then give us back a return valu which then particip in the rest of the express on the right hand side .
you can think of it's paus the calcul on the right hand side , call the function , get the result of the function back , and then continu the evalu of the right hand side .
then come up with whatev valu and then print that valu out .
okai ?
anoth thing that we've done is we've done string convers .
right ?
so we've convert , in thi case , a string to an integ .
and ask what type it is .
we've convert a string to an integ .
so , int convert it argument , whatev that happen to be , into an integ .
so that's just some of the built in function that we have talk about so far .
now , thi becom more interest when we can make our own , own function .
oop , there goe my teabag right in the middl of the thing .
got to take the teabag out , i think it's , whoa , hang on , be right back .
teabag , okai , there's my tea .
so , so we want to make a new function .
like i said in the other exampl , we us the def keyword , the def keyword here , and then we have some indent bit .
we creat a name for it and then have some parenthes .
these parenthes will later tell the input that we're go to pass in , but thi function ha no input , so we just go parenthesi , parenthesi and then the all import colon charact which indic the begin of an indent block of python , that then is , thi detect the function .
so , it's import to rememb that while thi is execut when python first look at thi , it doesn't run these line of code .
it just rememb them , and name them print lyric .
so it doesn't caus ani printout , it just caus python to rememb .
i probabl said that a few too mani time .
so , so here is a difficult problem , and i'll let you think about it for a while .
i want you to kind of mental go through and execut thi code .
and ask what , ask yourself what the output of thi program would produc .
how mani line ?
how mani line of output would thi program produc ?
so , how mani of you said three ?
how mani of you said five ?
well , the right answer is actual three .
you see five print statement , two , three , four , five , but two of the print statement ar sit insid of thi .
and we never call , we never invok a function down here , okai ?
so , thi on , let's clear thi .
thi on print , these two get skip , thi on print , and thi on print .
so that that's why there ar three statement that print .
there is store , but we never us , a function call print lyric .
and it's got two statement in it , but we never us it .
so the output of thi is hello yo <num> , and that's becaus we never actual invok it .
we had to sai print lyric parenthes or whatev to caus it to call thi .
okai ?
that's just to emphas that as it look at it , it doe not execut these line .
so onc we've defin a function , onc we have given it a name , given it code that is a part of it , then we can invok it or call it as mani time as we like .
so now , our littl exampl work a littl better if we actual call our function .
python realli doesn't care if you don't call your function .
it's like you told me to make on , i made on .
you didn't us it .
there you go .
but if you look at thi on now , so here we go , x equal <num> .
print hello , out come hello .
defin .
noth happen here .
noth happen here .
it's just rememb .
okai ?
then it sai , print yo .
then it call the function print lyric , which sort of stop us here , run these two line of code .
so out come that and that .
then it sort of finish thi and it come back , x equal x plu <num> , then it print x .
that must mean that x is <num> , and so out that come .
and so , again , it's on the first time through .
no , go back , go back , go back .
on the first time through , it doesn't print .
but then when it hit thi , it print .
you could sai print lyric sever more time and it would run thi as mani time as it did , and it need to , as mani time as you want , and it would make output for you .
so you can invok thi is the definit , let's clear thi .
thi is the definit .
thi is the call or invok .
so we ar invok the function , we're call the function , we're caus the function to execut .
here we're just caus the function to be look at and defin , but not actual execut .
hope that's clear .
now , when we pass data into a function , and function that don't take data ar not as us as thei could be .
there ar plenti of thing that do , time that you build a function doesn't take data .
but the most interest function ar the on that you could hand them someth to work on and thei could do their work and then come back with whatev .
so thi max function is a good exampl of thi , on that's take an argument .
we call the thing in between the parenthes when we're invok the function , we call the thing in between the parenthes argument , okai ?
so that's pass into the function .
feed data into the function .
so we put argument in between them .
so for exampl , here we have a littl program .
that that is , it's a function name greet , and now we ar go to defin thi function and we're go to sai , you know what ?
i would like to take a paramet , let's take a paramet .
let's have on paramet come in .
and we need kind of a placehold for that paramet , so within the function we're go to us lang .
now thi isn't actual a real variabl .
it's kind of like a , it's a placehold variabl .
so thi first paramet , whatev it is , when it's call , is go to be lang .
and so if that first paramet is equal to es , we're go to print hola .
and els if it's equal to fr we'll print bonjour .
and otherwis , we'll print hello .
so there's appar three languag in the world , spanish , french , and english .
and if it's not spanish or french , then it must be english .
but , i , you have to keep thi kind of small , so my screen doesn't get too big .
so thi is again just the definit and if you type thi into the interact thing it give you thi dot dot dot prompt .
and so we now have thi thing call greet and now we've extend python to add our own function to python .
and now we can sai greet en and so it run thi code except that en is lang and so that come , and then it print hello .
so out come hello .
now later we can sai , oh , i would to do a greet , but thi time i'm go to pass es in as it .
so lang becom , for thi execut , es .
and then , so it print out hola .
and then the next execut , lang is fr .
so it execut thi three time but lang is differ each time becaus we've pass in differ paramet each time .
so that's how we can kind of write gener purpos code insid the function and then reus that gener purpos code in differ wai .
okai ?
it's a real power , power mechan that make function far more us .
now , function don't necessarili just have to do stuff .
a real power mechan in a function is what we call a return valu .
so a function can take it argument , do some work .
we've seen that .
and then it can return a valu .
and the kei to the return valu is , when we call the function , like we were call max , it give us back some valu like the littl w , okai ?
so here we're go to make a function call greet that take no paramet .
doesn't take paramet , but it ha anoth keyword .
it's anoth reserv word in python and whatev we put on thi return statement show up as the replac in thi express .
so , whatev greet is , it run greet and then the return is kind of a residu valu .
so if we sai print greet , comma , glenn .
it sai hello glenn , becaus the return valu for the greet function is the string hello .
and if we sai greet salli , it sai hello salli .
and so , and it's run the code twice and the return function , return valu ha been put in here instead .
and so the hello came there and the hello came there , so we get the two line .
so , return is a statement that both termin the execut of the function and defin the valu of what will be replac when the function call come back , in the line that the function wa call from .
so here is a littl smarter version of our greet function .
it's veri similar , it's call greet still , take lang as a paramet .
and if the languag is es , then it return the string hola .
if the languag is french , it return bonjour .
otherwis , it return hello .
so we're not actual do the print , if you go back on the other slide , we were print .
but now we're just return a string .
okai ?
and so now , i can call print greet , and pass en in , so then that run the code onc , with lang equal to en .
and i get back hello , and then comma , glenn .
then i call it again and i pass es in .
and then that time it return , the return valu here becom hola , a string hola .
hola salli .
and then michael , i'll pass in on more time .
lang is now fr , the string fr , and so it return a bonjour and so the , the residu that is here is bonjour , and so out come bonjour michael .
so there is lot to thi , right ?
you're pass stuff in .
you have thi kind of placehold variabl .
and you have thi return that sort of appear where it wa call from .
thi goe in , doe it work , it come back , and there's sort of the residu valu that sit here .
you don't have to have a return in a function , but if you want to do someth with the valu , then you have to have a return in the function .
we call the function that produc valu fruit , and the other on ar call void .
so , that's a good name for them .
so , to review sort of thi , argument , paramet , and result , if we look at max , the origin thing , where it's look for the largest , lexicograph largest letter , it look hello world is the argument that's pass in .
we have thi sort of formal paramet here call inp which is not realli a variabl , it just happen to refer to whatev is the first argument in ani particular call .
and then it doe it littl thing and run loop and doe all these thing and at some point it return w , so that the thing that come out when the function quit that becom the replac valu here is a lowercas w string .
and then that is the w that goe over in the big .
so the return is what defin what come back here .
becaus you think of thi as , it's look at thi .
it suspend for the moment .
it run thi code .
it's hold .
it's hold itself here .
it's run thi code and then it come back to here .
okai ?
and the return valu is what defin come back .
so , of cours you can have more than on paramet and thei ar in order .
so here we have an a and a b .
these , the name of these thing doesn't realli matter .
thei're just relev insid of the function definit .
so we ar go to add two number togeth by take a b , and then return the sum .
the ad variabl is just kind of local to thi function .
and now we can sai , you know , addtwo , <num> , comma , <num> .
and then thi will come back as <num> , and then <num> will get assign into x , and so that will print out <num> .
and so you can have as mani of these as you want and the order matter and there is a on to on correspond .
<num> goe to a and <num> goe to b when the thing is call .
and then the return valu again come back .
okai ?
so that's , sort of , argument .
and like i said , not all function have to return valu .
we call them void function when thei don't return anyth .
it's total fine for that to be the case .
so at thi point you might be think to yourself , okai , great , well i still don't quit get why to us function .
and in realiti , in the first <num> , <num> chapter of thi book , other than us lot of function , we're not realli go to spend a lot of time make function becaus most of our program ar go to kind of be that long and we're not go to do a lot reus in the program .
and there'll be a time when your program becom complex enough .
you'll be like , oh , thank heaven for function .
i think it's prematur to sai you must us function , even though there ar some exercis that just sai , hei , do thi with a function .
just so you kind of get the understand of a function .
you will find soon enough , as your program grow , you'll go like , oh , i keep do thi same thing over and over again .
let me pull it up into a function and pass a paramet in , have a return valu , and awai you go .
or , you might find that you're move from on program to anoth and you have thi common thing that you want to do , so you make yourself a librari that you drag along .
and we will do lot of librari .
the book in the second half doe lot and lot of librari stuff , do thing like pars xml and thi , that , and the other thing .
so , so don't feel like you need to us function on everi assign , becaus thei're a natur thing when a program get big enough .
so , so just kind of understand them on a mechan level , but it'll come to you at the right time when it's time to start build your own function .
so in thi class , we kind of , you know , talk about function .
just got you start .
talk about paramet , talk about built in function , talk about return valu , the store and reus pattern .
so , the problem at the end of the chapter for thi particular chapter ar rel straightforward , in that , like i said , we don't have a real strong need to do function yet in thi class becaus the program aren't larg enough .
but i just said okai , take , take on of your previou assign and refactor the code so that at the top there is a def computepai , and you put like the if and whatev in here , and then later on you do your code and then you call computepai .
so you took code that you alreadi had , you move it up into a function , and make a function .
and i've also onlin got sort of a sampl of thi , becaus it's , it's a littl complex .
and so you should be abl to find , on python learn or on the cours site , you should be abl to find a good exampl , becaus i realli want you to sort of get thi .
like i said , there will come a time when function will make the most sens to you .
but come up next , of cours , is chapter five , and that's loop .
and loop ar go to rock the hous , and so we realli , that's our fourth major pattern is loop and and i'm look forward to it .
so we'll we'll see you at the next lectur .
hello , and welcom to the work exercis for python for informat , explor inform .
i'm charl sever , and i'm your guid and guest programm for thi particular exampl .
as alwai , thi materi is copyright creativ common attribut .
so we've been work through a seri of exercis that ar do time and a half for overtim and pai of variou kind to look at variou if then els , and now we're on to function .
and so , we're go to creat a function call computepai that take two paramet , hour and rate , and it actual doe exactli the same thing as the other on .
it's just we're do it in a differ wai .
okai ?
so , we will start .
i'm run textwrangl and the termin program .
make the termin program smaller and move it to the bottom .
textwrangl smaller and let's go cd desktop , cd python for informat , and i've got some file here .
let's let's make us of hour2 . py .
so , i'm go to open hour2 . py .
hour3 . py wa my , or actual , no , i'll us , i'll us hour3 . py becaus that's my try accept code .
okai , so the idea is we're suppos to encapsul thi bit of code in a function call computepai .
so on of the thing you do with function is you have to defin them befor you us them .
so we're go to put the function up here and us the def keyword , def computepai , and we're go to accept some paramet .
i'm go to call thi , i'm go to call it h and r just to kind of emphas the differ between the paramet we us insid the function and the argument in the call .
so the code that need to be in thi in thi function is these line of code right here .
so we're go to to cut them out of here , and then we're go to indent them , make them the bodi of the function .
okai , so , now the variabl in thi function ar not h , ar not hour and rate , thei're p , i'm go to just chang them all to thi .
thi , i'm just chang thi to kind of emphas the differ between these variabl that live in the function and the variabl that live in the call code .
so in the function thei're call h and r and p , and the onli on other thing i'm go to do is i'm go to put a return statement in to return p as the result of the function .
and so python will come in , it'll see the def , it'll read all thi stuff , it won't do it .
then the first execut sai try , it still work the same wai , and i'm go to chang thi to be in the main code .
rate and hour .
then i'm go to put a print statement just for yuckydoodl .
print in computepai , and print out h and r .
and then befor i do my return here , i'm go to sai and i'll print out , i'm go to print out what i'm send back and print out the comput pai .
and then , now the onli thing i've got to do left is , i've got the rate and the hour , and i'm go to call my function .
so , i'm go to sai pai equal computepai , or invok the function , and pass in rate and hour as my argument .
and then print it out .
so here's the main code .
oop , well , i'll just sai we ar back , and then print out pai .
so i have a print befor and after the call to computepai .
and i have a print onc computepai start and when computepai finish .
i have to sort of reorgan my screen a littl bit here .
so we can see them all .
ooh , i gotta save thi as someth els so i don't ruin hour2 .
i'll call thi hour4 . py .
now i'll sai python hour4 . py .
okai , so i'll type , so what's happen here is it's type enter hour , so it's on thi line here , line eleven .
it's alreadi made it all the wai through here , okai ?
now i'll have a print statement in a second here .
so , so , so , there we go .
it's made it through , it hasn't done ani work but it rememb thi code and store it under the name computepai and it's here .
so now i'll do hour .
<num> hour and <num> .
so i'm run through thi code right here .
and then i'm go here next .
becaus we're not go to bad , put bad hour in .
so the next line that happen is in the main code , which is here .
then it call computepai , right there , so it got here , and h is <num> and r is <num> .
it doesn't quit look right , but the computepai , we're done , and that's <num> , and everyth is cool .
so it's back , right ?
so , let's do thi .
let's do anoth on .
and i'm put <num> hour and <num> an hour .
now that on should have overtim , becaus we put in <num> hour , but it's not .
so what is the problem here ?
ten and <num> ar come in .
we , we're get the number right .
we're go into computepai as <num> and <num> , and then we're come back .
hmm .
so , we're print out the hour , the h and the r ar variabl .
oh , ooh , ooh , ooh , ooh , i see it , i see it .
mistak is right here and right here .
can you see it ?
we have , these ar paramet , and these ar argument .
these ar the real variabl , rate and hour .
the paramet ar h and r .
we got two paramet , but we've got the order wrong .
so , here i have rate first , so h here is rate .
and look , if we look at what we print out here in computepai , the first thing we print out is h , but it's realli <num> which is suppos to be rate .
oop , so i gotta fix thi .
that should be r to correspond to the first paramet , and that should be h to correspond to the second paramet .
and just to keep my saniti , i'm go to print out r comma h , so i'll sai rate , hour just to be consist .
actual no , no , no , no .
sinc i'm prompt for hour and rate , h comma r .
i'll chang thi to h comma r , and then make thi be hour comma rate .
i think it make more sens for the hour to be first .
i don't know why that make more sens , but now we're correspond our mnemon variabl insid of our function , our h and r , that allud to hour and rate .
but thei're not the same as hour and rate , so h is an alia to hour when thi is call .
okai ?
so now let's run it again and see if she work .
so i'll do <num> hour , <num> an hour .
oh , i'll bet i didn't save it .
<num> hour , <num> an hour , yai it work , it work , it work , it work , we've got ourselv our overtim .
okai , so , so i'm go to sai h equal .
then i'm go to add r equal here , just so that we know which rate and what h and r ar .
just add some string there .
run it again .
if i'd have done that in the first place , i probabl would not have made that , seen that mistak much faster .
so , we've got <num> hour and <num> per hour , and so it's work .
so just to sort of continu on here on thi , i could do thi .
i could call thi function again , and i could sai , just to show you how i'm reus thi code , i'm go to make a variabl name z , and i'm go to sai <num> is my paramet .
and my second paramet is <num> an hour .
and so now i'm us constant instead of variabl and you will see that it's go to call computepai onc thi time and h and r ar go to be hour and rate the first time , and the second time thei're go to be call again but <num> and <num> ar go to be what h and r ar the second time .
and then print zzzz , comma z .
that's just a silli messag .
okai ?
so , we're go to , thi , thi stuff is unchang , it just prompt and get us the rate .
we're go to call computepai twice thi time .
on time with hour and rate , and the second time with <num> and <num> .
so let take a look at how that run .
right , mai , mai need a littl longer , well let's see , <num> hour , <num> an hour .
oh yeah , it would help for me to save , help for me to save .
don't make that mistak .
<num> hour , <num> an hour .
okai .
so in the main code , then it then it call computepai and doe on comput and then it's here , it's back in the main code , right there , and then it call computepai again .
thi time the variabl h and r , oop , thi time the variabl the h and r ar <num> and <num> .
the last time , h and r were <num> and <num> .
okai ?
the kei is that thi h and r , the paramet in the function , ar ephemer .
thei come and thei go .
computepai work with differ , differ valu each time .
but it us h and r intern as kind of it scratch area for thi .
let me see if i can get thi all on on screen .
ye i can .
okai , so thi just is show we're run it twice onc h is <num> and the next time it's <num> .
becaus it's simpli the first paramet .
and the first time the paramet wa <num> , the second time it wa <num> .
okai ?
so , let's just walk through , scribbl what's go on here .
just , we'll just kind of go through thi .
so python start at the begin and see def , and it sai oh , don't run thi code , rememb it , name it computepai .
so h and r don't exist , thei're not , thei don't exist until the function is invok .
then we get to the try .
we've got some insur on these four line .
we read our , and convert our input , and our rate , our hour and our rate , and that's good , so we don't run the except .
then we print in the main code .
okai ?
and then we come to thi line and we see computepai , and so that goe up here and h and r ar hour and rate and it run thi code .
it return p , and that p come back as the valu here and end up be put into pai .
then we print we ar back .
then we run into thi statement and we have to go call computepai so it goe up again and thi time h and r ar <num> and <num> .
it run through the code , blah , blah , blah , blah , blah , and then return <num> and that return to thi call , not the previou on .
and then that put <num> into z .
and then the program continu on .
so , it , again thi doe noth and it call it twice , and ha two set of argument and the paramet repres differ argument in the differ call .
okai ?
so let me just clean thi up on last time and get rid of the , oop , get rid of the debug print statement .
get rid of that .
get rid of thi .
so you can see what it's realli suppos to look like .
we don't need that .
well , i'll just comment that on out to keep it in case of later .
thi is debug print , so i'll keep that and get rid of those two .
so now it doesn't do ani print .
so let's run it on more time .
<num> , <num> , good stuff .
<num> , <num> , good stuff .
so , it work .
so , there's the , there's the ultim program and it look pretti good .
hello and welcom to chapter <num> , loop and iter .
as alwai , thi lectur is copyright creativ common attribut , includ the audio and video and , and the slide , and the book even .
so , now we're get to our fourth basic pattern .
we've talk about sequenti , where step happen on after anoth .
we've talk about condit , where step mai or mai not happen .
in chapter four we talk about the store and retriev pattern .
and now we're go to talk about the loop pattern .
and the loop pattern is the last of our realli foundat on , and it potenti is the most import on , becaus it's the thing that allow us to get comput to do lot of thing that , sai , human might get tire of , but comput don't tire of .
and so after thi we'll start sort of becom a littl more skill in the basic languag capabl .
we'll talk about string and , and then start to talk about file .
add start do some real work after we get done with thi , so bear with us .
it's go to be a while , but we'll get there .
we'll get there .
so , welcom to repeat step .
thi is the exampl that i had in the first , first lectur , chapter <num> .
and the basic idea , just to review , is that you have thi while keyword .
the while keyword sort of function like an if in that it implicitli ha a decis that it's go to make .
and it's either go to do the code in the indent block or not do it , or skip it basic .
all right ?
so you either do it or you skip it .
the differ between the while and the if is that it's go to do it mani time , as long as thi question that we have remain true .
okai ?
and so , in thi case , n is <num> , while n greater than <num> function like an if .
so ye , it's go to run it .
print out <num> , subtract <num> , so it's <num> .
goe back up .
goe back up and ask the question again , is n still greater than <num> ?
well , sinc it's <num> , ye , we'll continu on .
out come <num> then n get subtract .
<num> , <num> , <num> , <num> , and then we come through , we print <num> .
print <num> .
we subtract n to <num> .
we go up , we go back up .
n is now not greater than <num> , so we come up and we execut outsid the loop , we leav the loop .
and that realli mean in the python code we skip to whatev is line with the while statement .
the same indent level as the while statement .
and so that's how it work , and i just print n at the end here to remind ourselv that n end up at <num> , not at <num> , the last thing we print out in the loop .
the last thing we print out in the loop wa the <num> , but n end up at <num> becaus it wa , thi loop wa go to run as long as n wa greater than <num> , so n had to sort of be not greater than <num> to get out of the loop .
okai ?
so that's basic a review of what we've done .
now , oh , wait , wait , wait , wait , wait , someth els .
iter variabl .
okai , so the kei to thi is these loop can't run forev .
we don't want them to run forev .
we want them to run until , as long as we want them to run .
thei mai run a veri long time , but not forev .
there's got to be a wai to get out of them , otherwis we call them infinit loop , which we'll talk about in the next slide .
and so the iter variabl is gener some variabl that is chang each time through the loop , and we're chang it by subtract <num> to it , from it .
and so thi thing is go to keep run , and we can pretti much see that oh , thi is go to exit , right ?
whatev n is , it could be a larg number , but eventu it's go to get to <num> .
right ?
so the iter variabl control how mani time the loop run .
and it also allow us to do someth differ insid the loop .
and , of cours , thi is like a trivial loop , where we're just print the iter variabl .
but it just mean that thi loop is go to run five time and it's go to do someth potenti differ each time .
if you just ran the loop that did the same thing over and over and over again , with no data chang , that's kind of dull and pointless .
so just becaus you have an iter variabl doesn't mean that you've properli construct your loop .
it's a , it's a common problem or someth we want to avoid , is an infinit loop .
and here is a , a carefulli construct loop .
we start n at <num> at the begin .
we have a good question at the end , while n greater than <num> .
it's go to run thi as long as n is greater than <num> .
but the problem is , is we don't chang in the littl block .
we don't chang the n .
which mean it's go to come back and n is go to be <num> .
and it's go to run thi and n is go to be <num> .
and it's go to run thi and n is go to be <num> .
and so thi is an infinit loop , which mean thi loop will never exit .
it will never get out , it's just go to run forev in here , becaus n is not chang .
neither of these statement chang n .
so part of the iter variabl is there need to be someth that chang so that the loop will ultim make progress to accomplish what it is and know when to stop .
so thi is an infinit loop and , of cours , lather , rins , repeat is commonli put on shampoo and condition .
and so you know , you can , next time you ar in the shower , take a look at your shampoo and condition and find the infinit loop that's , that's on most bottl of shampoo and condition .
now here is anoth loop , just to emphas that it's possibl to structur these loop in a wai that thei never run .
so thi function is , is an if .
the while function as an if .
and so when n is set to <num> and we ask the question , it is liter go to make the decis base on n greater than <num> .
well it is not greater than <num> , so it's go to go right by it , over here it's go to come in here and go right to there and never run these line of code .
and that's , we call thi a zero trip loop .
and that's okai .
i mean , thi is a silli on , of cours .
it just show that the test , the question that's be ask is abov the line that make up the bodi of the loop .
and if it's fals , the loop never run .
so it's possibl that these loop have zero trip .
okai ?
so , that's a loop .
now , there ar more than on wai to sort of control the flow of a loop .
the basic flow of the loop is when it get to the bottom , it goe back up to the while , and doe the check .
thi is a differ wai of get out of a loop or control the execut of a loop .
there is a keyword or a part of the python languag call . . .
what color do i got ?
no , green's over here .
call break .
if you look back at the reserv word , break wa on of the reserv word .
break sai , hei , if i'm in a loop , stop the loop .
all right ?
get out of thi loop .
i'm done with thi loop .
and so here's thi loop .
now the interest thing we've done is i've just got done talk to you about infinit loop .
we have just construct an infinit loop , becaus the question is right there , and the answer is ye .
true .
true .
and that's a wai to construct an infinit loop .
we've done thi becaus we have a differ wai of get out of the loop , so we've construct a loop that , just on the face of it , just look at that line , look like an infinit loop .
so what thi loop doe is it read a line of input , check to see if the string that we've enter is done .
and if it is , we're go to skip out with thi break and get out of the loop , otherwis we're go to print it .
so at a high level , what thi loop is go to do is prompt for string of charact until we enter done .
and that's exactli what it doe .
it prompt , we sai hello there , it print that out .
we sai , we sai finish , it print that out .
we sai done , and it's done .
so it , when we sai done , it come out and finish the loop , and , and that's the end of the program .
okai ?
so , to look at thi in some more detail .
the first time , it come in , doe the raw input .
becaus true is true , so it's go to run it .
and then we enter hello there .
it check to see if what we enter is equal to the string done .
it is not , so it skip and it doe the print .
and we do thi on more time , we type finish .
and then the line is not done , that variabl line doe not have the valu done in it .
so we print that .
we come in on more time , but thi time thi is true , so it goe in and execut the break and then it escap the loop .
and so you can think of . . .
right ?
here is the bodi of thi loop , becaus that's where the indent start and end .
the break sai , break me out of the current loop that i am in and get to that next line that ha the same indent as the while .
so , whatev it is , break sai , we ar done with thi loop .
when that statement execut , we ar done with the loop .
we're finish with the loop .
it'll run until that execut becaus we got thi set to be while true .
okai , so there's a simpler , i mean thi is sort of a simpl wai to draw thi .
break is sort of a jump to the statement immedi follow the loop .
if you realli want to pictur thi , i think of thi as a kind of like a star trek transport .
where you kind of come into break and then your molecul ar sent to the four corner of the univers , and you reassembl outsid of the loop .
and so if we look at thi in sort of my littl road map version of these thing , right ?
the while loop is go to run for a while , yada , yada .
there can actual be more than on break as long as thei onli get thi .
but the moment that somehow , some if or whatev hit the break , then it get out complet and so it escap the loop .
and so it sort of like you , you , you're zoom , zoom , zoom , zoom , zoom , zoom , you come in here and then you ar , you ar re materi outsid the loop .
that's what the break doe , okai ?
so , break is on wai to control the execut of loop .
now , anoth wai to control the execut of loop , that doesn't actual exit the loop , is call continu .
continu basic sai , hei , i'm done with thi iter of the loop .
now each time through the loop , we call that an iter .
continu sai , i don't want to stop the loop , but i want to stop thi iter and advanc to the next iter .
and so what we have here is we have the same basic loop , a while true which kind of make us an infinit loop .
we're go to read a line prompt with a less than sign .
and if it's done , we ar go to break , that code is down here , and we ar go to print it if we fall through .
so normal we'll be read and print , and if the line is done , we ar go to break out .
that's we just got done do .
but the new part is right here .
and thi is , we'll learn thi in the next chapter .
if line sub <num> , if the first charact of the line , is a pound sign , we're go to continu .
and what continu sai is it doesn't actual get us out of the loop .
it jump back up to the top of the loop .
which mean that it ignor , for that iter , the rest of the loop .
right ?
so if execut come in here .
i'm go to clear that .
if execut come in here and hit thi line , it goe back up to the while .
okai ?
which mean it , whatev thi is , it's not come out of thi if .
it's go back up to the while .
okai ?
so continu end the current iter and jump to the top of the loop , and start the next iter .
and so if we look at how the code run , hello there print , pound sign with the first charact doesn't print , so there is no printout right here .
print thi is not done .
and we enter done , and then the loop end .
now anoth wai to sort of draw thi is the continu jump to the top of the loop .
it , it doe run the question , right ?
it doe check the question .
so here is anoth wai to , to draw that pictur .
and so here again we have a loop and it's happili run .
and there can be break in there and there could be continu in there , and as long as we don't hit a break or continu , the loop just sort of run and goe up to the top .
and at some point , some if , we hit the continu .
and like a transport , instead of go out of the loop , we go to the top of the loop .
but it's import that we go and we check the question , right ?
so the continu is not like to exit the loop unless the question ha becom fals .
so the continu is like to come up here , run some more , then hit the continu .
it come up here .
oop !
oop , it did that backward .
run some more .
clear thi out .
so , the continu could run mani time , right ?
so we have the loop .
loop run a bunch of time , then final we hit the continu .
continu goe up to the top .
if it's still true , we'll run the loop some more .
then you might hit the continu .
then you might go up to the top , come down , round and round and round and round , hit the continu again .
go up to the top , yada , yada .
now in thi , in thi particular loop , thi break eventu is down here and that's how we get out , okai ?
so the continu goe back up to the top of the loop .
so these loop that we construct with the while keyword ar what we call indefinit loop .
i mean , look at the on that we've written , which ar two line or six line , we can kind of inspect them and understand when thei ar go to stop , and we ar go to know that thei're possibl to stop them .
a loop that won't stop is an infinit loop .
sometim these loop can be rather complex and you mai not actual be abl to look at them , becaus there ar mani line and , and so we don't know .
and so , so if you , you have to be real care when you construct these to make sure that thei stop as , as thing get more complic .
now the cousin to indefinit loop ar definit loop .
and definit loop is someth where we have a list of thing or a set of thing that ar kind of a known set of thing , a finit set of thing .
and we ar go to write a loop that's go to go through that set of thing and do someth to each thing in that set of thing .
and the keyword that we us for thi is the for .
so we us the python for keyword that sai we ar go to write a loop , but instead of it just run until some condit becom true or fals or we hit a break , we're actual go to know how mani time thi is go to run .
now you can actual us break and continu in for loop .
we call these definit loop becaus the , how long thei're go to run is kind of well known , basic .
so here's a simpl definit loop , and it's kind of like that while loop that we just got done look at where it's count down and then sai blastoff .
and so the wai we construct thi loop is we have the for keyword , it's part of python languag , the in keyword , and then we have an iter variabl .
i've chosen i as my iter variabl .
and basic what we're sai is , dear python , run thi indent block , and there's onli on line in the indent block .
run it onc for each of the valu in thi littl list .
thi is a python list , squar bracket make python list .
comma separ valu .
so it sai , i would like i to be <num> , then run thi code .
then i would like i to be <num> , then run thi code .
then i would like i to be <num> , then run thi code .
i should be <num> , then run thi code .
and i should be <num> , then run thi code .
and so thi is pretti clear , and i like thi word in .
it sai you know , doop , doop , doop , doop , doop , and then run thi each time .
and so out of that come <num> , <num> , <num> , <num> , <num> , and then the loop is done .
python is do all the tricki bit here , python's figur all these thing out for us and handl all thi , and then we're done .
and so it's , it's , if you look at it , we have an iter variabl , but we didn't have to increment it , we didn't have to do anyth .
python took care of a lot of thing for us .
and so when we're loop through a known list of thing , or later when we read a file , we're go to loop through the line in the file .
and so the for loop is a realli nice power .
and it's syntact cleaner , it's realli quit nice .
now it's import to realiz that you don't have to just loop through number .
i did that on with the set of descend number , so that it wa equival to the while loop that i start at the begin .
but thi is a loop where what it's go to loop through is a list .
close squar bracket ar a list in python .
thi is a list of three string , joseph , glenn , and salli .
thei're string constant , and then comma ar how we make list .
and so friend is a mnemon variabl .
python doesn't know anyth about friend in particular , but i've chosen thi variabl name to be friend .
and it's a list of three peopl , joseph , glenn , and salli .
and so i have an iter variabl call friend .
and i'm go to loop through the set of friend .
now python doesn't know anyth about singular .
python doesn't know anyth about plural .
i'm just choos these variabl name becaus it make a lot of sens .
thi is a set of friend .
becaus it ha three of them in it .
and thi is a singl friend .
what it's realli go to do is friend is go to take on the success of valu joseph , glenn , and salli , and thi littl block of code is go to onc for each of those three item in the set , and the variabl friend is go to take on the success valu of that set .
so out of thi come three line of printout .
happi new year joseph , happi new year glenn , happi new year salli .
of cours thi is the i bit right down here , but we just made it so , hei python , look , how ever mani friend thei ar , run thi code on time for each on , chang thi variabl friend to be each of the success on in order , and then we print that we're done .
okai ?
so the for loop .
sort of if we go and try to make a pictur of the for loop .
the for loop is kind of a power thing .
it's doe , it doe two thing .
it decid if we're done or not .
do we keep go in the loop ?
or , well i mean as long as we keep go , we're go to advanc the i valu , the iter variabl .
it take care of the respons of chang the iter variabl .
we do not have to add line of code in that chang the iter variabl , okai ?
and so if we take a look , you know , we come in .
ar we done ?
we're not done .
set i to the right thing , then print it .
out come <num> .
advanc i , advanc i , print it .
advanc it .
print it .
advanc it .
print it .
oh , now we're done .
right ?
i wa not the thing that decid when we were done .
the for loop just keep track intern as i move through these thing and it goe like oh , i'm all done .
i'll take care of that , you finish .
so it doesn't , there's no if in here , so it's not like like if i equal <num> , stop .
no , no , no , it just sai you told me to do five thing .
i'm go to do five thing and then we're go to stop .
and so again the for loop , the for loop here ha got sort of two function .
it decid how long the loop is go to run , and chang the iter variabl base on what you've told it to , in thi in claus .
okai ?
so i think in is a real eleg construct .
it's just a keyword , but it's sort of , if you think about math , if you're familiar with set , it's like someth insid of a set of someth .
i think it's a real pretti wai to think about it .
and you can kind of think of it a littl more abstractli .
that you sai , well here's a littl indent block of code .
right ?
and i want it to run some number of time for each of the i valu in the set <num> , <num> , <num> , <num> , <num> .
that's how i kind of think of it .
so i think that thi is a real pretti syntax .
differ languag have differ loop syntax .
i think thi is realli a veri express , veri pretti on .
yeah .
so anoth wai to , so , so , so on wai to think about thi pictur is that , you know , the for loop caus sort of repeat execut in that we're drive in the circl and then we stop , right ?
the other wai to think about is to , to not , to think about a littl more abstractli , right ?
to sai , hmm , you know , at the end of the dai , all i'm realli tell python is , i want to execut thi block of code five time , then i want the variabl i to chang from , to these three valu .
so in a wai , you could think of thi as expand is the for loop set it to <num> , then run your code .
the for loop then set it to <num> , run your code .
the for loop set it to <num> , run your code .
for loop set it to <num> , run your code .
set it to <num> , run your code .
these two wai of look at it ar the same from your perspect , becaus you're just ask python to do someth .
whether it doe it thi wai , or whether it doe it thi wai , you hardli can tell the differ .
it's probabl go to do it thi wai .
but logic it's not that differ .
it's not differ from do it thi wai .
you're sai , run thi block of code , chang i in the follow wai .
cool .
it's like , we don't have to worri .
i mean , we can us , mental , either model of what's go on insid , becaus it doesn't matter , becaus thei're the same .
okai , so these definit loop ar realli cool .
start in a coupl of chapter we'll mostli us definit loop to go through list or dictionari or tupl or file .
and so that's a finit set of thing .
it can be a larg set of thing , but it's a finit set of thing .
loop idiom ar how we construct loop .
and we're go to , the loop kind of have some kind of a goal in mind .
find the largest , we plai with that .
find the smallest , count the number of thing , look for line that start with pound sign , someth like that .
thei , thei have a kind of a high level view of what thei're suppos to do , and then we have to kind of build a loop to accomplish that .
and and thi goe back to how we have to think like a comput , right ?
we have to sai , hei comput , do thi over and over and over again , and then i'll get what i want onc you've done that over and over again .
you have to do someth a million time .
i'm not go to sit here and wait .
at the end , i'll get what i want .
so i call these kind of smart loop , or how to kind of build intellig into loop .
so , for exampl , we want the largest number .
right ?
but we have to construct a loop that will get us the largest number think like a comput .
okai ?
think computation .
think like a comput .
so the idea is that we have some kind of a loop and we're go to go through thi list , some list of thing , and thi is go to run a bunch of time .
and , but the wai we're go to do it is we're go to set someth up befor the loop start .
we're go to do someth to each of the thing that's be look at , and at the end , we're go to get the result we're look for .
okai ?
and so in the middl it's kind of like work .
it's in the middl work , da , da , da , da , da .
and then here is the payoff .
the payoff is at the end when we get the inform that we're interest in .
so i will sort of us in the next few exampl thi simpl loop , and right now it doesn't do much .
it doe a print befor and it ha thi variabl thing that goe through the success valu of these number .
and it print it out , right ?
so that middl part sai run thi six time , onc for each of those valu .
and then after .
okai ?
and so we will add some intellig at the begin , we'll add some intellig in the middl , and we'll add some intellig at the end .
and then the whole thing will accomplish what we want .
right now thi is kind of not that intellig .
so now what i want to do , is i want to review the thing we did , and i want you to rememb what the largest number is , and i'm go to show you a sequenc of number in order .
readi ?
on , i'll do it kind of quickli , becaus you've seen thi befor .
so , i'm onli show you on number at a time .
so you want to tell me what the largest number is .
so here we go .
the first number is <num> .
the second number is <num> .
the third number is <num> .
the fourth number is <num> .
the fifth number is <num> .
and the sixth number is <num> .
so what wa the largest number ?
did you have to go back ?
or did you rememb how to do it ?
okai , well , i will give you a clue .
it wa <num> .
okai ?
that's becaus i know .
okai , now if you did that and you had to do that for <num> or <num> number , you'd have to creat a mental algorithm in your head to approach it and stai concentr , focus .
so , you would've creat a variabl in your head call largest_so_far .
i would show you the first number , which would be <num> , and you would go hmm .
well , <num> is larger than <num> , neg <num> .
so i will keep that .
that's the new largest i've seen so far .
that's pretti awesom , becaus it's wai better than neg <num> .
<num> ?
i thought <num> wa good .
but <num> , that is a lot better .
so i'm go to keep that on .
that's the , that's the best .
it's the largest we've seen so far .
we've onli seen two number .
but the best we've so far is <num> .
so <num> is not larger .
who , who care about that ?
it's not as big as <num> so we'll just go right on to the next , on to the next .
<num> , that's lame when we ar look for larg number .
so we skip , oh , <num> .
<num> , that's a rockingli larg number .
so we're go to , that's a lot .
that's actual the largest we've seen so far becaus it's bigger than <num> , and <num> wa the former champion largest we've seen so far .
and there's <num> , so we keep that on .
i don't know how mani letter , of these thing you're go to see , right ?
we could see lot of them .
but the next on we see <num> .
well , that's no good .
we've got <num> alreadi .
<num>'s like total awesom .
right ?
so now , oh , we're done .
so , hei , we're done and so <num> is the champion .
that is the largest .
it's not even the largest so far ani more , it's actual the largest .
it's the largest .
so again , we had thi thing at the top , we had thi loop in the middl , and at the bottom is where you kind of get the payoff .
and the payoff is not in the middl .
while we're largest so far , largest so far , largest so far , but at the end it turn out onc you've look at all the variabl , all the valu , the largest so far is inde the largest .
okai .
so here's the algorithm for thi .
i have some variabl , and rememb that underscor ar valid charact in variabl .
now i'm be a littl over explicit in thi .
so i have a variabl call largest_so_far .
then what i do is i set it to <num> , neg <num> .
then i print befor so we can see that largest_so_far is neg <num> .
then we have a for loop and my variabl iter variabl is the_num .
so that's go to take on the success valu <num> , <num> , <num> , <num> , <num> , <num> , and run thi indent loop of code , okai ?
and so the_num will be <num> , first time through .
if the_num , <num> , is greater than largest_so_far , then grab the_num and assign it into largest_so_far .
then print at the end of each loop , largest_so_far and the_num .
so , so , in effect , the_num is <num> .
we compar it to neg <num> , and neg <num> , <num> is higher .
so we make largest_so_far be <num> .
next time through the loop , next time through the loop , num is <num> .
so we compar largest_so_far with <num> , and we like it , so we store it .
so we like it , we run it , and we print our <num> is the largest we've seen so far .
and we run again .
we come in , the_num now point to <num> .
the_num , <num> , is not greater than <num> , and so we skip .
so , the largest so far stai <num> , and we see <num> .
similarli , the_num advanc to <num> .
we skip .
so we saw <num> , but the largest so far is still <num> .
continu , the_num is now <num> .
it run , <num> is greater than <num> , and so we run thi code .
and so we sai <num> is stuck in largest_so_far , and inde , then we print it out , and largest so far is now <num> .
we continu on .
we go up on more time .
the_num point to <num> , but <num> is not larger than <num> .
and so we skip .
we print out <num> and <num> , and then we come out and at the end , at the end , we get the largest so far .
it , the name no matter , no longer , i mean it's kind of the largest so far at the end is the largest , but the variabl name .
okai ?
got it ?
that's on idiom .
so let's just switch to anoth idiom .
now count , how mani thing ar we go to , how mani time is loop go to execut ?
how thing ar we go to find in the loop ?
it's all kind of the same notion .
and the pattern is realli simpl .
we start some variabl zork .
a better name for thi would be count .
but i want to call it zork .
and then we have a loop , and then in the loop we just add <num> to zork , and at the end , zork .
that should be light blue right there .
zork should be the total count .
now of cours we can look at it and sai it's go to be <num> , but assum thi loop is loop through a million line in the file or someth like that .
so it's , so it's cheat to kind of look at it and sai , ooh , it's <num> , becaus we want to actual comput it .
so it's realli simpl .
you know , zork start at <num> .
it's go to run zork is <num> now , and <num> , <num> , <num> , <num> , <num> , and then we've run out of stuff and then we print out <num> .
okai ?
so that's kind of the idiom , right ?
befor , dure , and after , right ?
we do someth befor , we do someth dure , and , and in a sens thi zork here is the number we've seen so far .
and at the end it becom kind of the total number .
sum in a loop , veri similar .
again , you have to think of thi is , there is a whole bunch of variabl here .
we start a variabl at <num> .
each time through the loop , we add whatev it is that we're see .
instead of ad <num> we're ad <num> , <num> , <num> , <num> , <num> , <num> .
and zork would be best thought of as run total .
so , zork is the run total .
and so if we look at the number <num> , run total's <num> , run total's <num> , run total's <num> , <num> , <num> , <num> .
and then we skip out and at the end , the run total becom the total .
okai ?
so , that's anoth of these pattern that , sort of , we do someth at the begin , we do someth in the middl , and we have someth veri nice for ourselv at the end .
find the averag of a sequenc of valu is the combin of the two previou pattern .
thi time i am go to us more mnemon variabl .
a variabl call count .
everyon call thi count .
sum , now total would mayb be a better word for thi .
the run total .
and then , so the count and the sum start out at <num> , and then each time through the loop , count equal count plu <num> , so we're ad <num> to count .
sum equal sum plu valu , so we're ad <num> to to sum .
i mean ad the valu .
valu of cours be <num> , <num> , <num> , <num> , <num> , <num> .
and then at the veri end we can print out the number .
we have six thing with a total of <num> , and then we calcul the averag .
of cours these ar integ number , and so thi is a truncat divis .
so <num> over <num> equal <num> and not <num> point someth .
in python <num> , python <num> , it'd be better .
but so the averag , the integ averag is of the number we just look at , is <num> .
so sometim we're search , like for a needl in a haystack .
look for someth and again you have to think of like you're hand some amount of data and you gotta hunt for someth .
and there might be a million thing and you might onli want five of them .
and you can either look by hand or you can write a loop that's got an if statement that sai found it .
mayb i found it at line seven or found it wherev .
so thi is filter or find or search , look for a needl in a haystack , in a loop .
and so the , the idea basic is that we have thi loop , it's go to go through all the valu , <num> , <num> , <num> , <num> , <num> .
but we put in the loop , we emb an if statement .
if the valu we're look at is greater than <num> , print i found it .
so when valu is <num> , thi is go to do noth and just go and make valu be <num> .
and then valu <num> , oop , yep , there we go , print larg number , so off thi come .
then valu becom <num> , noth happen , valu becom <num> , noth happen , valu becom <num> , oop , thi time it's go to happen .
so out come larg number <num> .
then valu becom <num> , noth happen , and then valu is all done , and so it come and finish .
so thi is the search or filter or catch or , or whatev .
okai ?
we can also sort of , if we don't just want to print everyth out , we want to sai is someth in there .
go look through thi million thing and tell me if blah exist .
and in thi we're go to introduc the notion of boolean variabl .
a boolean is a true fals .
it onli ha two valu and we've alreadi us it in the while true .
so that capit true , that is a constant , just like <num> or <num> or <num> , or sam .
and so we're go to make thi variabl call found .
now found is a mnemon valu , variabl .
it's just a name i pick .
so found equal fals .
thi is go to be fals , until we find what we're look for and then it's go to switch to true .
so it start out and it's fals .
then we're go to run thi bit of code three time .
and if the valu that we ar look at is <num> , then we're go to set found to be true , and we'll print found valu each time through .
so valu's go to take on <num> , <num> , <num> , <num> , <num> , so we get a line of output for each on .
and the first time through it's not yet found , becaus we're look at a <num> .
second time , it's not yet found .
we look at <num> , still fals .
so it could stai fals for long time .
oh , we found a true .
and then that mean that thi code is go to run onc .
and so you can kind of think of thi found variabl as sticki .
it's go to stai fals , and then the rest of the loop it's go to stai true , and at the end it is true .
now the wai we usual do these kind of thing is we don't bother with thi print statement , so we wouldn't see all thi stuff .
all we'd see is befor fals , after true .
and after would just tell us that yeah , we found it .
there wa a <num> somewher in that long list of number .
okai ?
i am just ad thi print statement so we can kind of trace it .
but basic thi loop , sort of from here to here , is ask the question , is there the number <num> in the list that we're about to go through ?
okai ?
now . . .
how could , i'll just give you a second and ask you a quick question .
you can paus if you want .
how could you improv thi loop us the break ?
where might you put a break to make thi loop smarter ?
it's okai if you didn't , if it doesn't jump out at you .
so , if you think about it .
onc you hit true , there's realli littl point in look at the rest of them .
there just is no point .
so we could put a break right here .
insid thi block .
you'd sai , look , i'm look for a <num> .
all i care is whether i found it or not .
if i find it , i mark it to true that i found it , and i get out of the loop .
why bother ?
why do all these thing ?
right , just get out .
okai ?
so don't worri about it .
i'm just point that out , that's on of the place where break could be us .
the loop function either wai it just , it just look through all the rest of them as well .
okai .
so .
here's thi largest valu on i've us befor and you know , awai we go .
we , you know , we have largest_so_far , we check to see if the on we're look at is better and if it is we keep it and then awai we go and we find that the largest is <num> .
what if . . .
what would you have to chang in thi code to make thi search for the smallest of all the valu ?
like point , point where in the screen .
where , what would you have to chang to make thi look for the smallest in the list of valu ?
what is the natur of what's make thi about be largest ?
what would you chang ?
okai .
paus if you like .
so here is some thing that you might do to make it work about the smallest .
so , hei , on thing we would do .
let's chang the name of the variabl .
we had a variabl name largest_so_far .
and now we'll chang it to be call smallest_so_far .
chang the variabl name doesn't chang the program at all .
but it make the program easier to read .
if the program work .
so , it's like smallest so far .
okai , but that didn't make it about be small .
the thing that made it about be small is chang thi greater than to a less than .
becaus we're kind of think when we're do largest so far , if the number we're look at is bigger than the largest so far , we keep it .
if the number we're look at in the smallest is smaller than the smallest so far , then we want to keep it .
so thi is like , thi line here is the keep line and thi is the when line .
when to keep .
we'll keep it if it's smaller .
okai ?
so that's the kei , and so yeah , so i name it smallest_so_far , whoop de do .
that's good .
but the real thing that had thi be about larg and small wa whether thi , thi less than and greater than and thi wa the repeat code that got re check over and over again .
so , but thi still ha a bug in it .
so let's run thi visual .
okai .
so now we've got a variabl call smallest so far .
we ar go to check to see if a seri of number that i'm about to show you ar smaller than the smallest so far .
so the first number is <num> .
is that smaller than neg <num> ?
no , it's not .
neg <num> is smaller .
the second number is <num> .
is that smaller than neg <num> ?
no , it is not .
the next number is <num> .
is that smaller than neg <num> ?
no .
neg <num> is smaller than <num> .
<num> ?
no , not smaller .
<num> ?
no , not smaller .
<num> ?
not smaller .
so , we're all done .
yai , and the smallest number we saw in the list is . . .
neg <num> ?
neg <num> wasn't even in the list .
so that's not a veri good program .
so let's take a look at what went wrong with thi program .
so we fix it , we fix it as best we could .
right ?
we made it , we chang the word largest to smallest and yai , that'll fix .
just make it more readabl , doesn't actual chang the program .
and we made thi less than , so now what happen is it come in , if <num> is less than neg <num> , smallest so far of cours is neg <num> .
it , thi just never run .
thi never run .
and so as we print , smallest_so_far stai neg <num> and oop , that should be neg <num> , right there .
i'm sorri , i forgot to fix that .
here , let me magic fix that .
boom .
so let's take a look at what went wrong with thi .
so here we have the code .
smallest_so_far is neg <num> .
we have it fix so we're check , look for smaller number rather than larger number , by turn thi to less than .
but the first time through , smallest_so_far is neg <num> and the_num is <num> .
<num> is not less than neg <num> , so we skip through and the printout of the first line is neg <num> <num> .
and it doesn't take long to realiz that it's just go to keep do thi .
smallest_so_far is go to stai neg <num> , no matter what we look at on thi side .
and then we're go to come out at the end .
and we end up with neg <num> as the answer .
not veri good .
so the question is . . .
what should we make thi valu be ?
neg <num> ?
it bare work in the largest becaus we were work with posit number and so start with neg <num> as the largest so far wa a reason assumpt as long as the number were all posit .
but what would be the number to choos here ?
think about that for a second .
paus if you have to .
let me clear it .
let me make it real clear .
what's the right thing to put here ?
okai .
so , what ?
a million ?
that might work , a million might work .
but what if thi number , you know , wa , you know , what if , what if all these number were larger than a million , okai ?
then , then that wouldn't work .
so the problem is there's no real good valu , unless you could make thi be somehow infin , okai ?
you could make thi be infin .
but there is a wai to do thi in python .
and it's a realli kind of cool techniqu .
it's sort of a wai we signal ourselv , and that is we're go to us a special valu .
not neg <num> .
it's not a number .
and the special valu we're go to us is none .
it's a differ type .
it's not a number , it's itself it own type .
so what we're go to do is mark smallest as none .
and , and , and sort of at a high level what we're realli sai is we haven't seen anyth so far .
the smallest we've seen so far is none .
we've not seen anyth so far .
now we have to chang our loop , our littl if insid the loop .
thi is thi intellig in the middl .
first we sai if smallest is none .
is is an oper , part of the python languag .
if smallest is none , exactli the same as none , then the smallest we've seen so far is the valu .
now thi is go to happen the first time becaus smallest start out none and then as soon as we set smallest to the valu , it's go to be that first number , so it's go to be <num> .
okai ?
so the smallest is quickli go to becom <num> .
then we print out the new , the smallest is <num> after we've seen the <num> .
then we go up to the top and we sai , is smallest none ?
and the answer is no it is not , becaus smallest is now <num> .
then thi els if is go to ask , is the valu we're look at , which is <num> , is the valu less than smallest ?
well , no , it is not .
<num> is smaller than <num> .
and , so in a sens , after the first time it's execut , after the first time the statement is execut , thi is go to alwai be fals , right ?
becaus smallest is no longer <num> and thi is go to be the thing that realli is oper .
and then it's go to work .
and when we , you know , smallest will becom <num> .
the smallest so far is <num> , but then we see the <num> final , and the valu of the <num> is less than <num> .
and so then we take <num> and we stick it into smallest and we end up with thi , and then the loop run some more time , and when we're all done we have <num> .
so the trick here is we put thi none in , and we have a littl more if code to check to see if we haven't seen anyth so far .
thi is what , you can think of thi as a wai to trigger on the first , first iter .
special code that's realli go to , it could , it look at it on each iter , but it's never true after the first iter .
okai ?
so that's just a techniqu .
so thi is and the is not oper , i think it's a real eleg thing .
don't start overus it .
it's , at a low level it real mean is exactli the same as in type and valu .
there's an is and there's an is not , but don't , like , sai , like , if , don't do thing like sai if i equal .
oop .
i won't even let myself type the bad code .
if i is <num> .
don't sai that , okai ?
don't sai that .
don't do if i is <num> .
it mai work in certain situat .
it's realli best us in veri limit situat where you're check for some of these special valu like none and fals .
okai .
the problem is if you us equal here , it tri to kind of convert valu and it mai end up give you a fals ye .
and so is is a stronger equal than simpl equal .
equal is same valu , same numer valu , wherea is is exactli the same thing .
but don't , don't overus is .
us doubl equal <num> of the time and us is when you're check if it's on of these special constant like true or fals .
okai ?
okai .
so thi is a iter .
i mean our loop ar go to get more sophist and we have more interest thing to do , but we , you know , we talk about some indefinit loop , definit loop , iter variabl .
some pattern like maximum , minimum , sum , averag , you know .
we introduc the concept of none , you know , and , and so thi is .
we're get there , we've got a coupl more chapter befor we realli start hit the data analysi , so see you in the next lectur .
hello , and welcom to yet anoth work exercis for python for informat explor inform .
i'm your exercis worker charl sever , i'm the author of the book .
and as alwai , thi materi , as well as the book itself , is creativ common attribut .
so thi exercis assum that you sort of know how to edit file and have thing set up .
if you if you need more help , go with www . pythonlearn . com and go through the instal process .
so the exercis we're contempl right now is exercis <num> .
we're go to read a list of number .
and deal with some bad data and ultim comput the averag and finish when we're done .
and so , we're go to , we're go to do thi stepwis like we alwai do .
we're not just go to write thi and try to , you know , imagin what the ultim thing is .
so the first thing that i'm go to try to , to write , is .
so the first thing i'm go to try to write is entr , enter a number , convert the number to a float point , and then print it out , just for you .
so go ahead and get start on that .
keep the copi that .
i've got a nice copi on paper here .
i'll refer back to my specif .
so here i have textwrangl up .
i will go , go into my desktop , i got thi folder call python for informat here .
so i go on to my desktop , desktop , cd python for informat .
i'll to do an ls , and here's the , some of the other exercis that i plai with befor .
so i'm go to make a new file .
i'll just sai print hello .
just yeah , i don't know , i alwai start thi wai .
that's how i do it .
save as .
i'm just make sure i'm alreadi in that , so i come in the right folder .
and i'll call thi on numlist .
dot p y if all goe well , you'll notic now it ha the python suffix , it's properli color , and son of a gun if i'm not in the correct directori .
so let's go ahead and run thi thing numlist . py , hello .
so it's good stuff .
i'll make thi a littl smaller .
so there we go .
so let's get start .
so instead of sai hello , i'm go to just sai i'm go to get a string variabl , in and sai raw input , enter a number , colon .
then i'm go to add a space just to make it look a littl prettier .
then i'm go to convert that to a float point number .
i'll call thi thing num .
and i'll call float , becaus inp is a string .
and i want an integ number , float point number so i can add them up .
and i'm just go to print num out , just to sort of be cool .
so i'm go to , on my mac i can us a command s instead of all the clicki stuff .
so command s .
now i'm in my termin .
i hit up arrow , so i can run it again .
enter a number , <num> .
that's look pretti good .
enter a number .
that's look pretti bad , but frankli that's expect , exactli what we would expect .
if we're go to type garbag in , we're go to get a traceback .
we'll deal with that in a minut .
okai , so .
so it look like that part's pretti cool .
so our problem now is we want to take thi no , let's , let's put that back in .
let's put thi , let's put thi in a loop .
so how do we make a loop ?
well , i'll just make an infinit loop for now , and i'm go to indent these four space .
make sure you have space turn , i mean tab turn into space and it will all just be , and so i'm go to write thi loop .
right now we're write an infinit loop becaus it's alwai go to be true .
so let's go ahead and save thi on .
python numlist . py .
<num> <num> <num> ; <num> <num> <num> , that's anoth number .
now we're suppos to be abl type done .
well , our program end becaus the float crash , right ?
the float crash on line three .
and so at least we kill our program .
becaus we were in an infinit loop .
it would have been prompt us for number forev , it would have never been done .
so the next thing we're go to need to do is , we're go to need to get out of the loop .
okai ?
so i'm go to , i'm go to get out of the loop by check to see if inp is equal to done , break .
so all that just basic sai if the input the user type , i'm go to break out .
so let's run thi again .
<num> , done .
now at least it run and it , it get out of the of the loop .
the break come down to here .
that much is pretti good .
let me add a quick featur here that's not in the specif list .
we'll see if we get in troubl for thi on .
i'm go to sai if len of inp less than on , break .
thi is actual kind of an idiom in here .
check for empti line .
it's a bit of an idiom .
so , so basic , mayb the poor user would not think to type done , becaus thei didn't read the specif .
so we'll save that on .
and you will see now that i can just hit enter kei , and it see that as done as well .
that's probabl a more clever wai to do it , and a more user friendli wai to do it .
or mayb it's a violat of specif , but we're just go to treat that as we'll leav it in there for now .
but that's kind of python idiom , that you know , end on a empti line .
just becaus it's natur for the user to just hit enter , and think is thi thing is go to stop ?
okai .
so now our problem is , is we've got to count these thing .
so we've got thi loop bodi , and it's run a bunch of time .
and we want to count how mani time it run .
so we'll make a variabl call count , set it to zero .
and then each time we come through we're go to add count equal count plu <num> .
now , oop .
now , i did not put the count here .
and that's becaus i onli want to count the number that i've actual read .
so i'm , i've read a number .
becaus if i , if i increment my count here and i break , it'll be on too mani .
well let's just go ahead and do that .
just sai count equal and make that mistak .
right ?
so i'm go to , go to get rid of thi , and i'll put it here .
exactli where i sai don't count here .
right ?
so i'm go to count here , and thi is a bad place to count .
so i'm go to save that , and thi loop is go to go until it's done and then it's go to print out how mani number we've got .
so you see here , it's got a mistak .
it's not a syntax error , it's a logic error .
becaus we've got thr count up to <num> , but that's becaus the last time through the code , you know , count wa zero .
we read a number , we ad on to the count .
we read anoth number , ad on to the count .
and then we read anoth bad number , we ad a number to the count , and then we end up with thi break .
so the count is wrong , basic .
okai ?
and so , the kei is that we've got to move we've got to move the count down .
we onli want to count the valid data , we don't want to count invalid data .
so what we were do is we were count the last non data bit .
and so it's just , that's just , you know , anoth thing to look for .
you know , the , the pattern here is , you know , read your data , decid if you've got bad data or good data , or you want to stop , or whatev .
and then do the work .
so i'll put a comment in here call do , oop , do the work .
so thi is the work , and thi is kind of handl the edg case .
right ?
and thi is get the data , handl the edg case , then do the work .
and increment count is just part of the work .
okai ?
so let's keep go .
now we've gotta make our , our averag .
so averag of cours be the total .
and that's pretti easi , becaus we're go to sai total equal total plu num .
simpl enough ?
so i'm go to print out num , total , and count .
okai ?
so we'll .
so now <num> , <num> .
so you see our number is <num> , our total is <num> , and our count's <num> .
number's <num> , total <num> , count of <num> .
look pretti good .
let's just hit enter , and the count is <num> .
so the onli , so we got count .
so , let's chang thi to be what we're suppos to chang it to .
sai averag .
colon , then no space , becaus the comma add a space , and we're go to just sai total over count .
so let's run that .
run <num> , <num> , <num> .
so our number ar work .
so we're get pretti close .
we realli have on more problem to solv and that is that problem .
the problem when we have crappi data .
and we don't want to us traceback as our mechan , we just want to re prompt the user .
so the kei thing when you're deal with thi is , the first thing to take a look at is the actual line in question .
the line that caus the error , line that caus the error is line <num> , and it's thi line right here .
so , we can't control what the user type .
the simplest thing to do is to us the try except to put , take out some insur on thi particular line .
it's like , that's a danger line .
and then except tell us what to do .
so now the question is , well let's put out a print statement .
all right .
and print what we're suppos to sai .
invalid input .
okai ?
so here we go .
we've got invalid input , and so we've got an except .
you know , i've made a mistak on purpos .
you can paus and try to figur out what the mistak is , but .
okai , you got your chanc to paus , so let's go take a look at what the mistak is .
let's come up with some evil data that caus the problem .
so <num> is our first number .
<num> is our second number .
and now i'm go to sai fred .
so now you should be abl to see what's wrong here .
the problem is that basic fred inde sai invalid input .
that work becaus it run down thi line of code and it sai invalid input .
the problem is , it's still execut thi code right here .
so , the number actual the float fail .
we said fred but the number's <num> and that's becaus it's <num> from the last time through the loop .
the last time through the loop , okai ?
so it end up ad <num> again , <num> , then we have three number and then we finish , oop , that wa in the wrong window there , and then when we finish , the averag is not <num> , which is <num> plu <num> , but it is inde <num> .
so the problem is when we have thi except , we can't run thi code .
and of cours there's a love , love bit of python to fix thi , solv thi for us .
and that is the continu statement .
continu statement sai , i'm done with thi iter .
you enter a number .
it's crappi , i'm just not go to do anyth .
so effect instead of go down here to continu , it goe up to here and prompt for the next on .
so it doesn't do thi code , right ?
it doe not do that code , and everyth is cool .
and so that's the kei .
when we sai invalid input , we do not want to run thi code .
oop so let's save thi .
so continu's our friend on thi on .
so <num> , <num> .
i'm do these just so i can know the averag should be <num> .
and then fred .
now you'll notic it sai invalid input , but becaus of continu , it doesn't fall through and do all the rest of that stuff .
and then let's hit enter to finish and the averag is inde <num> .
okai ?
so again , i think that's pretti much it .
thank for listen .
for more inform python for informat , www . py4inf . com .
thank .
hello , and welcom to chapter six .
thi chapter we're go to talk about string , and stuff is go to start to get real now .
so , as alwai , thi materi , thi video , these slide and book ar copyright creativ common attribut .
i want you to us these materi .
i want you to , somebodi els , i want to make more teacher , so everyon can teach thi stuff .
us it howev you like .
okai , so we've been plai with string from the begin .
i mean , liter , if we didn't work with string , we could've never print hello world .
and , and lord know , we need to print hello world in a program languag .
and so , we've been us them , especi constant .
now , in thi chapter , we're go to dig in .
so , oop , so a string is a sequenc of charact .
you can us either us singl quot or doubl quot in python to delimit a string .
and so here's two string constant , hello and there , and stuck into the variabl str1 and str2 .
we can concaten them togeth with a plu sign .
python is smart enough to look and sai , oh , those ar string , i know what to do with those .
and you'll notic that the plu doesn't add ani space here , becaus when we print bob out , hello and there ar right next to on anoth .
if , for exampl , we've done some convers , so when we were , like , read pai , and rate , and hour , and stuff , we've done some convers .
so thi is an exampl of the , a string <num> <num> <num> not <num> , but the string , quot <num> <num> <num> quot .
and we can't add <num> to thi , we get a traceback , kind of , at thi point , as we expect .
and we would convert that to an integ us the int function that's built in .
see how much python you alreadi know ?
i mean , thi is awesom , right ?
i can just sai , oh , you call the int function , and you know what that is .
that's , sorri , sorri , i'm just awesom out .
so you convert thi to an integ , and then you add <num> to it , and then we get <num> .
so , there you go .
we've been do string all along , had to .
i mean , liter , string and numer data ar the two thing that program deal with .
so , we've been read and convert .
again , thi is sort of a pattern from some of the earlier program where we do a raw input , you know ?
and the raw input just take a string and put it in a variabl .
so if i take chuck , then the variabl contain the string c h u c k .
even if we type number , that is a string .
we can't , just becaus i put <num> <num> <num> in , i still can't subtract <num> .
we get a happi littl traceback , oh , happi littl , sad face traceback .
and , and , but of cours , if we convert it into float or someth like that .
we convert int or float , we can do that and subtract <num> , and we can do that .
so , so we've been do thi for a while .
we've been do string and manipul string and convert string all along .
so the thing we're go to start do now is we're go to dive into string .
we realiz that string ar address at a charact by charact basi , and we can do all kind of cool thing with that .
and so , a string is a sequenc of charact , and we can look insid them us what we call the index oper , the squar bracket .
and we've seen squar bracket in list , and you'll see that there's sort of similar between list of number , and , in effect , a string is a special kind of list of charact .
so if we take thi string banana , the string banana start , the first charact start at <num> .
so , we call thi oper sub , so letter equal fruit sub <num> and that is the second charact .
now thi mai seem a littl weird that the first charact is a <num> and the second charact is a <num> .
it actual is kind of similar to the old elev thing , where in europ thei're call , the first floor is zero , then neg on , and the second floor is on , right ?
it's kind of the same thing .
actual , it turn out that intern zero wa a better wai to start than on .
it , you'll get us to it and then after a while there's some littl cool advantag to it , but for now , begin is zero .
just , begin is zero , it is the rule , just rememb it .
okai , so the <num> is b , the <num> is a , the <num> is n , et cetera , et cetera .
and we call thi syntax fruit sub <num> , okai ?
so that is the sub <num> charact of fruit , and then that is an a .
so that fruit sub <num> sai , look up in banana , find the <num> posit , and give me what's in that <num> posit , that's what's the sub .
and what's insid these bracket can be an express .
so if we set n to <num> , n minu <num> , well that'll comput to <num> .
and then fruit sub <num> is the letter n , right ?
so that's fruit sub <num> , okai ?
it's the third charact , fruit sub <num> .
so the index start at <num> , the , we read the bracket as sub , fruit sub <num> , fruit sub <num> .
now , python will complain to you if you us thi sub oper too far down the string .
here is a charact with <num> , which is <num> , <num> , and <num> .
and if we go to sub <num> , it blow up .
now , you know , by now i hope that you're not freak out about traceback error .
rememb , traceback error ar just python try to inform you .
and if we just stop look at that as mean python face , and instead look at that as , oh , index error , string index out of rang .
oh yeah , i stuck a five in there and there's onli three , oh , my bad , thank you , python , appreci it , thank for the help .
so , think of thi as like , it's not a smilei face but it's kind of like a , a quizzic face , right , it's like i don't know .
python's confus and it's try to tell you what it's confus , okai ?
so don't look at these as sad face .
python doesn't hate you , python love you .
and love me too .
so , string have individu charact that we can address with the index oper .
thei also have length .
and there is a built in function call len , that we can call and pass in as a paramet the variabl or a constant , and it will tell us how mani charact .
now thi banana ha six charact in it that ar <num> through <num> .
so don't get a littl confus , the last charact is the fifth , is sub <num> , but it's also the sixth charact .
so the length is realli the length , it's not length minu <num> , okai ?
so len is like a built in function .
it's not a function we have to write , as we talk in chapter the function chapter .
there ar thing that ar part of python that ar just sit there .
and so we ar pass banana , the variabl fruit , into function , we're pass it into function .
and then , into the len function .
then len doe magic stuff .
and then out come the answer .
and that <num> replac thi and then the <num> goe into the variabl x , and so x is <num> .
i sure made that a messi look slide .
and so , think of insid the len function , there's a def .
len take a paramet , doe some loopi thing , and it doe it thing .
so , it's a function that we might write except we don't have to becaus it's alreadi written and built in to python .
okai .
so that's the length of the string , that's get it individu charact .
we can also loop through string .
obvious , if we can us the index oper , and we can put a variabl in there , we can write a loop .
thi is an indefinit loop .
so we have thi variabl fruit , ha the string banana in it .
we set the variabl index to <num> .
we make a littl while loop .
and we ask , as long as index is less than the length of fruit .
now rememb , the length of fruit is go to be <num> .
but we don't want to make that less than or equal to becaus then we would crash , becaus the last charact is <num> .
we can sai letter is equal to fruit sub index , so that's go to start out be index of , is go to be <num> , so that's fruit sub <num> .
then we print index and letter , so that mean the first time through the loop we're go to see <num> b .
then we increment our iter oper , and go up .
and then we come out with <num> a .
and index advanc until index is <num> , but ha print out each of the letter .
now , we're not do thi just to print them out , we will do someth a littl more valuabl , valuabl insid that loop .
but thi give the sens that we can work through a loop just like we , we , we can work through a string just like we work through a list of number , okai ?
now , that wa how you do it with an indefinit loop .
in a definit loop , it's just far more awesom , okai ?
just like we did with the list of number , python understand string and allow us to write for loop , us for and in , that go through the string .
so basic , for letter in fruit , now rememb , i'm us letter as a mnemon variabl here , it's just a choic , a wise choic of a variabl name .
so that sai , run thi littl block of text onc for each letter in the variabl fruit , which mean that letter's go to take on the success b a n a n a .
when i look at that i alwai worri that i misspel it .
i think i got these right .
if i rewrit thi book , i'm not go to us banana as the exampl becaus i'm terrifi that i misspel banana , becaus i don't know how mani n's banana ha in it .
but , be that as it mai , we ar abstract , we ar let python sai , run thi littl block of text onc , in order , for each of the letter in the variabl fruit , which is b a n a , and so it print out each of the letter .
so thi is a much prettier version of the , the loop , so us the definit , the for keyword instead of the while keyword .
and so , we can just kind of compar these two thing .
thei kind of do the exact same thing .
and it also is kind of a , give you a sens of what the for is do for us , right ?
the for is set up thi index , the for is look up insid of fruit , and the for is advanc the index .
so the for's do a bunch of work for us and i've character that , sort of , in the previou lectur .
how the for is sort of do a bunch of thing for us and that's , it allow our code to be more express and , and instead of , so thi is , a lot of thi is just kind of bookkeep crap that we don't realli need .
and so the for loop help us by do some of the bookkeep for us .
okai , so we can do all those loop again .
we can find the largest letter , the smallest letter , the , how mani time .
so , i think , what , how mani n's ar in thi , or how mani a's ar in thi .
so thi is a simpl count pattern and , and a look pattern .
and so , our word is banana , our count is <num> .
for the letter in word , again , boop , boop , boop , boop , boop , that come out like that .
so it's go to run thi littl block .
if the letter is a , add <num> to the count .
so thi is go to basic print out at the end the number of a's in banana .
it would probabl be more us , for me , to print out the number of n's in banana , becaus i never know how mani n's ar in banana .
but it look like there's suppos to be two , or otherwis i have a typo on thi slide .
so the in , again , i , i love the in .
i just absolut love thi in .
i love thi syntax .
thi for each letter in the word banana .
just , to me , it read veri smoothli .
cognit , it fit in my mind what's go on .
for each letter in banana , run thi littl indent block of text .
again , veri pretti , i love in , it's on of my favorit littl piec of python .
so , again , with the for , it take care of all the iter variabl for us , and it goe through the sequenc .
and so here's , here's an anim , right ?
rememb that the for is go to do all thi work for us , right ?
letter is go to advanc through the success valu , the success letter in banana .
so letter is be move for us by the for statement , okai ?
so that's loop through .
now it turn out there's a lot of common thing that we want to do that ar alreadi built into python for us .
clear the screen there .
we call these slice .
so the index oper look up variou thing in a string , but we can also pull substr out , us the colon in addit to the squar bracket .
again , thi is call slice .
so the colon oper , basic , take a start posit , and then an end posit , but the end posit is up to but not includ the second on .
so thi is , it's up to but not includ , up to but not includ .
just like the zero , you get us to it pretti quick , but the first time you see it , it's a littl bit wonki .
so , if we're go <num> through <num> , that's how i read thi print , s sub <num> through <num> , or , or better , better said , s <num> , up to but not includ <num> .
that is , print me out the chunk that is up to , but not includ , <num> .
so , it doesn't includ <num> , and so out come mont , right ?
so the next on is <num> up to but not includ <num> , so it start at <num> , up to but not includ <num> , so out come the p .
and , even though you might expect that it would traceback on thi , python is a littl forgiv .
so here's a moment where python is a littl forgiv , sai , you know , i'll give you a break here .
if you go <num> , but up to , but not includ <num> , i'll just stop at the end of the string .
so it's <num> to the end , so it , it , you can over refer here and you can not , you won't get yourself in troubl .
so that come out , python .
so , again , the second charact is up to but not includ , and that's the , kind of the weird thing there .
of cours onc you rememb that the first charact is <num> , <num> up through but not includ .
nice .
if we leav off the first or the last number , leav off the first number , the last number and both of them , thei mean the begin and end of the string , respect .
and so , up to but not includ <num> is m o .
<num> colon mean start at <num> to the end of the string .
so that's , thon .
and then , that mean the begin to the end , and so it's just the whole string , monti python .
now we've alreadi plai with string concaten , just a thing to emphas here is , the concaten oper doe not add a space , doe not add a space .
if you want a space , you explicitli add it .
so here there's no space in between the o and the t , but here there is a space between the o and the t becaus we explicitli ad it .
so you can concaten more than on thing .
and you add your space as you want , okai ?
anoth thing you can do is you can ask question about a string .
sort of like do a string lookup , us the in oper .
thi is a littl differ than how we us it insid of a for loop .
thi is a logic oper ask a question like less than or greater than or whatev .
so , here's an express .
so fruit is banana , as alwai .
is n in fruit ?
and the answer is ye it is , true .
so thi is a logic oper .
it's a question .
it's a true or fals .
is m in fruit ?
no , fals .
and you can , thi can be a string , not just a singl charact .
is n a n in fruit ?
the answer is true .
and you can put , sort of , you know , if , part of if , et cetera , et cetera .
so , thi is a logic express that can be on an if , you can have a while , et cetera , et cetera , et cetera .
so it's a logic , logic express and it return true or fals .
you can also do comparison .
now , the comparison oper , equal make a lot of sens , less than and greater than depend on the languag that you're us python .
and so , if you're us , like , a latin charact set , then alphabet matter .
you know , the , the wai the latin charact set would do .
but if you're in a differ charact set , python is awar of multipl charact set and will sort string base on the sort algorithm of the particular charact set .
so you can do comparison like equal , less than , and greater than .
and we've seen some of these thing in previou lectur , actual .
we've had to us them .
so in addit , to , sort of , these sort of fundament oper that we can do on string , there's a extens librari of built in capabl in python .
and so the , the wai we see these built in capabl ar thei're , thei're actual sort of built in to string .
so , let's go real slow here .
here we have a variabl call greet and we're stick the string hello bob into it .
now greet is of type string , as a result of thi , and it contain hello bob as it valu .
but we can actual access capabl insid of thi valu .
so we can sai , greet . lower .
thi is call someth that's part of greet itself , it's a part of all string .
the fact that greet contain a string , mean that we can ask for , hei , give me greet , which just give you back what you're look for .
like here , print greet is hello bob .
or you can sai give me greet lower , so thi is give me a lowercas copi .
it doesn't convert it to lowercas .
it give me a lowercas copi of hello bob .
so zap is hello bob , all lowercas .
now , it didn't chang greet , right ?
and , you can even put thi . lower on the end of constant so , why you'd do thi , i don't know , but hi there , with h and t capit , . lower come out as hi there .
so thi bit is part of all string .
both variabl and constant have these string function built into them .
and everi instanc of a string , whether it be a variabl or a constant , ha these capabl .
thei don't modifi it , thei just give you back a copi .
now it turn out there is a , a command insid python call dir , to ask question like hei , well here's , you know , stuff ha got hello world .
we can sai .
redo thi .
come here .
stuff is a string .
we can ask , hei , what ar you ?
i am a string .
dir is anoth built in python that ask the question , hei , what ar all the thing that ar built into thi that i can make us of ?
and here thei ar .
that's kind of a raw dump of them .
you can also go look at the onlin document for python and see at the pyth , oop , at the python websit , you can see a whole bunch of these thing .
and thei have the call sequenc , what the paramet ar , et cetera .
so when you're look these thing up , you can go , go read about them .
here's just a few that i've pull out , capit , which uppercas the first charact , center , endswith , find , there's strip .
so i'll look through a coupl of these , just the kind of thing to be look for .
it'll be a good idea to take a look and read through some of the thing .
here's a coupl that , that we'll probabl be us earli on .
the find function , it's similar to in but it tell you where it find the , the particular thing that it's look for .
and and so we'll put fruit is banana .
and i'm go to sai po , which is go to be an integ variabl , equal fruit . find na .
so what it's sai is , go look insid thi variabl fruit , hunt until you find the first occurr of the string na .
hunt , hunt , hunt , hunt , whoop , got it .
and then return it to me .
so that's go to give me back <num> .
<num> is where it found it , right ?
so , where is it in the string , that's what find doe .
and if you don't find anyth , like you're look for z , no , no , no , i didn't find a z , then it give me back neg <num> .
so just , again , thi is just on of mani built in function in string .
the abil to find a substr , okai ?
or find , yeah , find a charact or string within anoth string .
there's a lower case , there's also an upper case , thi might be better name shout .
upper mean give me an uppercas copi of thi variabl .
so hello bob becom hello bob , and then lower is hello bob , right ?
so these ar both wai to get copi of uppercas and lowercas version .
you might think these ar kind of silli , but on of the thing that you tend to us lower for is if you're do search and you want to ignor case , you convert the whole thing to lowercas , and then you search for a lowercas string .
so you , depend on if you want to ignor case or not .
so that's , that's on of the reason that you have thing like thi .
there is a replac function .
again , it doesn't chang the valu .
greet is go to have hello bob .
and i'm go to sai , greet . replac all occurr of bob with jane .
that give me back a copi , in nstr , sai hello jane .
so , so greet is unchang .
thi replac sai , make a copi and then make that follow edit that you , that , that we've request .
now we can also sai , well , i mean , the replac is go to do all occurr , so greet is still hello bob .
thi is kind of redund here .
i'm just do it so you rememb what it is .
greet is still hello bob .
i put hello bob back in it and replac all the occurr of lowercas o with uppercas x .
and then that happen .
so thi sai , go through the whole string do all those replac , okai ?
now anoth common thing that we're go to have to do is we're go to have to throw awai whitespac .
sometim you have a string that ha charact , blank charact , or other charact , at the begin and the end , nonprint charact , and we can strip them .
and there's three charact , three function that ar built into to python string that do thi for us .
there is lstrip , which strip from the left .
there is rstrip , which strip from the right .
so it throw awai these whitespac , so , hello bob is gone .
i mean , the , so it get rid of these charact .
oop , these ar the on that ar gotten rid of there .
i need an eras .
and then let's us white , and then strip basic , get rid of all the whitespac , both on the left and the right side .
and get rid of that .
so we're go to , we're go to be us these a lot .
it , on of the thing you tend to do in python is clean up data .
sometim if you have space at the begin or the end , you just want to kind of ignor them .
so you strip them off , you throw them awai .
when we're look for data , we sometim ar look for a prefix , and there is a startswith function that give you a true or a fals .
we're ask here , doe thi variabl line start with the string pleas .
and the answer is true , becaus it doe start with the string pleas .
or , and then next , we ask , doe thi start with the letter p ?
and the answer is fals , it doe not start with the letter p .
okai ?
so there's lot more of these thing .
and read data and tear it apart is on of the thing that we're go to realli focu on for the rest of these first few chapter of the book , okai ?
becaus that's on thing that python's realli good at is tear data into piec and pull the piec that you want .
so , so let's take a look at thi line .
so thi line that we've got here is a line from an actual email box .
thi is what , if you look at your email , sort of , on your hard drive , email box would have thi kind of a format .
and there's actual mani line , and soon we'll read whole file full of email .
but for now , let's just sai we've got thi on line , somehow .
and we're look for , we don't know how long these thing ar go to be , the first charac , the first thing is from , then there's an email address , then there's some detail about when the mail wa sent .
but what we actual want is we want thi part right here , and that's the domain name of the mail address , right ?
we want to extract thi out .
we're face with thi line , in a variabl , and we want to extract that out .
so thi is kind of put all these thing togeth .
so let's walk through how we do thi .
so , here's thi line , and it's a big long string .
mostli we would've read thi from a file , rather than just put it in a constant , but for now we put it in a constant , becaus we , file is the next chapter .
and so what we're go to do is we're go to sai , you know what , i'm go to look at thi line and i'm go to go find the sign , and i want to know where the sign is .
so i call data . find sign , and put the result in atpo .
and that give me <num> .
it hunt until it find the sign , and then tell me where i found it .
then what i want to look at is , start here , for the rest of the string , i want to find the first space afterward .
so what i sai is , thi , sppo is my variabl for the posit of the space , data . find , a blank , start at the .
so thi is start at <num> .
so it sai , i'll start at <num> and i'll look for the next blank .
and i find that at <num> .
so now i know where the sign is and i know where the space is .
and so what i'm look at is , i want the stuff on beyond the sign , up to but not includ the space .
so then i can us a slice oper , i can us a slice oper .
start at the posit , add <num> to it , so advanc <num> , that's go to be the letter u .
and then a slice oper , up to but not includ space .
up to , thi is go to work out nice all of a sudden , but not includ , okai ?
and then i'm go to take that slice , which is realli thi littl bit of data right here , take that slice , and put in the variabl host .
then we print that out and we get the piec , okai ?
and so , here we have some data we want to tear apart .
we hunt for the .
we find it at posit <num> .
we start at <num> and we look for the , the space after that .
<num> , and then we pull from <num> , up to but not includ , <num> .
and it , it wouldn't matter where thi thing wa , becaus these aren't all the same length when we start look at them in file , but it would have found the sign and the space after the sign , and it would have reliabl pull out the host , okai ?
so thi is a basic pattern we call pars .
pars text .
find thi , find that other thing , grab thi thing out , then look insid that thing and so it doe all these thing , right ?
so , that's kind of like string .
up next , we have file .
file ar go to be lot of string .
so we're go to start put all these thing togeth .
and and so the next chapter is a realli , realli import chapter , where it start to realli start come togeth .
so see you soon .
hello and welcom to yet anoth work exercis from python for informat explor inform .
my name is charl sever and i am your exercis coach .
i'm your person trainer , your person assist .
welcom to the softwar develop gym .
thi materi , of cours , is copyright creativ common as is the textbook as well .
so just make sure when you're us these exercis that you're us them properli , particularli if you're take thi class and you have an assign that includ thi exercis , you probabl should try it first .
i mean , these exercis ar there so that you learn the materi and if you just sort of , take the crutch everi time , then you won't learn the , to do thing on your own .
so enough of that lectur .
other detail you can get from pythonlearn . com .
so todai we're contempl exercis <num> and our goal is to write some code , to pars line that start with thi , someth blah blah blah blah , colon , and then we're go to chop off the second half and convert it to a float point number .
in a later chapter we'll do thi in a loop , but for now we're just go to like hack on line and just see what , what it look like , okai ?
and so , so thi on's kind of a silli on but we'll do it , we'll do it anywai .
so thi on , let's grab thi string while we're at it and start up textwrangl .
oh , the last exercis is still there .
start textwrangl and start the termin program .
in my termin program , i'll go to my desktop , i'll go to python for informat folder , and i'll past that string in and i'm just go to call my string x for now and put thi in a string .
later , you'll be read thi from a file but thi exercis is not to read anyth from a file .
thi exercis is just to pars that string .
so it's go to be pretti simpl .
i will print x just for yuck .
we could make it so it would prompt for thi string in a loop or someth like that but we'll , we'll leav that for now .
we're just go to , our job is just hack and slash .
so the first thing we're go to do is we're go to us the find function in the string librari .
we've got to make a variabl call posit and we're go to sai x dot find colon .
it's like , where is that colon at ?
print posit .
and we're go to save thi gui as spamchop . py and , of cours , the color chang and we do an ls and here's spamchop . py so it's python spamchop . py , and again there's no input here .
try that again , spamchop . py .
so there we go .
that basic sai that the posit of thi letter is in posit <num> .
so the next thing we're go to do is we're go to just sort of sai , okai , let's chop off the first part .
print x and we're go to us string slice , p o s colon , which sai start at posit and move to the end .
so i'll save that on and i'll run it and that look pretti close .
we got rid of most of it but we still don't , we still have the colon .
so we gotta chop off on after the posit of the colon .
we actual ar not interest in the colon .
so we just add on here and then we go , spamchop .
now , we're go to see if the float care about thi .
i don't think so but we'll find out .
num equal float and i'm just go to sai x of posit plu <num> becaus i can give it an express here , to the end , and let's see what happen .
print num .
so what do you think is go to happen ?
think it's go to work ?
think it's go to blow up ?
think these space at the front ar go to freak it out ?
let's find out .
no .
the space don't freak it out .
so we now have a number and if i did , if i did a print of type , which is to be sort of like obsess compuls , you couldd sai num comma , type of num , and so proven to me , and i can , i can comment these gui out .
we don't need those gui anymor .
and that is a float point number and it's all pars and it's cool .
i mean it's pretti simpl , right ?
you go find where thi thing is , advanc on charact beyond it , and then slice it out .
simpl enough .
thank for your time .
welcom to chapter seven .
python for informat explor inform .
i'm charl sever .
i'm the author of the book and your host .
and , as alwai , thi is brought to you by .
no , i'm sorri .
it's all creativ copyright , creativ common attribut .
the audio , the video , the slide , and even the book .
so , here we go .
oh , and and so , frankli , where we've been work all along is , we have been write code and talk to the cpu .
hang on , let me , let me go get my cpu and stuff .
hang on , be right back .
okai .
here we go .
here we go .
here's all the stuff .
rememb the stuff from the first lectur ?
there we go with that .
rememb the motherboard from the first lectur ?
thi is kind of the pictur of what's on the screen .
the motherboard , the cpu plug in here , memori plug in here .
and rememb how the cpu is sort of the brain , as much brain as there is , for the oper .
the cpu is ask what next .
the instruct come in through these littl pin .
there's data insid , and it store sort of semi perman data , variabl , ar all store pretti much here in ram .
and we write our program , and so your python program , thei're sit here in thi ram , and thei're be fed to thi cpu through those chip .
through those pin , right ?
the pin , i mean it doesn't realli connect like that .
and so , so frankli , up to now , everyth that we've been do is just the python program languag .
and so the onli place we've realli been oper is here .
we have been put python into the main memori .
and the main memori .
and we have been effect feed instruct to the cpu , the central process unit , as it need them , and then the program would stop .
and everyth we've done so far everyth is just sort of fiddl around here .
we have never escap it .
so now we ar final go to escap from the central process unit and the memori .
we'll still write program and have variabl in here .
but now we're go to us the disk , the secondari storag , the perman media , right ?
so if i go grab my raspberri pi  , all right , that goe right there .
here's my raspberri pi  , so here we've got the raspberri pi  , which is the small version , which of cours ha a cpu , memori , and graphic processor , all in thi littl chip right here .
but the secondari memori for the , is thi littl sd card that is the secondari memori for raspberri pi  .
so the structur of the raspberri pi  is exactli the same as the structur of ani other person comput , it's just smaller and less expens .
and so in the raspberri pi  , if you're program the raspberri pi  , you're sort of final escap .
all your program were in here .
your cpu is in here and that's pretti much how , how far you've got to run .
but now , of cours when you save your file , you save them to here .
but now we ar go to start look at data on the disk drive and so it's time to escap to the secondari memori .
okai ?
time to escap to the secondari memori .
and raspberri pi  , you can go right there .
okai ?
so it's time to find some data to mess with .
so a lot of what we've been do so far is just kind of the pre work to get to the point where we can do thi .
and in here we're go to have data file .
now , we've been make data file .
you've been write , everi python program that you write on your comput get save as a file .
then python read the file and run it .
but now we're actual go to start mess with some data .
and so , file ar where we're go to be work .
and so , on of thing about secondari memori is it's much larger .
and thi is , main memori of the comput is pretti larg , it's just not larg enough to hold everyth that the comput is capabl of hold .
so the file that we're go to work with .
now we're not talk about imag file or quicktim movi or thing like that .
we're go to work with text file becaus the theme of thi cours is dig through text .
sometim we'll pull it off the internet .
sometim we'll read file , but it's dig through and us all the thing that we've learn so far , loop and string , and all those thing , to make sens of a sequenc of inform .
okai ?
now , to access file inform , we have to do thi thing call open the file .
we can't just sai , yo , the inform is just omnipres becaus there ar so much data that you can't have python sort of know all the data .
you liter have hundr of thousand of file on your comput's hard drive .
and you , which on ar you go to read ?
so there's a step that you have to do , that you call thi built in function call open .
and sai , oh , thi is the file that i want to work with , of the hundr of thousand , and then onc you do , you've kind of got thi littl connector into it .
and the open is a built in function insid python .
hang on a sec , let's sai good bye to that .
the open function is a built in function in python , and you , it take two paramet .
the first paramet is the name of the file , like mbox . txt , and then the second is how you're go to read it .
ar you go to read it ?
ar you go to write it ?
et cetera .
now most of the time we'll be read our file .
so we call the open function and pass it in the name of the file we want to open , and then how we want to read it .
now you can leav thi second paramet off and it assum that you're go to want to read the file .
now .
when the open is success , it doesn't actual read all of the data becaus the memori is small , small compar to the hard drive , and so you have to sort of step through the data , you'll tell it when to read it .
so the act of open it is not actual read all data .
it is creat kind of like a connect between the memori and the data that's on the hard drive , right ?
it's connect between , oh listen to thi .
oh that's go to fall down .
is it go to stand up that wai ?
oh , i should come up with a wai to make that stand .
so it's a connect .
so the , your program's kind of run in here .
and the , and the file handl is just sort of it's like a phone call between your memori and your disk drive .
it's not the actual data .
the actual data is still sit on the disk drive , okai ?
so , a graphic wai to take a look at thi is , the file handl , the thing that come back from the open request .
the open goe and find the file out on the disk drive and yada , yada , yada , and then the handl is someth that live in the memori .
that is sort of like the thing that maintain it connect to where all the data is on the disk or on the sd ram that's in it .
so the handl is not all the data , but it is a mechan that you can us to get at the data .
so if you print it out , it doesn't have all the data from the file , it sai , i am a file handl that's open thi file and we're in read mode .
so , that doesn't actual have the data , even though thi is the data that's in the file .
and then we have oper that we do to the handl like open it , close it , read it , write it .
so we do thing .
so , so the handl and then through the handl it actual chang what's on the disk or read what's on the disk .
so the handl is kind of a thing that's not there .
if you attempt to open a file and the name of the file .
now the wai we're go to do these is these need to be in the same folder on your comput as in , as your python code .
now , there ar trickier wai to do it , but we're go to keep it simpl .
thi is the name of a file in the same folder as the python code that you're run .
and if it's not , then we get , of cours , a traceback and we're us to us , read traceback by now , no such file or directori stuff . txt .
oh , of cours , i forgot to save it or i type it wrong .
so .
the next thing we have to learn is the notion of the newlin charact .
you haven't seen thi so far , but there's a special charact in file that is us to indic the end of a line .
becaus these text file that we've been write , includ python program that you have , ar organ into line .
each line ha variabl length and there is a special non print charact that you just don't see .
now you see it becaus you see a line , multipl line , but you don't see the charact itself .
so it turn out that thi charact is veri import becaus the data is just a stream of charact on disk and then it's punctuat by newlin that tell it when it's time to end the line .
so if we ar build a string , the constant for newlin is backslash n .
and so , when we make a string that we want to have a newlin in it , we'll sai hello backslash n world .
and then if you print it out on wai , you actual see the backslash n .
but then if you us the print to print it out , you see sort of like the , it move back down , you know , to the left margin and down .
so , so , sometim you see the slash n and sometim it's shown as movement .
right ?
you , it move it .
the other thing that's import is even though we repres thi as two charact , the backslash n is repres as two charact in a string , it's actual on charact .
so if we print it out , we see x newlin y and if we ask how mani charact ar in stuff , which is thi string , it sai <num> .
that's import .
okai ?
there is on , two , three .
the newlin is a singl charact .
thi is a just a syntax that we us to sort of encod a newlin in a string .
okai ?
so , even though these ar just a long sequenc of charact punctuat by newlin , visual , text editor and oper system show them , show these file to us as a sequenc of line .
and it doesn't take veri long to just start think about them as a sequenc of line .
as a matter of fact , mayb you never , wish i'd never told you about newlin .
but when we start read file , we're go to have to deal with these newlin .
so the wai that we sort of have to mental visual of what these text file look like is thei have a newlin that punctuat the end of the line .
now in realiti , if we look at thi , thi r realli come right after it .
right ?
thi is all a bunch of charact and the newlin ar punctuat , okai ?
to sai thi is first line , second line , third line , and fourth line .
so , you gotta think that each of these thing is here , sit at the end of the line .
and so the number of charact in thi line includ that newlin .
now the newlin is on charact .
okai ?
so , how do we read these file ?
well , we've alreadi talk about do an open xfile .
and i'm just , thi xfile , again that's just a mneumon name that i made up .
thi is a handl .
rememb , it's not all the data .
but the handl is the wai that we can read the data .
we can us it as a access point .
the coolest wai to read a file , if it's a text file in multipl line , is to us a determin loop , a for loop .
for chees in xfile .
so thi , rememb we would put a list of number or a string here .
now we've put a file handl here .
python know automat that each time we ar go to run thi loop , it's go to go to the next line of the file .
automat , for , a chees is just a stupid name that i came up with it .
i would be better to call line rather than chees , but for chees in and then it goe dot , dot , dot , dot , dot , dot , dot , each file and then it stop when it read the whole file .
so thi line will print out everi line in the file , that's how you do it .
these three line open a file , read everi line in the file , okai ?
so a file handl itself is a special kind of a sequenc , much like a list of number or a string is a sequenc of charact .
so on of the thing we can do to combin on of our count idiom is count the number of line in a file .
okai ?
and so how we would do that is we would open the file , set a counter to zero , thi time i'll us a mnemon variabl call count .
for line in fhand , that sai run thi indent text onc for each line in the file .
for each line in the file , add count equal count plu <num> .
when the for loop is done , print the count .
pretti straightforward .
veri few other languag ar capabl of write that program in as quick and as dens and succinct a wai as python is .
python doe a realli , realli nice job of thi .
okai ?
so that's how you count the line .
open it , write a for loop , and then add on .
now we , we can't just sai , so what you can't do , and thi give you a sens .
you can't sai len , fhand .
and that's becaus thi isn't realli the data .
that's sort of , you have to like pull the , pull it and read it to get the data out of it .
although we'll see anoth wai of read it later .
okai ?
so that's count the line in a file .
it turn out you can also read the entir file .
now if you read the entir file , it's not broken into line .
you're get all the charact punctuat by newlin and you get everyth .
now you don't want to read thi if it's too big , so it's go to all try to read it into the memori of the comput .
and if the memori is not big enough , you're go to slow down to a crawl .
but if it's a real tini file , thi work just fine .
and so , so we have sort of real , we open a file and we sai fhand . read , thi is basic sai , hei , dear fhand , read it all and return it to me as a string .
so that's a string with all the line of the file concaten togeth with newlin , which is actual exactli what's in the file .
it's the raw data .
that for loop sort of look for the newlin and doe all of the stuff automat for us .
it's quit nice .
so then we can , like , becaus inp is a string at thi point , we can just print the length of it .
and we can sai , oh , there's <num> , <num> charact that came from that file .
it read the whole thing , whole file , read the whole file .
we can also do thing like , you know , slice it now .
and so thi is the first <num> charact , up from zero up to , but not includ , <num> .
so thi , thi is our file .
okai ?
so that's read through the whole file .
so , let me go back a littl bit , thi is the file that we're go to plai with .
thi file here that we're go to plai with in thi class is a mailbox file .
and thi is actual real data .
and these ar real peopl .
and these ar real date , have to do with an open sourc project that i work on call sakai .
i actual have a tattoo of sakai here on my shoulder .
mayb in an upcom lectur , i'll have a short sleev shirt , and show you my tattoo .
but for now , i can't becaus i've got , got cloth on .
so , but thi is real data .
it's the mbox . txt , mbox . txt file .
so , so that's the file that we're go to us for most of the next few assign .
it'll be the same file .
you'll get tire of it .
and you'll get to know all these peopl , stephen , chen wen , and all the peopl in the file .
okai , so .
we can search for line that have a prefix .
thi is kind of the find pattern from the loop lectur .
so we're go to go through a list of , of line in a file , and we're go to onli print out the on that match a certain thing .
so again , we open the file up .
we're go to write a for loop that's go to sai , for each line in the file , if the line and then we can call a , a util function insid of string , becaus line is a string .
if line startswith from , print it out .
so thi mean it's go to loop through all of the line in the file and it's go to print the on that start with the string 'from ' okai ?
again , four line , complet python program to read thi file and print the line that have a prefix of from .
so , if you run thi program , and i suggest that you do , thi is what the output's go to look like .
and it's like , wait a second , i'm see the line , see the line that have the from , but then i get these blank line .
and why is that ?
why ar these blank line there ?
if i look at the program , i mean , i'm not print blank line .
i'm onli print line that start with from .
i'm not do that , so why ?
what do you think ?
i'll give you a second .
i've certainli done enough foreshadow in thi lectur .
well it turn out these newlin ar the problem .
so it turn out that the print , we've been do thi all along , you just , we didn't make a fuss about it .
the print add a newlin at the end of everyth that it print .
so the yellow newlin ar come from the print statement .
but when we read the file , each line end in a newlin .
so these green newlin ar actual from the file .
thei're the on from the file .
so what's happen is we're see two newlin , and so that turn into a blank line .
so , how do we deal with that ?
well , we've got a string function that conveni solv that problem , okai ?
and that is we're go to call rstrip .
if you recal , we had strip , lstrip , and rstrip to strip white space on on side , on the other side , or on both side .
so in thi on , we're go to us rstrip .
we're go to sai , we're go to read the line , that thi line is go to have a newlin in it .
rstrip sai pull white space , and the newlin ar also count as white space .
blank or newlin ar white space .
and then we're go to replac thi with no newlin in it .
then we're go to ask if it start with a from and then we're go to print it out , and then we go and we're go to see exactli what we're look for in thi file .
and there's no newlin .
so the newlin that's come out here is the on from the print , not the on from the file , becaus the on from the file got wipe out by that particular line .
okai ?
so anoth gener pattern of these file base loop that we have done thi , is a skip pattern .
now , you can do , the , the non skip pattern is where you're sai , i'm go to look for line that start with from and do someth to them .
sometim you'll want to do someth to all , to , to the to , to , you want to sai , here's a bunch of line i'm go to skip , and then i'm go to do someth .
so the skip pattern us continu .
and so the first few line here ar the same .
we open a file , we read each line in the file , but we're go to strip off the white space .
you're go to get tire of type these three line , becaus you're go to do it a lot .
open the file , start read the file , strip the whitespac for each line .
and you can make it so that you can look for some fact .
in thi case , i'm go to sai , if not line startswith from , thi mean thi is true for all the line that don't start with from , continu .
and if you rememb , continu goe up .
so the continu sai i'm done , it finish the iter , and it doesn't do anyth down here .
okai ?
and so it , thi is a , and then , we can do someth .
so , i've kind of flip thi , where i said , these ar the thing i'm interest , interest in , that's line that start with from .
so , i'm go to skip the line that don't .
so i'm go to us continu .
either wai you can do it , depend on the complex or how much .
often when you're , thi is a good pattern when you have lot of line of code down here that you're go to do a lot of cool stuff with .
you can also us thing like in to select line .
right ?
so i'm go to , i'm go to look for line that have uct . ac . za in them .
so again , i'm go to open it up .
i'm go to open these , go through each line in the file .
i'm go to strip the white space out , and if not u c t , if thi string is not in line , then i'm go to continu .
so it's a wai for me to skip all of the line that don't have thi string in it .
so these line do , that on ha it too , and then we're go to print it out .
it will print out the on that make it past here , okai ?
so , but in is anoth wai to do search , right , start with , et cetera .
so on more thing that you might want to try is , so we can count , right ?
now , and thi is a pattern for prompt for a file name .
and so , so here you , you'll get tire of sort of chang your code everi time you want to open a differ file .
becaus you probabl want to run the program with mbox onc and mbox short becaus , just so you can test it with differ thing of data .
so here's just anoth pattern .
we add thi line to sai raw_input , enter the file name .
and there you go , we'll type in the file name .
and then the thing that we open is whatev we enter as the file name .
and then the rest of it is pretti much yada yada .
so here i'm , it's read the whole file .
if the line start with subject , count equal count plu on .
and then there were <num> subject line in mbox . txt .
there were <num> subject line in mbox short . txt , okai ?
so that's prompt for the file name .
now , open .
the open statement fail if the file name doesn't exist .
so , you might want to add a try and accept around that if you want to , if you're just write code for yourself and you assum that everyth's okai , then you don't have to write try accept but if you want to catch it and catch a bad file name , then you take the open which , and turn it into these four line .
so thi is the code that we think might blow up , and it's go to blow up , we know it's go to blow up .
if thei enter a bad file name like na na boo boo , right , thi is is go to blow up .
so what do we do ?
we us try and accept .
we put try around that .
we're go to take out some insur on that particular line .
and then , if it fail , we're go to print thi messag and then sai exit , to get out .
so if you get a good file , if you get a good file , it work , skip the except , then run the thing , print out the count .
that's what's happen here .
if , on the other hand , you get a bad file , it come here , open blow up , run the except , print thi out , and then quit .
so that's how thi on work with a bad file .
and now , no traceback , right ?
so we ar it's kind of a short lectur .
we're done with chapter seven .
we open a file .
we read the file .
we take out white space at the end with rstrip .
we had us string function .
so , thi is kind of put it all togeth .
and it's kind of short littl program now .
so , it's not .
and you know , start now , we ar go to start put these thing togeth and start actual do work .
becaus now , we have , from the first few chapter , we have basic capabl of python .
now we have some data to work with .
now go forward we ar go to do increasingli sophist thing with that data .
so i can't wait to see in the next lectur .
hello , and welcom to the realiti show about exercis in python .
it's not a veri excit realiti show , but i'm your host , charl sever .
and these exercis come from python for informat explor inform .
and , of cours thi materi's creativ common attribut , as well as the book and other materi .
so by now i hope that you're get pretti good at us python .
hopefulli the pythonlearn materi have been help to get thing set up .
so the exercis that we're work on todai is exercis <num> from the file chapter , and our goal here is is simpli to read through a file and print out the content of a file , all in upper case .
execut the program will look like thi screen .
we obvious have to prompt for the file name , becaus it sai enter the file name and then we give it a file name , or we get our file from thi url shown here , py4inf . com code mbox short . txt .
so let's do that .
and so let's , let's go ahead and do thi .
so the first thing we're go to do is go to the web , and here's python for informat .
by the time you're see thi mayb it'll be even prettier .
and the url is in thi code sampl .
and thi is old school user look and feel .
and i'm go to open thi , and thi is the data that we're go to work with .
the mailbox format data .
and i'm go to save thi as a text file .
and i'm go to put it in my desktop .
in a folder python for informat and i'm go to put thi mailbox file right in the same place as all of my other file .
i'm go to verifi that that's look realli good now by open up a termin window , and i go into that folder .
and that , that folder right there is in my desktop .
python .
and there we ar .
i got my file .
okai ?
so i'll open up textwrangl .
make it a littl smaller .
okai .
and then i could open thi file in textwrangl if i want to .
mbox short , and so there it is .
if i want to , like , look at it realli close .
or we could open , i don't want that .
i want to make a new python program .
and so we will , you know , well , the first thing we gotta do is , we gotta enter a file name .
so let's do that .
i'll call my variabl fname equal raw_input , enter a file name , colon , insert a space , oop .
switch back to singl quot .
you could us doubl quot or singl quot but singl quot ar cool .
doubl quot make it look like you're a java program that can't rememb whether it's singl quot or doubl quot .
python doesn't care about it , but the cool peopl us singl quot .
so us cool .
i mean if you want to be cool .
i'm try to be cool .
you can see i sometim don't get it at all .
i'm not that cool .
okai .
so then i want to print file name , and let's save thi , and then as soon as we save it , you'll see that , python for informat , i'm go to call the program shout . py , and as soon as we get it , we get nice syntax color , which help us understand if we've made ani , like , typograph error like that , or someth like that so .
so we'll save it and if i come here right now i'll see shout . python , shout . py , and i sai python shout . py .
enter file name , fred .
look good .
ok ?
i didn't do much els .
so , the thing we've gotta do , of cours , to read a file , is we can't just read it .
we're go to have make them get a file name , right ?
so we'll call our file handl fhand variabl equal open and then fname is the file .
and then , of cours , we can write a for loop for line in , now line is just a variabl name , for and in ar keyword , but line is just a variabl name , and fhand .
and that's becaus the file handl , file handl is a type of sequenc that we can iter through in a for loop , and thi loop will run for each success line in the file .
and so i will just sai print line to kind of know that my loop is actual iter through the file .
so we've got four line , and we'll sai fred again .
and son of a gun if the open kind of blow up , becaus there is no fred .
so we have to run a program here that's actual in the directori .
mbox short .
i've shorten the long on , so that mbox short , is just a , you know , it's a littl easier , smaller .
it's just the first few line of the full mbox file .
okai so here we go , and , there we ar , there we ar , and i'm go to have to make that a littl bit bigger .
so if we go up here and we look at thi on of the thing that we see is that it doesn't look like the file becaus there is a blank line after everi line .
and you sai oh crap , why is that ?
well , you're just go to have to get us to the idiom that is trim line , and so i'm go to , i'm go to trim .
i'm onli go to trim on the right side .
line . rtrim .
i'm go to trim the white space on the end and the problem is , is there's a newlin here , and that print statement is also ad a newlin .
so i'm just go to trim it .
save that .
make it smaller so we can kind of see it go at the same time .
i us cmd k on my macintosh to clear the screen .
you can actual us cl in window if you want .
and so i'm go to run the same program again .
mbox short . txt , and now we should .
oh , oh , oh , it's not rtrim .
object , str object ha no attribut rtrim , becaus it's rtrim in some other languag , and i'm forget , becaus i'm switch between languag , but i just , there's a no method , and you'll notic that the syntax color is not right either .
and it's rstrip .
how mani peopl caught that ?
not mani , probabl .
i didn't even catch it .
let's try it again .
mbox short . txt .
okai , so now it's still kind of ugli and nasti , but you can kind of see there's , when we print the file out here , there's no extra blank line and that's becaus the newlin have been strip off .
we're still get a newlin from the print statement , but we onli want on newlin .
okai , so we're get pretti close .
we've got , in thi littl loop right here , we've got the line , we've taken off the white space .
so now it's a pretti simpl task to just sai line equal line . upper , and then we're go to convert the whole thing to uppercas and run it again .
mbox short . txt there we go .
it is shout , shout , shout , becaus everyth is in upper case .
so that's pretti straightforward , not too much error check .
let me show you on , on sort of python idiom that allow you to contract thi .
so in a sens , thi is a function call .
it sai , give me back a new string , which is a copi of line with the white space remov .
well , thi is a string , and we can appli a string librari method to it , as well .
so i can actual tack on the end of thi the upper , and i can take thi line out .
and now i can do it all in on line .
and thi code sai , take line , strip the white space , and then take the result white space free , and convert it to upper case .
and that should accomplish the same thing .
let's make sure we don't have blank line .
we don't have blank line .
so everyth is fine .
okai ?
so we could add a few thing .
let's add someth to thi .
we've got their specif done .
we're kind of done at the minimum , but let me show you someth cool here .
let's just sai you got tire of type that file name all the time .
here's a littl trick .
if the length of fname is less than on .
i'll just sai equal zero .
you're go to set the fname , fname equal mbox short . txt .
so that basic mean that if we enter a real file name , the length of the file name will be greater than zero .
if we don't , we're just go to assum we're just go to chang that variabl to fname , and then when we open it , we'll have it .
so watch thi .
oh , better save that .
so i could type a file name but if i hit enter , it just doe that .
look how conveni that is .
so , in effect it wa creat a default , as it were .
when the user type enter , thei sort of do their thing .
okai ?
so , that's pretti much it for the exercis <num> .
the shout at exercis .
