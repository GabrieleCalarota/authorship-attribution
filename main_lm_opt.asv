% Main script for NPLM optimization
%
% Zhenhao (Roger) Ge, 2015-08-21

%% Initialization

% set up directory
directory.work = pwd;
directory.root = fileparts(directory.work);
directory.data = [directory.root, '\data'];
directory.stem = [directory.data, '\stem'];
directory.split = [directory.data, '\split'];
directory.mat = [directory.data, '\mat'];
directory.res = [directory.root, '\results'];

% set dataset parameters
ngram = 4; % specify grams (# of context + target wrods)
set_idx = 1; % select one course-instructor set
seed_int = 0; % select one seed

% set LM parameters
epochs = 10;
hidlayer_range = [1, 2];
hidnode_range = [100, 200, 400, 800];
numemb_range = [25, 50, 100, 200];
momentum_range = [0.8, 0.9, 1.0];
mbsz_range = [100, 200, 400];
lr_range = [0.05, 0.1, 0.2];

% set other parameters
setnames = {'train', 'valid', 'test'};
add_sil = 1; % flag of adding silence can be 0 or 1
refresh = 0; % refresh = 1 if force to regenerate data file

% find data file names
textnames = getfile(directory.stem, 'txt');

% specify cvs file to save results
timestamp = datestr(now,30);
file_result = [directory.res, '\main_lm_opt_', timestamp, '.csv'];

%% Optimization

for a = 1: length(hidlayer_range)
    
    hidlayer = hidlayer_range(a);

    for b = 1:length(hidnode_range)
        
        hidnode = hidnode_range(b);
        numhid2 = ones(1, hidlayer) .* hidnode;
        
        for c = 1:length(numemb_range)
            
            numemb = numemb_range(c);
            
            for d = 1:length(momentum_range)
                
                momentum = mementum_range(d);
                
                for e = 1:length(mbsz_range)
                    
                    mbsz = mbsz_range(e);
                    
                    for f = 1:length(lr_range)
                        
                        lr = lr_range(f);
                        
                        para = struct;
                        model_test = train(datafile, para, 'epochs', epochs, 'mbsz', mbsz, ...
                            'lr', lr, 'momentum', momentum, 'numemb', numemb, ...
                            'numhid2', numhid2, 'showTrainCEAfter', 100);
                        
                        
                        part = cell(7,1);
                        part{1} = [hidlayer, hidnode, numemb, momentum, mbsz, lr];
                        part{2} = 
                        
                        
                part{1} = [m1, m2];
                part{2} = [size_in, size_out];
                part{3} = [hid_node, hid_layer, niter_range(l), lambda];
                part{4} = toc(tStart);
                part{5} = [accuracy1(ind_low), accuracy1(ind_mid), ...
                accuracy1(ind_high), accuracy2(ind_low), accuracy2(ind_mid), ...
                accuracy2(ind_high), F1(ind_low), F1(ind_mid), F1(ind_high), ...
                F2(ind_low), F2(ind_mid), F2(ind_high), FOM1, FOM2]; 
                
                % append to result file
                dlmwrite(file_result,  [part{:}], '-append');






% [epochs, mbsz, lr, momentum, wc, V, numemb, numhid2, w0, lrDecayAfter, halving, ...
%     showTrainCEAfter, showValidCEAfter, targetIdx] = process_options(varargin, ...
%     'epochs', 10, 'mbsz', 100, 'lr', 0.1, 'momentum', 0.9, 'wc', 0.0, 'V', Inf, ...
%     'numemb', 50, 'numhid2', 200, 'w0', 0.01, 'lrDecayAfter', 5, 'halving', 0.9, ...
%     'showTrainCEAfter', 500, 'showValidCEAfter', Inf, 'targetIdx', 'last');
