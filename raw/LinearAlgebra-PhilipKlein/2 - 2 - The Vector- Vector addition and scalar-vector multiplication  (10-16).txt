
Now with, with complex numbers we 
achieved to translation by addition. 
So in order to do the same thing with 
vectors, we have to introduce a vector 
addition operation. 
So here is the basic definition of vector 
addition. 
To add two vectors, you just add them 
entry wise. 
Here is the, here is the code for, doing 
addition of two vectors, in Python, when 
the two vectors are represented as lists. 
Now there's a, always a 0 vector, and 
notice that adding the 0 vector to any 
vector gives you back that vector. 
Addition has these various algebraic 
properties, associativity and 
communitivity. 
And we'll see how those get used. 
Now like complex numbers, we can 
represent vectors as arrows in the plane. 
So this Vector of 3, 1, 5 can be 
represented with its tail at the origin 
and its head here. 
It could equally well be represented with 
its tail over here. 
Now, addition can be interpreted as an 
operation on arrows. 
Just as in the case of complex numbers. 
To add vectors u and v, you place the 
tail of v's arrow at the head of u's 
arrow. 
And now you draw a new arrow from the 
tail of u to the head of u. 
Now, with complex numbers, we're able to 
scale them, make them bigger or smaller, 
by multiplying by real numbers. 
We're going to do the same thing for that 
group. 
So we refer to field elements such as real 
numbers such as scalars. 
And we use them to scale vector using 
scalar vector multiplication which is 
indicated in this way. 
Now I use alpha, beta, gamma, Greek 
letters to represent scalars in the 
context of scale or vector multiplication. 
The formal definition goes like this. 
To multiply a vector by a scalar, you 
simply multiply each of the entries by 
that same scalar. 
Here's an example. 
Now let's interpret scaling on, as an 
operation on arrows. 
So here's an arrow representing the 
vector 3, 1, 5. 
And when we scale it by 2, we get a 
vector that's in the same direction, but 
is twice as long. 
Scalar vector multiplication satisfiies 
an algebraic property. 
Multiplying a vector by beta and then 
multiplying the result by alpha is the 
same as multiplying the original vector 
by alpha times beta. 
Now, let's start with the vector 'v' say 
(3,2) and consider a whole bunch of 
scalar multiples using scalars ranging 
from zero to one. 
Each scale gives you a different size 
arrow in the same direction. 
So let's try that in Python. 
We start with the vector v represented as 
a two element list. 
Now we're going to plot a whole bunch of 
scaler vector multiplications. 
[BLANK_AUDIO] 
[SOUND] And you could see 
[INAUDIBLE] 
it's starting to form a line segment. 
Let's do the same thing, but with a lot 
more points. 
What if we let the scalar alpha range 
over all real numbers, rather than just 
the numbers between zero and one. 
Well, the scalar is bigger than one, 
will give rise to arrows that are longer 
than the original vector. 
And the negative scalars will give rise 
to arrows in the opposite direction. 
Let's try it out in Python. 
Our conclusion is that if you let alpha 
range over all real numbers The set of 
scalar multiples forms the line going 
through the origin and the vector v 
represented as a point. 
Now, so far we know how to represent 
lines and line segments that go through 
the origin and a given, given vector v. 
But, for purposes of say drawing maps, we 
want to be able to draw line segments 
that don't necessarily go through the 
origin. 
Well let's see how we can derive that. 
We're going to use the idea of 
translation. 
So, we know how to draw a line segment 
from zero to three two. 
That's just this. 
Instead of multiples Alpha times (3,2) 
where alpha ranges between 0 and 1. 
So here's that line segment. 
What we're going to do is translate that. 
Now we know the translation is performed 
by doing vector addition. 
So we're going to add the vector (.5,
1) to every vector in that Line segment. 
And what we should get is the line 
segment from 0 plus 0.5, 1 to 3, 2 plus 
0.5, 1. 
Scalar vector multiplication distributes 
over vector addition. 
[BLANK_AUDIO] For example, you can add 
these two vectors and then multiply them 
by 2 or you could multiply each of the 
vectors by 2 and then add the results. 
And you'll get the same answer. 
We'll use that in coming up with another 
formulation of the line segment between 
two points. 
So here's our current formulation of that 
line segment. 
We take the set of points making the line 
segment from 0 to 3.2 and we add 0.5, 1. 
This is not a particularry nice 
formulation. 
It doesn't treat the end points in a 
symetric way. 
So we' re going to use The distributive 
law, to reformulate it. 
So alpha times [3,2] plus [0.5,1] can be 
rewritten in this way using the 
distributive law. 
Another application of the distributive 
law gives us this, and we can rewrite 
that in this way. 
So now, we've got this expressed in terms 
of the two end points and two scalar multipliers, alpha and 
beta, where beta is 1 minus alpha. 
So a more symmetric formulation of the 
line segment between two points. 
Is alpha times one point, plus beta times 
the other. 
Ranging over all alpha and beta that sum 
to and are non-negative. 
And this formulation is symmetric. 
So our new formulation is alpha times one 
vector, plus beta times another. 
For all alpha and beta that are non 
negative and sum to 1. 
Expression of this form where this form, 
where the scaler multipliers are non 
negative and sum to one is called a 
convex combination. 
And what we've seen is, that the u to v 
line segment, is the set of convex 
combinations Of the vectors u and v. 
We can use convex combinations on vectors 
that represent things other than points. 
Here we're going to take two vectors u 
and v that are representing images. 
And one example of a convex combination 
assigns Alpha one half and beta one half, 
this is just the average. 
And the average of two images is some mix 
of the two. 
Now we can also use the idea of a line 
segment between two faces. 
So here we're taking a whole bunch of 
different combinations of alpha and beta 
to represent a sort of line segment 
between faces. 
We can get a kind of crossfade effect in 
this way. 
And what about the infinite line through 
two given points. 
We had a formulation which is not so 
great, it's not symmetric between the two 
points, but we can get a nicer 
formulation in this way. 
Alpha times one point plus beta times the 
other, for all alpha and beta that sum to 
one. 
An expression of this form is called an 
affine combination of the two vectors U 
and V. 
And we see that the line through U and V 
consists of all affine combinations of U 
and V. 

