
Before we get to vectors and matrices and 
the like, I'll present some basic 
mathematical definitions and notations 
that we're going to use throughout the 
course. 
A lot of these that you may already know. 
So, feel free to go through them very quickly, or skip 
over parts you know. 
A set is an unordered collection of 
objects. 
So spades. 
So hearts, spades, clubs, and diamonds. 
The order doesn't matter. 
We use the, this symbol to mean that an 
element belongs to a set. 
So, the heart belongs to this set. 
This means that A is a subset of B. 
What that means is that every element of 
the set A is also an element of B. 
We say two sets are equal if every 
element of one is an element of the 
other. 
Remember, the order doesn't matter. 
And, a convenient way to prove that two 
sets are equal, is to prove that each is 
a subset of the other. 
The proof usually has that form. 
First you prove that A is a subset of B, 
then you prove B is a subset of A. 
Here's a notation that we're going to use 
a lot. 
Call it a set expression. 
The set of non negative numbers would be 
written like this: the set of all numbers 
x in the real numbers such that x is 
greater than or equal to 0. 
So I use the colon to mean such that. 
So there are two parts to this 
expression. 
The part before the colon, which tells us 
where these elements come from and 
introduces a variable to refer to them 
so that I can impose conditions in the, 
in the second part. 
Second part gives a rule or, constraints 
or condition that say which of these 
elements belong to the whole set as an 
analogous Python expression. 
Let's say this set, S is defined to be 
these integers. 
The expression X for X in S if X is 
greater than or equal to 0 gives you only 
the elements of S that are non-negative. 
Very often instead of writing this we'd 
write just this. 
We'd leave out the part that's specifies 
that x is a member of the real numbers. 
If it's supposed to be clear to you that, 
that's where these numbers x are coming 
from. 
Here's another example. 
The set of x such that x squared minus 5 
over 6 times x plus 1/6th equals 0. 
Implicitly, we're talking about real 
numbers x. 
And this set consists of just two 
numbers, one half and 1/3rd. 
If a set S is not infinite, we use these 
vertical bars to denote the number of 
elements in a set. 
It's called the cardinality of the set 
for example this set has cardinality 
form. 
Now, I introduce the Cartesian product. 
Given sets A and B, the Cartesian product 
of A and B is the set of all pairs, 
little a, little b, where little a 
belongs to big A and little b belong to 
big B. 
So, here's an example. 
We can take the Cartesian product of the 
set consisting of one, two, and the set 
consisting of hearts, spades, clubs, and 
diamonds. 
The Cartesian product is the set of all 
these pairs. 
This is named for Descartes, and we'll 
see him later on in the course. 
So for example, what's the cardinality of 
the Cartesian product of A with B, in 
this case? 
Well, we have two choices for the element 
of big A and four choices for the element 
of big B, so we end up with eight in 
total. 
There's a simple rule that if A and B are 
finite sets, the cardinality of the 
Cartesian product is the product of the 
cardinalities of the two sets. 
Using this, what's the cardinality of 
this Cartesian product. 
There are 13 elements in this set and 
four elements in this set, so the 
cardinality of the Cartesian product is 
 52. 
This expression denotes the set of all 
pairs of real numbers, in which the 
second equals the square of the first. 
And of course we might abbreviate that in 
this way, leaving out this part. 
So just a set of pairs, XY, such that Y 
equals X squared. 
You're supposed to guess from the context 
that X and Y are elements of the real 
number. 
Here's another example. 
The set expression tells us that the set 
consists of all triples, X, Y, and Z. 
Where X, Y, and Z are elements of the 
real numbers, such that X is greater than 
0 and Y is greater than 0, and Z is 
greater than 0. 
That is, it's the set of all triples of 
non-negative real numbers. 
You're supposed to interpret the comma 
here as an "and" all the conditions on 
the right have to be satisfied 
for the triple to belong to the set. 
And as before we might abbreviate that by 
leaving out this part and write it in 
this way. 
What's a function? 
Well intuitively A function for each 
input element in a set A, a function 
assigns a single output from another set, 
B. 
And in this context, A is called the 
domain of the function, and B is called 
the co-domain. 
Formally, in math, a function is often 
defined as a set of pairs, AB No two of 
which have the same first element A. So 
here's an example. 
The function with domain 1, 2,3 and so on 
that doubles its input is represented by 
this set this set of pairs the first 
element of the set is the pair 1, 2 the 
second is 2, 4 and so on. 
Here is another example. 
In this case, the domain is the Cartesian 
product of the positive integers with 
itself, and this function involves 
multiplying the two elements that form 
it's input. 
So 2 times 2 is 4, 2 times 3 is 6, and so 
on. 
Now, the output for a given input is 
called the image of that input under the 
function. 
The image of q under the function f is 
denoted f of q. 
This should all be very familiar. 
And we would say that, if f of q equals r 
we that we say that q maps to r under f. 
In Mathese, we write it this way q maps 
to r. 
So this symbol represents maps to. 
Now remember that this set from which the 
outputs are all chosen is the co-domain. 
We use this notation to mean that f is a 
function whose domain is D and whose 
co-domain is F. 
Now we have some flexibility in defining 
a function, as to the choice of the 
co-domain. 
We're allowed to have elements in the 
co-domain that are not images of any 
elements in the domain. 
Here's a quick example, Caesar 
Cryptosystem, a Caesar cypher. 
Each letter is mapped to the one three 
steps ahead. 
So matrix would map to PDWULA. 
So, the function mapping letter to letter 
can be written in this way. 
In maps A to D, B to E, C to F, and so 
on. 
Now, we might use a diagram like this to 
represent that same function. 
A maps to D, B maps to E, and so on. 
In this case, both the domain and the 
co-domain are the letters A through Z. 
Now, the image of a function is the set 
of all the images of the inputs. 
The images of elements of the domain. 
It's written, Im of f. 
For example, the cosine function, we can 
define the cosine function to have the 
domain the set of rules numbers and the 
co-domain also the set of real numbers. 
However, the image of the cosine function 
is just those real numbers that lie 
between -1 and 1. 
Because those are the only numbers that 
are the images under the function cosine 
of elements of the domain. 
And notice that the image in this case is 
not the same as the co-domain. 
The image of the Caesar encryption 
function is A through Z, which is the 
same as the co-domain. 
Here's another example depicted here. 
The domain is the numbers 1 through 4. 
And, the co-domain is A, B, C, D and E. 
And you noticed, the image of this 
function is the set A, B, C and E. 
D is not in, in the image. 
Because there's no element of the domain 
that maps to it. 
You might be familiar with the term 
"range". 
Some people use "range" to mean the 
co-domain of a function, and some people 
use "range" to mean the image. 
Because there's this confusion, I tend to 
avoid the word "range" altogether. 
So I just use co-domain and image. 
For sets F and D, F to the power of D 
represents all the functions from D the 
exponent to F. 
So for example, the set of all functions 
from the set of words in some language, 
the set of real numbers will be written 
in this way, R to the W. 
And note that for finite sets, the 
cardinality of f to the d equals the 
cardinality of f to the power of the 
carnality of d. 
For any domain d, any set there's an 
identity function. 
Written id, sometimes with a subscript, 
the domain, its domain is D, its 
co-domain is D. 
And it simply maps each element of the 
domain to itself. 
So here's an example. 
it maps the integers 1, 2, 3, and 4 to 
the integers 1, 2, 3, and 4. 
It's not very interesting, but it's 
useful in the next definition. 
Now for functions f with domain a and 
co-domain b, and g with domain b and 
co-domain c. 
The functional composition of f and g is 
the function which we write, g composed 
with f. 
The domain is A and the co domain is C 
and its defined in its way, g compose 
with f applied to an input x is g applied 
to the result of f applied to x. 
So for example, here's a function f whose 
domain is 1, 2, 3, whose co domain is A, 
B, C, and D. 
Here's a function g whose domain is A, B, 
C, and D and whose co domain consist of 4 
and 5. 
Here's when we compose them we get this 
function. 
This is G composed with F, it takes 
elements from the domain of F, and maps 
them to the elements of the co-domain of 
G. 
Here's another example, if G is the 
function that squares it's input, and F 
is the function that adds 1 to its input. 
G composed with F applied to X is X 
plus 1 squared. 
Now, let's use composition to, derive the 
Caesar encryption function. 
First, we define the function f by 
mapping a to 0, b to 1, c to 2, and so 
on. 
Define g to be the function that adds 3 
mod 26. 
And define h to be the function, that 
goes back from the integers, zero through 
25 to the letters A through Z. 
Then h composed with g composed with f is 
the Caesar encryption function. 
So, here are the three functions 
indicated, and here is the function we 
get by composing all of them together. 
The parentheses are not needed because 
function composition satisfies 
associativity. 
This is what associativity means. 
H composed with the result of composing G 
with F is the same as H composed with G 
composed with F. 
Simple proof for any element x of the 
domain of f, we take h composed with the 
composition of g and f and apply it to x. 
That's the same as h applied to the 
result of applying, the composition of g 
and f to x. 
And that's the same as applying h to the 
result of applying the composition of g to the result of 
applying f to x, and then we can unfold 
that to get the other form. 
We say that functions f and g are 
functional inverses of each other if f 
composed with g and g composed with f are 
defined and are identity functions. 
And a function that has an inverse is 
called an invertable function. 
Now, a function F from D to F is said to 
be one to one if F of X equals F of Y 
implies X equals Y, for every X and Y in 
the domain. 
That means that there are no two distinct 
elements that have the same image. 
Well, here's a picture of a function 
that's not one-to-one because these two 
elements of the domain have the same 
image. 
A function F is onto If for every z in 
the co-domain there exists an element, 
say a, in the domain, that maps to z 
under that function. 
So here's an example of a function that 
is not onto. 
Because here's an element in the 
co-domain that's not the image of any 
element in the domain. 
Now, invertible functions are one to one. 
Here's the proof. 
Suppose, you have an invertible function 
f and it's not one to one. 
So there exists two elements, X1 and X2 
that are different. 
Where they have the same image, y under 
f. 
Well what's the inverse of f? 
The inverse of f applied to y, is x 1. 
But the inverse of f applied to y is also 
x 2, by definition of the inverse. 
And both can't be true. 
A function such as f inverse has to have 
only one image for each input. 
So that, that proves the the proposition. 
Similarly, invertible functions are onto. 
Suppose you have an invertible function 
f, and it's not onto. 
So there exists some element, say Y hat, 
in the co-domain that's not the image of 
any element in the domain. 
Well, let's consider the inverse, F 
inverse. 
This is a function. 
So on input, Y hat, it has some output 
some value X hat. 
In the co-domain of F inverse, that is in 
the domain of F. 
By the definition of inverse, that would 
mean that F maps X hat to Y hat. 
But that's a contradiction, so that 
proves the proposition. 
In fact, and this is an important theorem 
we'll use. 
A function is invertible if and only if 
it is one-to-one and onto. 
The proof is fairly simple. 
It uses the two propositions we just saw 
and a little bit more work. 
That means that if a function is 
invertible, it's one-to-one and onto. 
We already saw that. 
And if a function is one-to-one and onto 
its invertible. 
A procedure is a description of a 
computation that ,given an input, 
produces an output. 
Here's an example, a computation problem 
is an input-output specification that 
procedure might be required to satisfy. 
One that we'll look at later is integer 
factoring. 
Where the input is an integer, m, greater 
than 1. 
And the output is a pair of integers 
whose product is m. 
Now, there are some differences between 
these ideas. 
Functions and computational problems 
don't tell us how to compute an output 
from an input. 
Whereas a procedure does. 
And there may be multiple procedures 
satisfying for the same spec, so solving 
the same computational problem. 
A computational problem might allow 
several outputs for each input. 
That's true of this integer factoring 
problem, for example. 
And the same procedure can be used to 
compute different functions. 
In this course, we'll write procedures in 
Python. 
For example, this is the definition of a 
procedure to multiply the two inputs. 
You might be used to calling these 
procedures functions, but we're going to 
reserve the term function to refer only 
to the mathematical object. 
Now, in Python we will often use a 
structure called a dictionary to 
represent a function whose domain is 
finite. 
For example, the function depicted here 
can be represented by this dictionary. 
It maps a to 4, b to 4, c to 5 and d to 
5. 
Now, a special kind of function is a 
probability distribution function. 
It's used to specify the relative 
likelihood of different outcomes of a 
single experiment. 
The signs of probability, which is a non 
negative number to each possible outcome. 
And the probabilities of all the positive 
outcomes must sum to 1. 
So, for example in the game of Scrabble, 
at the very beginning the, the bag is 
filled with, filled with tiles. 
There are 9 As 2 Bs, and so on. 
So at the very beginning consider the 
experiment of drawing a tile from the 
bag. 
Since the total number of tiles is 98, 
the probability of drawing an E, is 12 
over 98 because there are 12 E's. 
The probability of drawing an A is 9 over 
98 and so on. 
The denominator is 98 so that all these 
probabilities will sum up to 1. 
We represent that function by this Python 
expression. 
Often the probability distribution is 
what's called a uniform distribution 
which simply means that it assigns the 
same probabilities to all the outcomes. 
So for example rolling a die, the 
possible outcomes are 1 through 6 and the 
probabilities are all the same. 
They all have to be 1/6th because 
remember probabilities have to sum to 1. 
In Python, you'd represent this function 
by this dictionary. 
Maps 1 to 1/6, 2 to 1/6, and so on. 
Another example. 
To model the flipping of two coins. 
The possible outcomes are heads heads, 
heads tails, tails heads, and tails 
tails. 
And the probabilities are all 1/4. 
We represent that function in python by 
this dictionary. 
It maps the pair heads, heads to 1 4th, and 
so on. 

