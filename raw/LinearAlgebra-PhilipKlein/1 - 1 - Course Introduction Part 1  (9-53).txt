
You have a super power. 
You already realize that being able to 
code, gives you the ability to create 
things with just your mind and your 
fingers. 
I see programming as a way of learning 
mathematics, writing programs and running 
them on data is a learning modality. 
Your ability to create vectors and 
matrices, will enable you to build stuff 
with them and do fun things. 
Through coding, we escape two pitfalls of 
the traditional linear algebra course. 
Some linear algebra courses, are a bit 
too abstract for many of us. 
This makes the concepts hard to grasp and 
keeps us at a remove from the 
applications. 
Some of the linear algebra courses are 
too tedious, they require a lot of hand 
calculation, possibly with the aid of a 
calculator. 
Some hand calculation is useful, to help 
acquaint you with the operations. 
But it should not be considered the only 
way of learning a procedure, my hope is 
that by coding computational methods in 
linear algebra, you'll better learn both 
the methods. 
And the way they apply to real problems 
and real data. 
The example problems I use in this course 
have a computer science flavor to them. 
That's because, I'm a computer scientist 
and I expect many of you have some 
background in computer science. 
I developed this course because I felt 
too many students of computer science 
were going off and learning linear 
algebra and coming back. 
And saying well that's nice, but what 
does it have to do with what I'm 
interested in. 
By drawing on your ability to 
program, I hope to give you an 
introduction to linear algebra that plays 
to your strengths, gives you the power to 
build things that are fun and 
interesting. 
That makes linear algebra come alive for 
you. That puts in your hands the tools to 
use linear algebra in the problems and 
applications that are interesting to you. 
Programming is the power to create and 
creation has a two way relationship with 
understanding. 
My twofold hope then is, that the 
creating you do in meeting the challenges 
of this course will help you to reach 
greater understanding of the material. 
And two, that, that greater understanding 
will give you the ability to create even 
more. 
In addition, I want to highlight three 
specific concepts from programming that 
are relevant to this course. 
Data abstraction, procedure abstraction, 
and what I would call procedural 
sophistication. 
First, data abstraction. 
In the language of object oriented 
programming, you can have several classes 
that implement a single interface. 
A client of that interface need not know 
the details of the class used to 
implement that interface. 
In linear algebra, data abstraction gives 
us the concept of a field, think of a 
field as a class that implements the 
operations plus, minus, times, and 
divide. 
As long as a class's implementation of 
these operations satisfies certain 
algebraic rules, we can use it to do 
linear algebra. 
Being able to slot in any field, gives 
linear algebra greater generality and 
therefore greater applicability. 
For example, the field of real numbers 
can be used in doing computer graphics or 
computer vision. 
The field consisting just of 0 and 1 can 
be used for applications like 
cryptography. 
And the field of complex numbers comes up 
in signal processing and in analyzing 
dynamic processes, processes that unfold 
over time. 
At the beginning of this course, we 
informally describe the field and we 
use it throughout the course. 
I will say though it's a somewhat leaky 
abstraction. 
Towards the end of the course, we have to 
get more from our field so, that field 
that consists just of 0 and 1 has to be 
put aside for that part in the course. 
The field consisting of the complex 
numbers, is crucial for some of the 
advanced topics in linear algebra. 
Unfortunately, we won't get to some of 
those topics in this version of the 
course, more on that topic later. 
There's a lot to learn here, but it boils 
down to learning certain kinds of 
addition and multiplication operations. 
In this part of the course, in order to 
better learn these operations, you'll 
implement your own vectors and matrices. 
You won't have to do this from scratch. 
Since you'll be working from a template, 
all you have to do is fill in the 
implementations of these operations. 
Second, procedural abstraction, 
programmers quickly learn to work with 
APIs, Application Programming Interfaces. 
This means, they learn what a suite of 
procedure calls do, and how you can use 
these in combination to get things done. 
Programmers don't need to know how each 
of these procedures is implemented, it's 
enough to know what it accomplishes. 
In the middle third of this course, there 
are a lot of concepts rolling around, 
coordinate representation, bases, 
dimension, rank. 
Each concept on its own is not so hard, 
but it might be hard to keep them 
straight, to develop an understanding of 
the relationships between these concepts. 
To help you develop a feel for the 
connections between these concepts, you 
will write programs that realize the 
concepts and that build one upon the 
other. 
They all ultimately rely however, on some 
black boxes, procedures whose 
implementations we won't study, at least 
at first. 
Only once we've gotten through this 
middle part of the course, will we be 
able to open up the black box and see how 
it's implemented. 
In the meantime however, I expect you to 
work with this black box without knowing 
what's inside. 
Just as you would with the procedures of 
an API. 
Third, if you've done a fair bit of 
programming, I expect you've developed 
what I call, procedural sophistication. 
You're much better than the average 
person, and quite possibly better than 
even mathematicians from the pre-computer 
past, at understanding and coping with 
complicated procedures. 
You're not afraid of a bit of complexity, 
Even if you don't understand a procedure 
at first, you're able to work through it. 
Try some examples, get to know it, 
develop a feel for it over time. 
If you do have this skill, it will help 
you a lot in the middle third of the 
course and in the final third. 
In the middle third of the course, while 
we're dealing with all these concepts 
swirling around, you're going to see some 
fairly complicated mathematical proofs. 
This sounds intimidating and with good 
reason, these proofs are a little 
difficult to follow. 
But fundamentally, they're procedural in 
nature, they're algorithmic proofs. 
And so, because of your procedural 
sophistication, you'll be better able to 
follow them. 
Understanding these proofs, might require 
you to think harder than your used to, 
but it turns out that many of these 
mathematical proofs are procedures in 
disguise. 
Keep that in mind and maybe they won't 
turn out to be quite so difficult. 
To help you along, I'm assigning problems 
in which you'll write programs that mimic 
the structure of the proof, to help you 
in the process of relating proof to 
procedure. 
I'll assign some problems, in which you 
write programs that embody the idea of 
the proof. 
In the final third of the course, we'll 
start opening up those black boxes and 
learning the procedures that are inside. 
Here too, your procedural sophistication 
will help you. 
We'll code these procedures and your 
programming ability, will help you 
develop greater understanding. 
You are here, at the end of the course if 
you're still with us, you'll be here. 
The first third of the course consists of 
a lot of mechanics and definitions, 
working with vectors and matrices. 
This section of the course, introduces 
more questions than it answers. 
The fundamental questions and 
computational problems that are 
introduced in this part of the course, 
will be addressed throughout the rest of 
the course. 
The middle third of the course, the 
concepts we will study will illuminate 
the topic enabling us to answer many of 
the questions that have come up so far. 
We'll get, only a hint at this point 
though of the computational solutions, 
the procedures that we'll study in the 
last third of the course. 
The real solutions to the computational 
problems come in the final third of the 
course, where we study what makes the 
black box, the solver work. 
At this point I must confess, there's a 
fourth third to the course that I teach 
my brown students. 
The material around here consists of 
advanced topics that build on everything 
we've done before. 
Some of the most interesting applications 
can only be addressed in that part of the 
material, including image compression. 
Page rank, dimensionality reduction and 
principle components analysis. 
I very much wanted to teach these 
advanced parts to you, but eight weeks 
was deemed quite long enough for an 
online course. 
So, instead I plan to offer an additional 
course for those who endure this course. 
So, hold on to your code. 
A word about this diagram. 
I'll make it available on the course 
site, but don't try to read it all. 
It's a map, and just as you wouldn't read 
all of a road map, you won't find it 
useful looking at this until you've 
covered some of the territory. 
It's there to help you keep track of 
where you are and where we're going. 

