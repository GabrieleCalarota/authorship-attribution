
Recall all or nothing secret-sharing. 
The method to split a secret into two 
parts so that both parts are required to 
reconstruct the secret. 
So, we could generalize this to split the 
secret among, say four teaching 
assistants, TAs. 
So that only together they could all 
recover the secret, but any three of them 
would know nothing about the secret. 
However, it's risky to depend on all four 
TAs coming together at a scheduled 
meeting. 
So, instead, we're going to search for a 
secret sharing scheme that's based on a 
threshold. 
That is, that any three TAs could jointly 
recover the secret, but any two TAs have 
no idea what the secret is. 
There are schemes that use fields other 
than GF(2). 
But let's see if we can do it using 
GF(2). 
So, here's our first attempt. 
We select five 3-vectors over GF(2). 
a0, a1, a2, a3, and a4. 
a0 will play a special role. 
And these vectors have to be chosen to 
satisfy this requirement, that every set 
of three of them are linearly 
independent. 
To share a one bit secret S, among the 
TAs, here's what I do. 
I randomly select a 3-vector U, such 
that, a0 times U equals that bit S. 
Now, I keep U secret, but I compute these 
other dot products. 
Beta 1 is a1 times, dotted with u. 
Beta 2 is a2 dotted with u. 
Beta 3 is a3 dotted with u. 
And Beta 4 is a4 dotted with u. 
Then, I give each of these bits to a TA. 
Beta 1 goes to TA 1 and so on. 
I call those the TAs shares. 
Now, suppose three TAs want to come 
together and reconstruct the secret. 
Can they do it? 
Suppose, for example, the TAs 1 through 3 
want to reconstruct the secret. 
What do they do? 
They solve the matrix vector equation. 
a times x equals B, where a is the matrix 
whose rows are the vectors a1, a2, a3. 
And the right-hand side, B is the vector 
whose entries are the dot products, Beta 
1, Beta 2 and Beta 3. 
Now, this matrix is square and the rows 
are linearly independent by their 
requirement. 
So, the matrix is invertible. 
So, there's only one solution to this 
matrix vector equation, and it must be, 
therefore, this vector, U, which we know 
is the solution. 
Once the TAs solve this matrix vector 
equation using the solver, they have u. 
And so, they can reconstruct the secret, 
S, by just taking the dot-product of a0 
with the vector u. 
So, we see that three TAs can reconstruct 
the secret. 
Now, suppose two TAs decide that they 
want the secret. 
They're not supposed to be able to 
construct the secret. 
But they've gone rogue. 
So, TAs 1 and 2 know the bits, Beta 1 and 
Beta 2. 
Can they use that to figure out the 
secret? 
We'll see that the answer is no. 
The information that they have is 
consistent with the secret bit being 0 
and consistent with the secret bit being 
1. 
Well, consider this matrix a whose rows 
are a0, a1, and a2. 
This matrix is invertible by the 
requirement. 
So, each of these two matrix equations 
has a solution. 
Exactly one solution in fact. 
I put 0 as the first entry in the 
right-hand side of the first equation and 
1 as the first entry in the right-hand 
side of the second equation. 
The solution to the first equation is a 
vector v such that the dot-product of a0 
with v is 0. 
And the solution to the second equation 
is a vector V such that the dot-product 
of a0 with v is 1. 
So the information that the two TAs have 
alone is consistent with the secret bit 
being 0, and with the secret bit being 1. 
So, they don't learn the value of the 
secret bit. 
This scheme seems great. 
So, what goes wrong? 
This scheme requires us to choose five 
3-vectors over GF(2) that satisfy this 
requirement. 
And it turns out there are no such five 
vectors. 
So, we have to do something a little bit 
more sophisticated. 
Instead, we're going to seek ten 
6-vectors over GF(2). 
a0, b0, a1, b1, and so on, and these form 
pairs. 
The first pair is a0 and b0. 
The second pair is a1 and b1 and so on. 
And the requirement that these vectors 
must satisfy is this, that for any three 
pairs, the corresponding six vectors are 
linearly independent. 
How would we use these vectors in secret 
sharing? 
To share two secret bits, s and t. 
I'll, I'll do the following. 
I'll, I'll choose a secret vector u, such 
that a0 times u is the secret bit s and 
b0 times u is the secret bit t. 
I give TA 1 the two bits Beta 1, which is 
the dot-product of a1 with u, and gamma 1, which is the dot-product of 
b1 with u. 
Similarly, I give TA 2 to the two bits, 
beta 2, which is the dot product of a2 
with u, 
and gamma 2, which is the dot product of 
b2 with u, and so on. 
So, each TA has a pair of bits. 
As that TAs share. 
Suppose three TAs want to get together 
and figure out the secret bits s and t. 
They set up a matrix-vector equation that 
allows them to derive those bits. 
Suppose, for example, that TAs 1, 2, and 
3 came together. 
They would solve this equation. 
They would put their pairs of vectors in 
to form this matrix, and put the bits 
that they know in the right-hand side. 
Because of the requirement on these 
vectors, these six vectors are linearly 
independent. 
And therefore, this matrix is invertable, 
so that there's exactly one solution to 
this matrix vector equation. 
That way they can get the vector u, and 
from that, derive the secret bits. 
On the other hand, suppose TAs 1 and 2 go 
rogue, and want to discover the secret on 
their own. 
They possess the bits, Beta 1, Gamma 1, 
Beta 2, and Gamma 2. 
Are these bits consistent with all the 
possible secrets? 
For example, are they consistent with s 
being 0 and t being 1? 
Well, they are if there's a vector that 
solves this equation. 
Where I've put 0 and 1 as the first 
entries of the right-hand side. 
Now, since these vectors are linearly 
independent, there does exist a solution. 
Exactly one solution. 
Similarly, no matter how you set these 
first two entries, there exists a 
solution. 
So, that shows, that the shares, that the 
TAs wanted to have, don't tell them 
anything about the values of the secret 
bits. 
The secret remains safe. 

