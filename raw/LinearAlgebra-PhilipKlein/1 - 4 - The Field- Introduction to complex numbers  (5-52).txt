
Here's an equation. 
x squared equals minus 1. 
What are the solutions? 
Well, if we stick to the regular numbers, 
the real numbers, there aren't any 
solutions. 
Mathematicians invented i to be one 
solution. 
You can use i to solve other equations. 
For example, x squared equals minus 9, 
the solution is 3 times i. 
Now, numbers such as i minus i, 3 times 
i, and so on, are called imaginary 
numbers. 
You can use the imaginary numbers to 
solve other equations. 
x minus 1 quantity squared equals minus 9 
has the solution 1 plus 3 times i. 
When you add a real number to an 
imaginary number, you get a complex 
number. 
A complex number has a real part and an 
imaginary part. 
The complex number is the real part plus 
the imaginary part times i. 
So, both real part and imaginary part are 
real numbers. 
Let's try working with complex numbers in 
Python. 
Instead of i, Python uses j because in 
electrical engineering, i traditionally 
means current. 
We enter the imaginary number 3j and 
Python says yeah, I got it. 
If you enter just j by itself, Python 
thinks you're referring to a variable. 
So instead, we can type 1j. 
Now, we can use the usual arithmetic 
operation, such as plus, minus, times and 
divide. 
And they work pretty much as you'd 
expect. 
Know that adding two complex numbers 
means separately adding their real parts 
and their complex parts. 
We can check our solution to x squared 
equals minus 9. 
That works out. 
We can extract the real and imaginary 
parts of a complex number using a dot 
notation. 
x.real and x.imag. 
Now, this may remind you of object during 
the programming. 
And access to instant fields. 
Yup, complex is a class in Python. 
We see that in Python you use plus to add 
real numbers or complex numbers. 
Use of the same name for different 
procedures is called overloading. 
And, overloading turns out to be quite 
useful. 
Let's write a procedure, solve. 
To solve the equation a x plus b equals 
c. 
Well, this is straightforward in Python, 
and we can use this to solve an equation 
like 10 x plus 5 equals 30, right? 
We plug in the numbers, and we get the 
solution. 
But because of Python use of overloading, 
we can use the same procedure to solve an 
equation that involves complex numbers. 
We just plug in the same complex numbers, 
and we get the solution. 
Also a complex number. 
So, the same procedure that we define for 
real numbers happens to work, or complex 
numbers as well. 
When we want to refer to a field without 
specifying exactly which field, we'll use 
this notation, with this blackboard f. 
So, why does this procedure give the 
correct result for complex numbers as 
well as for real numbers? 
It's because it's just based on a few 
simple facts about the arithmetic 
operators. 
For example, division is the inverse of 
multiplication. 
Subtraction is the inverse of addition. 
Similarly, much of linear algebra is 
based on a few simple facts about the 
operators plus, minus, times and divide. 
Division is the inverse of 
multiplication. 
Subtraction is the inverse of addition, 
and other Algebraic properties such as 
that addition is commutative. 
The order doesn't matter. 
And multiplication distributes over 
addition. 
So, you can plug in any collection of 
numbers with their own arithmetic 
operators, plus, minus, times and divide. 
And as long as these satisfy these basic 
algebraic properties. 
You can do linear algebra with that kind 
of numbers. 
A collection of numbers that has these 
properties is called a field. 
So, we're just going to study three 
fields in this class. 
The field of real numbers, because that's 
a very familiar one. 
The field of complex numbers, and the 
finite field, which I call GF 2, which 
consists just of 0 and 1. 
Now here's why we're studying the complex 
numbers. 
Well, for one thing, the set of complex 
numbers is very similar to the set of 
real numbers. 
So we can, we can experience this idea of 
abstracting and generalizing of, of, of 
choosing different fields without it 
being that different. 
Now, another reason that complex numbers 
are convenient is that they are built 
right into Python. 
Also, complex numbers are, in some sense, 
the intellectual ancestors of vectors. 
So, some of the basic operations that we 
can do with complex numbers. 
We'll later learn how to do in higher 
dimension with vectors. 
And finally, in more advanced parts of 
linear algebra, complex numbers are 
essential. 

