
[BLANK_AUDIO]. 
Now we'll turn to dot-product over GF(2). 
So, here's a couple of GF(2) vectors and 
we're taking the dot-product in the usual 
way. 
We line 'em up, multiply corresponding 
entries, and then add the result. 
The difference is that we're adding using 
GF(2), so one plus zero plus one, plus 
zero plus one ends up being, one. 
Let me give you an application of this, 
of Dot-product over GF(2). 
A usual way of logging into a computer is 
by sending the password over the wire to 
the computer. 
The computer checks to see if the 
password matches its record and lets you 
in if it does. 
Now that's dangerous, because if an 
eavesdropper managed to see the password 
going over the wire. 
She could then break into the computer 
herself. 
So here's an alternative approach, its 
called challenge-response. 
The computer ask you a question and you 
give the answer based on your knowledge 
of the password. 
You do this a few times until the 
computer is convinced, yeah this human 
knows the password, better let him in. 
This is potentially safer against an 
eavesdropper because the password is 
never sent over the wire. 
Here is a simple authentication scheme. 
Not one that's really secure, but one 
that illustrates the idea of, of a 
dot-product over GF(2). 
So the password is some long n-vector 
over g f two, we'll call x, and the 
question is another n-vector, which we'll 
call a. 
And the human sends back one bit, namely 
the dot product of the, the question a 
with the password x. 
So here's an example. 
Let's say the password is 1, 0, 1, 1, 1. 
Okay? 
Obviously, this is too short to be 
secure. 
But it's good for illustration. 
Maybe the computer chooses as its 
question, the vector, 0, 1, 0, 1, 1. 
And sends that to the human. 
The human computes the dot product of 
that question. 
With the password, and ends up with 0, 
and sends back 0 as the response to this 
question. 
Let's call that response beta 1. 
And this is repeated several times. 
Now how can an eavesdropper cheat? 
Well let's say she observes a sequence of 
challenges, a1, a2, a3, and so on. 
And she observes the humans' 
corresponding responses. 
Beta 1, beta 2 and so on. 
Can she use these to find the password? 
Well, she knows that the password must 
satisfy these equations. 
So, if she can solve this set of 
equations, can she find the password? 
Well, there are two questions. 
Maybe this set of equations isn't enough 
to precisely pin down the true password. 
So how many solutions are there to this 
system of linear equations? 
And how could you even compute them? 
So, we'll study these questions later. 
What's another way to cheat? 
There might be a way that Eve, even if 
she doesn't know the password, can figure 
out the answer to a challenge. 
So, in order to explore that, we have to 
introduce a couple of algebraic 
properties of the dot product. 
So, commutativity, homogeneity, and the 
distributive law. 
So let's say Eve observes two challenges. 
0 1 0 1 1 and 1 1 1 1 0 and the responses 
that the human gives for those 
challenges. 
Here's how she can figure out the 
response for a challenge she hasn't yet 
seen. 
The dot-product of the sum of these two 
vectors with x is equal to the sum of the 
dot-product using the distributive law. 
She knows the dot products for each of 
these 2, she can add them up to get the 
response for the sum. 
So for the challenge that's the sum of 
these 2 vectors she can compute the right 
response. 
More generally suppose some vector 
unknown vector satisfies a bunch of 
equations; are there other equations 
that it also satisfies? The answer we'll 
have to wait. 

