
Now I'll introduce another vector 
operation, dot-product. 
The dot-product of two vectors is the sum 
of the product of corresponding elements. 
So, for example, with vectors 
represented. 
As lists u1 through un, and V1 through 
Vn, the dot-product is the sum of U1 times 
V1, plus U2 plus V2, and so on. 
Now notice that the output of dot-product 
is a scaler not a vector. 
For this reason dot-product, which is 
sometimes called, scaler product Here's 
one use of dot-products. 
Define D to be the set of the four main 
ingredients of beer. 
We can define a cost vector that maps 
each of those ingredients to the cost per 
unit amount of that ingredient. 
And a quantity vector that maps each of 
those ingredients to a quantity. 
Then the total cost of the dot-product of 
the cost vector with the quantity vector. 
We can also define a value vector that 
maps each of the ingredients to say the 
caloric content. 
And then the total calories represented 
by a pint of beer is computed as the 
dot-product of these two vectors. 
A sensor node is a small hardware device 
that has a bunch of components in it, 
such as a CPU, radio, some kind of sensor 
and some memory. 
Now, these things are battery driven. 
This is where you put the batteries, and 
usually you leave them in remote 
locations. 
So usualization of energy is very 
important. 
We want to be able to we want the, the 
sensor node to not use much energy. 
Now, suppose we know for each of these 4 
hardware components how much energy it 
draws. 
Okay, we'll represent that as a vector. 
The domain of the vector would be the 
labels of the individual hardware 
components. 
So here's an example of such vector. 
It maps the radio to the amount of 
current that the radio takes when it's 
on. 
the sensor to the amount of current the 
sensor takes when it's on and so on. 
Let's say we have a test period. 
During which we know how long each 
hardware component is on. 
So this might be the vector representing 
a test period. 
So the radio was on during the test 
period for 0.2 seconds and so on. 
The total amount of energy consumed 
during the test period can be expressed 
as the dot-product of the duration vector 
with a rate vector. 
Now, it turns out that for these devices. 
We can't measure the current draw for 
each of the individual hardware 
components. 
We can only measure the total drawn by, 
by the sensor node. 
And, we're interested in figuring out how 
much each component draws. 
How can we do that? 
We can't, for example, turn on the memory without 
turning on the CPU as well. 
So here is the idea, we run several tests 
on the sensor node and in each test we 
have an idea of how long each component 
is during the test. 
We measure the total amount of current 
flow during that test. 
Now we can set up an equation, a linear 
equation for each test period that says 
that the dot-product. 
The duration vector for that test period 
with the rate of consumption is some 
specified amount. 
The total draw of energy during the test 
period. 
Now, this, this vector rate is actually a 
vector of variables. 
Is, and the idea is that by solving this 
collection of equations, we can figure 
out what the entries of the rate vector 
are. 
That is, how much current is drawn by 
each of the hardware components. 
Now there are questions that come up. 
Can we use these equations to find 
numbers for the rate of consumption of 
the individual hardware components. 
And supposing we find those equations, is 
that enough to pin down precisely what 
those values are. 
Or is it in fact that the there might be 
multiple solutions to this list of 
equations? 
The answers to these questions will have 
to wait a little bit. 
So more generally, given a set of linear 
equations like this called a linear 
system, how do we know if there's only 
one solution. 
And what if your data are slightly 
inaccurate? 
Can we, nevertheless get a solution 
that's very close to the true solution. 
So, we'll have to wait on these 
questions. 
Here's another use of dot-product to 
measure the similarity of vectors. 
Well, let's say we, we look at a, a 
period of time in which senators are 
voting on many, many bills. 
You could represent each senator's voting 
record as a vector. 
Where for each bill, there is an entry, 
plus, minus, plus 1, minus 1, or 0, 
depending on how the senator voted. 
Say, plus 1 if the senator voted in favor 
of a bill, minus 1 if the senator voted 
against the bill, and 0 if the senator. 
So we have a vector representing how the 
senator voted on many bills. 
Now we can compare that senators voting 
record to another senator's voting record 
by taking the dot product of those to 
vectors. 
For corresponding entries, if both of 
them are plus 1, then this contributes a 
1 to the dot-product. 
If both of them are minus 1, this 
contributes a 1 to the dot product. 
In either case, that means the senators 
agreed on that bill. 
If one of them voted, in favor and one 
voted against, then the product of 
corresponding elements is minus 1. 
And so that takes away from the dot 
product. 
Overall the value of the dot product is 
high if the two senators agreed a lot and 
low or even negative if the senators 
disagreed a lot. 
Here's another application, you want to 
search for a short audio clip within a 
larger audio segment. 
Now audio is, some crazy waveform, I've 
shown it here. 
A digitized version of audio looks more 
like this: 
the, the audio signal is sampled at 
regular intervals. 
So really, a digital representation of an 
audio 
segment is a bunch of numbers. 
Take the sample of the signal at various 
times. 
So we can compare, let's say, two equal 
length audio segments by taking the 
dot-product. 
At a particular moment if both of them 
are positive or both of them are 
negative, that, that will contribute 
positively to the dot-product. 
If one is positive while the other is 
negative, that will contribute 
negatively. 
So, the higher the dot-product, the 
greater the similarity between these two 
audio segments. 
But now let's get back to the problem of 
finding a short audio clip within a 
longer audio segment. 
We don't know exactly where the audio 
clip is suppose to appear in, in the 
longer segment. 
But lets say we have some guess as to 
where it is. 
So we can take a dot-product of the 
vector representing the short clip with 
the corresponding subsequence of the long 
audio segment. 
And again the higher the dot-product the 
greater the similarity between them. 
Now ordinarily we don't know where the 
short clip appeared in the long segment, 
that's why we're carrying out this 
computation. 
The way to handle that is to take lots of 
dot- products. 
Think of all the different possible 
locations for for the, the short audio 
clip it might be at the beginning of the 
segment, slightly in and so on. 
Lots and lots of dot products but perhaps 
the higher dot products give us clues as 
to where the best match is. 
Now this seems like a lot of dot products 
to take, but there are shortcuts in particular 
there's an algorithm called the Fast 
Fourier Transform 
 that enables you to take all these dot 
products very efficiently. 

