
﻿And now a word about programming, I have 
chosen to teach this course in Python, it 
has built-in sets, lists and 
dictionaries. 
Data structures that make it particularly 
well-suited to the somewhat idiosyncratic 
approach I take to implementing vectors 
and matrices. 
If you've worked with Python before, you 
are probably acquainted with Python's use 
of these data structures. 
However, my favorite feature of Python is 
one that even Python programmers might 
not be so familiar with, the 
comprehension. 
A comprehension is an expression, that 
produces a set, a list, or a dictionary. 
It's very concise, but also easy to read, 
as long as you're used to it. 
A comprehension gets you some of the 
power of functional programming, but are 
accessible even to those who think lambda 
is some kind of risqué dance. 
A comprehension syntactically resembles 
the notation used by mathematicians, to 
write down sets. 
Perhaps most important for our purposes, 
a comprehension allows you to write a 
procedure, with only a single line 
without sacrificing readability. 
This is important, because in many of the 
quizzes we ask you to write a single line 
procedure. 
Your answer to the quiz is matched 
against patterns that we've prepared. 
That means that in order for your quiz 
answer to be judged correct, you have to 
write it the way we have in mind. 
Another reason you need to understand 
comprehensions is that, I use them in the 
code that I write and show you. 
Finally, if you've mastered 
comprehensions, your Python code will be 
more concise and more readable. 
Okay, as you can probably tell, I'm a 
little obsessed with comprehensions. 
Anyway, we'll teach you the part of 
Python that you need to know for the 
course. 
The first lab assignment we'll go through 
sets, lists, dictionaries, and 
comprehensions for all these things. 
Even if you already know Python, you 
should really skim through that first 
assignment to, review the features of 
Python that we use and to learn my 
terminology for them. 
The second lab assignment, is intended to 
give you more practice in programming 
with Python. 
These two assignments, don't depend at 
all on the lectures and you can start 
them right away. 
Also, they don't count that much towards 
your grade, so don't worry over much 
about your performance on these 
assignments. 
My main bit of advice, try stuff out, my 
intention is that you be empowered to 
work with vectors and matrices and the 
algorithms that operate on them. 
Bring it home, give these concepts 
substance. 
Don't be content to just watch some 
videos, whether on paper or with the 
computer, you need to work with the 
concepts we are developing, in order to gain understanding. That's 
where the real learning takes place, not 
when you're listening to me drone on. 
I can't emphasize this enough, if you 
don't understand something or even if you 
do, try it out. 
In the video lectures I'll show you my 
working with Python, this isn't just for 
show, this is how I've managed to learn 
the concept. 
By trying things out with Python. 
In this course, I don't assign a lot of 
drills. 
Many linear algebra course do involve a 
lot of drills and there's actually a good 
reason for that. 
You need a lot of practice. 
My favorite scene in the movie, The 
Matrix, is when Morpheus straps Neo into 
a chair, and inserts what looks like a 
70s era video cassette into a machine. 
And streams into Neo the knowledge of how 
to fight. 
In a few minutes, he's an expert. I wish 
I could strap my students into chairs and 
teach them that way. 
But the brain doesn't work that way. 
The input device is not what's limiting, 
you need to practice. 
I'm giving you the tools, but you have to 
take the initiative. 
I trust that you can find lots of 
examples, and drills out there on the web 
or in the many books on the subject. 
My second bit of advice is, unfortunately 
you're going to have to do a little bit 
of memorization. 
There are a lot of concepts and 
definitions, and you need to keep them 
straight. 
In particular, in the early part of the 
course we'll discuss difference 
interpretations of matrix-vector, 
vector-matrix and matrix-matrix 
multiplication. 
You need to, really learn these 
interpretations in order to even 
understand the lectures that come 
afterwards. 
Now a word about proofs, mathematical 
statements, lemmas, propositions, 
theorems, are an essential part of linear 
algebra. 
They underlie the concepts that we use. 
Since it’s easy to be fooled by your 
intuition, we need mathematical proofs to 
convince us that these statements are 
true. 
In this course, I present proofs for most 
of the theorems relevant to the topics we 
discuss. 
Due to limitations of massive online 
courses, I'm not going to require you to 
produce mathematical proofs. 
If you don't consider yourself 
mathematically inclined, you might be 
tempted to just skip the proofs. 
That would be a mistake, mathematical 
proofs are not there just to convince, 
but to provide insight. 
The best kind of proof helps us 
understand why a theorem is true. 
Working through the proof, trying to 
understand its steps, helps us understand 
the meaning of the theorem and also helps 
us learn the theorem. 
Since I'm a coder, I tend to think of 
things algorithmically or procedurally. 
So, I've chosen proof that lend 
themselves to that kind of thinking, 
procedural or algorithmic proofs. 
Sometimes, I'll ask you to code a 
procedure that follows the structure of 
the proof. 
The resulting procedure is not generally 
the most practical way to solve the 
problem, but it will help you gain 
insight into the proof. 
This will help you learn the proof, it 
doesn't necessarily give you the best way 
to solve the problem. 
Now a disclaimer, I'm not trying to train 
you to develop the next linear algebra 
library. 
For one thing, that would require a deep 
knowledge of numerical analysis. 
Which is at least in part, the ability of 
numerical algorithms to tolerate 
round-off error. 
You won't always learn the most efficient 
or most accurate way to solve a problem. 
The methods I teach are a compromise 
between, on the one hand, efficiency and 
accuracy and, on the other hand, 
pedagogical value. 
Now, a word about the assignments. 
There are three kinds of assignments each 
week first, quizzes. 
Quizzes are given in the videos or right 
after the videos. 
And, they're there to reinforce the 
material. 
Your performance on quizzes doesn't enter 
into your grade, but you will be expected 
to know and understand the answers to all 
the quizzes. 
And in fact, some of the later 
programming assignments build on those 
answers. 
Another word about quizzes, we use 
pattern matching to judge your answer 
right or wrong. 
If your particular solution doesn't match 
the pattern, it'll be judged wrong. 
I know how frustrating it is to be told 
your answer is wrong, when you are pretty 
sure that it's a correct answer. 
We plan to provide a button for you to 
click on, when you're sure your answer is 
right. 
Now, we won't get back to you about the 
answer, but we'll use this feedback to 
improve the course for the next time. 
A big chunk of the work you do each week, 
is the homework assignment. 
A homework assignment is just a 
collection of problems, some of those 
problems we won't ask you to submit. 
They're there only to help you learn. 
Others, both numerical problems and 
programming problems, we'll ask you to 
submit and we'll explain the submission 
process to you. 
Finally labs. 
A lab is like a homework assignment. 
It's a collection of tasks that you're 
supposed to carry out, but all these 
tasks are oriented towards one goal. 
It's in the labs, that you'll see some of 
the fun applications of linear algebra. 
I've written a textbook that students use 
in the Brown version of this course. 
It covers everything, including the 
advanced topics. 
We won't get to in this eight week 
course. 
It's absolutely not necessary for this 
online course, we'll present everything 
you need in the video lectures and in 
materials that accompany them. 
But, for those students who feel the need 
for the written record of the material 
and topics covered in the course, I'll 
link to it from their webpage. 
The course is difficult, it's going to 
take a lot of work on your part, but 
you're not alone. 
There's the forum where you'll be able to 
post questions and get help from your 
colleagues who are also taking the 
course. 
Let's get to it. 

