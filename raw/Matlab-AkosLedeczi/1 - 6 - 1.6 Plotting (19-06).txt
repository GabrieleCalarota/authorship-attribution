[MUSIC]
Okay, let's close Chrome here.
And there we see, still waiting for
us in the command window,
the command-window version
of the help page for plot.
No matter how you get the help page,
if you scroll down here at the bottom,
you usually find a “See-also” list.
Here's plot3, I wonder what that is.
Let's click that link.
Plot lines and points in 3-D space.
That seems pretty cool.
Let's suppose that that's sort
of what I was looking for.
Another thing I might do,
is look at an example.
I find it's easier to, be introduced to a
subject by an example than theory anyway.
That's really why this
course is like that.
Let's show you how easy
it is to try an example.
I'm going to copy this thing.
Here's “copy”.
And I'm going to paste it
in the command window.
And it runs.
That's the way all plots work.
They pop up in a separate
window called a figure.
See here, Figure 1.
This plot does look three dimensional.
It's supposed to be a helix.
But is it really 3D?
Well, you can't use, you know,
the 3D glasses with it, but
you can do something just as good.
I’m going to click this
little circle thing here.
And look at this.
You can look at it from any angle.
And that makes it pop out,
makes it look very 3D, to me, anyway.
By the way, if I click somewhere in this
command window, this thing disappears,
and if that happens to you, don't worry,
it's back here, it just went to the back.
You can always get it back that way.
Okay.
That was fun but I'm going to close this.
We're going to be a little
less ambitious and
go to 2D, because that's what
you’ll want 99% of the time.
Let's plot just three points on an x,
y graph to get the idea.
Okay, let's clear everything
using clear and clc.
There.
Now, the first thing we need to do to
plot something is to specify the x and
y coordinates for
the points we want to plot.
And here's how we can do that.
And the next thing we do is run
the plot function, like this.
And there's our plot.
Before we go further,
let me show you how you can keep this
nice figure from disappearing back there
behind the MATLAB desktop when
you click in the command window.
You just click this tiny arrow right here.
And the figure suddenly shows up in
its own little window right here in
the MATLAB desktop.
It's called “docking” the figure.
Okay, let's see what we
did to get this plot.
Command window's just this
little thing down here now.
Now we can see the first command
set the variable x_coordinates
equal to a list of three values,
1, 3 and 10.
Now, let's stop right there.
A variable has three
values at the same time?
Well,
actually x_coordinates has just one value.
It's this whole thing here.
Its one value is a vector.
And we get a vector by typing these
left brackets and right brackets.
We'll go into detail on that later.
But a vector is just an ordered list
of numbers, 1, 3, 10 in this case.
Those numbers are called the “elements”
of the vector.
We did the same thing for
the y coordinates.
And here's the first point, x equals 1.
x is plotted along the horizontal axis,
and y equals 2.
There is the 2, and
there is a line drawn to the second point.
You can see that x is equal to 3.
And y looks like it's
probably equal to about 4.2.
And here's the last point:
x equals 10, y equals 12.3.
When we typed x_coordinates and
y_coordinates in parentheses
after the function name, plot,
it meant that the values in those
variables were inputs to the function.
Inputs to a function are called
“input arguments” in programming, or
just “arguments”.
Plot expects to get two vectors as input.
And they have to have the same number
of elements, three in this case.
In MATLAB terminology, the number of
elements of a vector is called its “length”.
To you physicists out there the length
of the vector is the square root of
the sum of the squares of the elements,
and there's a MATLAB function called
“norm” that will give that to you.
but to get the number of
elements in the vector,
you use a MATLAB function named “length”,
like this.
So the value of the variable x_coordinates
is a vector of length 3,
whose elements are 1, 3 and 10.
When we entered those elements,
you may have noticed all those commas.
Before now, the comma had been used only
to separate two commands on the same line.
Now we see a second use,
separating elements in a vector here and
here, and a third use separating
the arguments to a function
here in our call the plot function.
The plot function gave us a nice plot,
but to tell the truth,
it's not quite what I wanted.
Instead of this jagged blue
line going from point to point,
I wanted to plot each point separately.
Well the plot function will do that for
us, if we know how to tell it to.
We do that by giving it a third argument.
Let's call it again,
let's slow down a bit as we type.
P-L-O-T, left peren.
After that first parenthesis,
this things pops up.
It's called a “hint”, and
it reminds you of the various
arguments that you can feed it.
I say “reminds you”, because you
really need to know how it works for
the hint to be much help.
I happen to know that the third argument
here, this second option called “linespec”,
is the so-called line-specification 
argument, and
you use it to tell plot
how to plot your points.
Let's do it this way.
This quote-asterisk-quote tells
plot to put an asterisk at each one of the
points instead of a line connecting them.
So, now I'm going to hit Enter.
And there we go.
Here's a point here, here's a point here,
and there's one there.
An asterisk usually means multiply, but
this asterisk has single quotes around it,
as you can see.
And that changes its meaning.
A single set of quotes around characters
tells MATLAB not to treat those characters
as the name of an operation,
or a variable or a function.
Instead, it treats the characters between
the quotes as just a string of, well,
characters.
And it's in fact, called a “string”.
To remind you that it's a string,
MATLAB highlights it in that
purplish pink color that we saw before,
or would you call that lavender?
And speaking of color, let's alter
our plot by changing the color, and
while we're at it shape of
the points we're plotting.
Let's go back to the help page and
see how to do that.
I'm going to use the doc command because
I have so little space in my tiny command
window, with this figure
taking all this space.
doc plot.
Here we go.
Two line plot.
Hm, what I'm looking for
is something about linespec.
Oh, here we go, linespec.
Let's see.
I can specify a solid line,
by using a minus,
these are the things that go in those
little quotes instead of the asterisk.
Here's a dashed line, and so on.
The marker I'm looking for is a square.
There we go, square,
so I use an “s” for that.
And what about the color?
Here's the colors.
Yellow and magenta, well, red, is an “r”.
Okay, so, now I know what to do.
What I'm going to do is
hit the up arrow key to repeat this command.
I want to go up to there.
And I'm going to alter this by putting in—-
What did we decide?——
red square.
You can put in rs or an sr,
it doesn't make any difference.
Now watch these little asterisks,
these blue asterisks change into
red squares when I hit Return.
Four, three, two, one, there.
And there you have it.
There's those little red squares.
There's other ways to
enhance these plots too, for
example we can add with a grid
with the “grid on” command.
There we have a nice grid, and
you can probably guess that you
can turn it off with the “grid off” command,
but we're going to leave it on.
And we can add labels to the axes like
this. Let’s add one to the x axis, xlabel.
And lets’s just make up
something, say, “Selection”.
See, that shows up right
away when we hit Selection.
And ylabel.
That's going to be “Change”.
And there's our ylabel.
And what about a nice title for
this thing?
Title. that’s name of that command.
“Changes in Selections
during the Past Year”.
And there it is.
Here we've got three more functions
that use strings as arguments.
We have seen plot puts a string here.
And there is a string,
there is a string, there is a string.
Just a string of characters.
And they are all colored this color,
whatever it is and
it's the same color that's used here, and
used here when you give arguments to
the doc, the grid and other commands.
MATLAB automatically chose
the ranges in this plot.
It chose 1 to 10 for
x, the horizontal axis, and
minus 6 to 14 for the vertical axis,
but you can change these
ranges with the “axis” command.
Let's do that.
Before I hit Enter, I'm going to
talk about what we've done here.
Axis takes a four-element vector.
One, two, three, four elements.
The first element is the left
end of the horizontal axis.
That's going to become 0.
The right end's going to be 12.
The bottom end of the vertical axis
is next, that's going to be minus 10.
And then,
the upper axis limit is going to be 20.
So, watch this. I'll hit Return and
you'll see these change.
So, now we go from 0 to 12,
and minus 10 to 20.
Just what we asked for.
Well, that's about it for plot,
there are other plotting functions too.
There's one called bar,
which produces bar graphs.
Let's try that next.
Note that the bar graph
replaced the previous plot.
We see here at the positions of x,
1, 3, and
10, the heights of the bar
match the y values,
2, minus 4.2 and 12.3.
If you don't want the second plot, bar for
example, to replace the first
plot that you were looking at in the
figure, you can ask for a second figure.
You type “figure”, like this.
And it gives you a new figure.
Let's put something in that figure.
I'm going to dock it.
And what I'm going to do is
put a pie chart in there using
the function called “pie”.
Pie takes one vector as an argument.
I'm just going to make one up.
Note that we've separated the elements of
this vector with spaces instead of commas.
Yep, you can use spaces or commas or both.
Each element in the input vector,
the 4, the 2, the 7, the 4 and the 7,
determine the size of one slice of pie.
So now I'm going to hit Enter and
see what we get.
Then it picks some colors for
each slice, and
it calculates the percentages of the sizes
of each slice relative to the whole and
shows them for each slice,
and there you go.
To close a figure window,
you can use the “close” command.
To close figure two use close 2.
And that leaves us with figure one.
We could close figure one with close 1,
but
you can always close all
the open figures with close all.
So I want to show you that one.
And there, we're back to no figures.
Before we finish looking at figures,
let's put up one last one.
This time, we're going to display a photo.
Over in the Current Folder window,
here, we see that there's a file named
Palace.JPG, you're probably
familiar with this: 
JPG. It means that this files contains a
photograph stored in a very common format,
it's called the “JPEG” format.
So the first thing we
need to do is load this
photo that's in this file into MATLAB.
And we can do that with
a command called “imread”.
So I'm going to type that in.
And the argument I give it is the name
of the file in quotes, like this.
You have to use uppercase where
there is uppercase in the file name,
and so now I'm going to hit Return,
and there we, . . .
OK, not good. We need to stop this.
Um. It doesn't hurt anything, but
it won't stop for a couple of minutes, and
we don't have time for that.
Do you remember how to stop MATLAB?
Ctrl C.
We press the Ctrl key, and while we
are holding that down, press the C key.
There.
That's over.
What happened is that the imread
command found the file,
read the numbers inside it
just like we wanted it to,
but then it poured those numbers
out into the command window,
and there are a lot of numbers in there,
over 47 million of them.
What we should have done is tell MATLAB
to assign the output of imread into
a variable instead of
pouring it onto the screen.
And we should have used
an assignment statement like this.
I'm going to assign it to
a variable called pretty_picture.
Sheesh!
Are we ever going to get this right?
Ctrl C again.
This time, we forgot to put
a semicolon at the end of the line.
So after it stored the data in
the variable pretty_picture, and
we can see up here that it did that:
A lot of data there.
3,456 by four thousand—-um——times three.
That's a lot of numbers up there.
We'll learn what all this
means in the next lesson.
But what we should've done
was put that semicolon in.
Let's do that and repeat the command.
Okay, three is the charm.
The picture is captured in
the variable pretty_picture.
But we haven't seen it yet.
So how do we look at it?
Well, we can do that with
a function named “image”, like this.
It is a pretty picture.
But we don't need those numbers
on the edges cluttering it up.
Let me dock this thing, and I'm going
to give a command called, “axis off”.
There, much better.
MATLAB can display images in lots of
formats in addition to JPEG.
And it allows us to do imaging
processing on all of them too.
We'll look at that in a later lesson.
But now, let's end lesson one.
And let's quit MATLAB while
we admire this photograph.
It is beautiful, isn't it?
I'd tell you who shot it,
but modesty forbids me.
Okay to quit, we give the quit command.
Here we go, Q-U-I-T,
return, MATLAB is gone.
And we're back to our computer
desktop where we started from.
We could also have quit by just closing
the MATLAB desktop by clicking the little
x in the upper corner, but
in either case, the desktop closes and
all the figures close, as well. When
MATLAB leaves, it puts everything away.
And it's time for us to leave, too.
That's the end of lesson one.
[MUSIC]
[APPLAUSE]

