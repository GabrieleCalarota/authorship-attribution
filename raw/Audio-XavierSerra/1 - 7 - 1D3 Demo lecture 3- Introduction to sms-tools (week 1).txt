Welcome everyone back to the course on audio signal processing for
music applications.
In the previous two demo lectures, we introduced two audio tools.
Audacity and Sonic Visualizer, which were quite useful for
visualizing, editing, analyzing sounds.
And in this lecture I want you to use the,
the tools that have been developed specifically, for this course.
That have been developed using python.
That we will very much go into detail, into all of the programming classes.
And a lot of the demos also will be using those tools.
Let me first go to the page where these tools are available.
It's in a GitHub repository, we will talk about that, in the programming lecture.
And it has the same under directory MTG and sms tools
In here I will be constantly updating the tools as
as things are, are being developed.
And as bugs are being fixed, et cetera.
So, I recommend you to download and the latest version that you can find.
Okay? And here you can download a zip file, and
you can follow the instructions here to compile.
I don't think it's that difficult, and they're open tool.
But anyway, in the programming class, I will talk about this in more detail.
This is a tool that well set of tools,
that do not have sort of an icon that I can click to.
So the way to access the tools is through the terminal.
This is the terminal, in Ubuntu.
And when you open the terminal, it goes to your home directory.
So this is my home directory.
And I need I have A few directories that I have been using for this class.
When I download the,
the sms-tools package it creates this directory, sms-tools-master.
so, to execute the, the examples.
I have to go into that directory, so, I just type sms.
By the way a very good key to use, is the Tab key, which is the auto-complete.
It allows us to go quite quickly through subdirectories or
to complete the names of files.
Okay? So this is the directory of of
the sms-tools.
Again, it has some subdirectories.
It has lectures
It has software.
It has the sounds that I have been using, and it has a workspace directory
which I recommend you to use as a place to work from.
But now I want to go to the interfaces, for demonstrating some of these tools.
And these are within the software directory.
Okay?
In the software directory again there is subdirectories and that,
the interface I want to use are the model's interface.
Okay?
So I go to the, the model's interface and 
in it there is quite a few files.
But there is a main interface for all the files, and
that's what is called models_gui.py, okay?
So, we can execute this file,
and through that interface, I will have access to all of them.
To execute python file, I can just type Python.
And the name of the python file.
So, if I type models_gui.py, it will execute this python file.
Okay?
So this is an interface, so it has opened up this these small interface.
And in it I have access to all the different analysis and
synthesis tools, that we will be talking about in class.
Like for example, the DFT, the STFT,
a sine model, harmonic model, stochastic model, sinusoidal plus residual.
sinusoidal plus stochastic, harmonic plus residual, and harmonic plus stochastic.
That's quite a lot.
But we will go through all of them in both demo and in the programming lectures.
To give you an example of how these things work, let's just go
for example to the Short Time Fourier Transform.
This is one of the first models that we will talk about.
And here we can input a file, by default that is always something that makes sense,
but let's go to another file.
So, this is the directory of My Sounds for example, I use this orchestras sound.
And then, we can play it from here.
[MUSIC]
Okay, this is a recording of a Chinese orchestra playing a fragment.
And in here, we have a whole bunch of parameters that we'll be using
to analyze the sound.
Lets just use the default parameters and click compute.
Okay. And this is what it has computed.
This was the original file input sound x signal.
And then it has analyzed the spectrogram, like the ones we are seeing in
Audacity and sonic visualizer.
But now, we have actually computed with our own program.
And, it has a little bit more control than in Audacity and sound visualizer.
We can see the magnitude of the spectrogram.
And also we can see the phase of the spectrogram, which, we'll talk about that.
And then, we can inverse this process, and
we synthesize the original sound, output sound the y signal.
And in from the interface, we can play these output sounds.
[MUSIC]
Okay, so, that's basically the same.
So that means that this analysis synthesis has worked
quite well in terms of an identity system.
So that's good.
Let's go to another of these models.
Maybe the, the most, sophisticated one that we will do,
which is called the harmonics, plus stochastic representation.
And again, let's maybe take another sound instead of this sax phrase,
let's take the short version, so it's going to be quicker.
Okay? And let's play it.
[MUSIC]
Okay?
This is a sax phrase.
And again, we can analyze a whole range of things and define many parameters.
Then we just compute it.
So this is a model that is is more sophisticated in that for
these, it takes a little bit more time.
And this is the result, of this analysis.
This is the input sound, we just heard.
This is the analysis representation we have computed,
that shows the harmonics and what we call the stochastic representation.
And this is, the synthesis.
By looking at it, it's quite similar to the original.
Let's just listen to that.
[MUSIC]
Okay, so yes it is quite similar.
But in these analysis, what we have done is analyze two aspects of the sound.
One that we called Sinusoid and let's hear that
[MUSIC]
Which basically captures most of the,
of the components of what is interesting in the sound, but also has.
A residual, which is modelled
as a stochastic signal, that we can also listen to.
[SOUND].
Okay? It's,
it's quite soft, but if you pay attention, is there and is basically the,
the breathing part air part of the sound.
That is quite relevant in, in many sounds.
okay, let's close this interface.
And let's go to another interface that we also will be using.
And so we go back, by doing this, okay.
And now, we are again in the main directory of the tools.
And if we go to the software, and instead of going to the models interface,
we go to the transformations.
Okay? So we go to the transformations_interface.
And these are programs algorithms, that what they do is,
transform the sound using the models that we just saw.
And again, it has a whole bunch of of transformations.
And that is one which is the main the main interface,
which is these transformations GUI.
Okay.
So we can execute these file by typing python and
the name of this file.
Okay. So in here, we have a number of
specificities to transform different sounds using the models we talked about.
So for example, we can do a morph with a Short Time Fourier Transform, we
can do transformation with the sine model, transformation with the harmonic model.
With the stochastic model, the harmonic plus the stochastic.
And I do a morph with the harmonics plus the stochastic.
Let's go to the, harmonics plus the stochastic that we had mentioned before.
And let's instead of the sax phrase,
let's just maybe take a shorter phrase, a sax phrase, but short.
Okay, we can play it.
[MUSIC]
And with the four parameters, let's analyze it.
Okay this is the original sound.
This is the analysis that we did so we see the harmonics and
the stochastic component and the, we synthesize.
It looks like what we did before, so it looks quite good.
And now let's go back to the interface, and we can apply some transformations,
there is some values here, but let's just erase these and
let's put some sort of identity parameters.
So identity means that there is no change.
So frequency is scaling, there is time value here, so
at time zero we can put frequency scaling of one so that means there is no scaling.
And then, at time one, at the end we just put the same thing, so
that means no frequency scaling.
Frequency stretching we will do the same thing, so we'll do zero, one, one one.
And, time scaling we're not going to do any time scaling, so
time zero we will have time zero, and at time one, we have time one.
So, the time is normalized.
So we can put any values, that means that we can just work also from zero to one.
And in here in terms of timbre preservation, let's put zero so
it doesn't go anywhere.
Okay, so let's apply the transformation.
And now we can listen to it.
[MUSIC].
Okay, we haven't done anything.
But now let's do some change.
For example, what can we do?
So let's transpose to an octave higher.
What that would mean?
So it means that would just put zero two, and one two.
Okay?
And now, if we played that
[MUSIC]
Okay?
And if we do timbre preservation so that means it tries to maintain kind of
the timbre.
It will sound a little bit better.
[MUSIC]
Okay?
But we can do other things.
For example, let's do a time frequency stretching.
Frequency stretching can be, let's put this back to what it was.
It's kind of stretching the partials and then make them and not equally spaced.
So if we, start for example starting from time zero, we stretch it a little bit.
And at time one then, we stretch it quite a bit more.
Okay?
We started 1.01 and here 1.1.
Let's apply this transformation.
And here, you see that the, the harmonics kind of go up and they, they,
they sort of get more separated as as the frequencies go higher and let's hear that.
[MUSIC].
Okay?
So we hear these kind of inharmonicity ,in the higher frequencies.
Of course if we make a,a larger transform, a larger stretching
you can have that much stronger effect.
And this will be very pronounced.
[MUSIC]
Okay.
And we can put,
go back to the no transformation,in terms of frequency stretching.
And. 0111 and
then let's do some time stretching so at zero, zero for example,
let's do that 0.5, we compress the sound.
So we we do much shorter so let's say, 0.25 so it's going to be.
Half of the duration and then at time one, we leave it the same.

So it's going to go faster at the beginning and
then, it will, in fact go slower towards then.
Let's hear that.
Okay, and we will play it.
[MUSIC]
Okay?
So it has gone faster at the very beginning, first half of the sound.
And then the second half of the sound, has slowed down.
Okay, that's just very brief example.
Again we will talk quite a bit more about these programs, these tools.
And hopefully, we'll have fun trying all these things out.
And that was it.
If you want to know more about these sms-tools, of course, follow the class.
We will Go quite deep into that.
And you can go to this directory for,for the actual code.
And again, all these sounds,come from Freesound.
So this was all.
So, in this three demo lectures of this first week,
we have presented the three tools, three applications.
Audacity, Sonic Visualizer,and our own tools.
Hopefully this gives you an overview of the type of tools that can be of
use to manipulate audio.
And hopefully this has given you an interest in following the course and
really trying to understand what is behind this
So in the demo lectures we will just make sort of a introduction to the tools.
And from a, from a very practical application that then,
in the programming classes, and of course in the theory lectures,
we will go deeply in trying
to understand all of this.
So that's all for today, and
I hope to see you in next class.
Thank you.
