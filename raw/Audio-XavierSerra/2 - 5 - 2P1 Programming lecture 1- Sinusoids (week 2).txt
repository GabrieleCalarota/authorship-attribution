Hello, welcome back to the course on audio
signal processing for music applications.
We have been talking about
sinusoids since the very beginning.
Sinusoids are at the core of
what we'll be doing in this week,
in the DFT, sinusoids are part of the DFT.
And in order to understand the DFT it's
fundamental to understand sinusoids.
So in this class I want to
teach how to program sinusoids,
how to code sinusoids.
And in particular we will be playing
around with two types of sinewaves.
The real sinewave, which is a sequence
of numbers, of real numbers,
that can be computed by
calling this function.
So, it has an amplitude, capital A, and
we can call the function cosine
with an argument, which is two pi with
a frequency and the time index
n, is the time index discrete,
and
then the capital T, is
the sampling period
and then we have an initial phase.
And then we will also
compute a complex sinewave.
the ones that appear in the DFT.
These are complex sinewaves
that are discrete
And they do not have any time
information, so with just an index n,
and the frequency is an integer value,
so these complex sinewaves are always
periodic for a given capital N.
So we define a capital N, it's
going to be the size of the DFT
and then these complex sines always
have a fix number
of periods
within that N and
this depends on k, and
that k is the number of
periods within that capital N.
So to write some code to
implement these sinewaves
we need to open up a text editor,
in this case gedit.
And we can start typing Python
commands that then will be
part of a file, will be a script that
then we can execute using Python.
So, we first need some packages and
typical packages that we'll always need,
one is the
the library for plotting, matplotlib,
particularly pyplot, we will call it plt.
And then we will always need numpy, and
this will be our package for
playing around with vectors and arrays,
and now we can start typing code, so define
the sinusoid, the real sinusoid.
So the real sinusoid has an amplitude,
let's define
an amplitude of .8,
it has a frequency,
let's say f0, that in hertz,
let's say 1000 hertz,
and it has an initial phase, phi,
Let's say pi over 2,
pi is a variable defined in the numpy
package, so that is why you put np.pi.
And now we need the sampling rate
because we
need to compute the sampling period,
We need to display
the real sinewave in time.
So 
our typical sampling rate will be 44,100.
Okay?
Now since we do vector operations for
the time index, we will define an array,
and we will be using this
function arrange from numpy
that allows us to define
a range of values
and an increment
and then automatically it computes all
the values between these two limits.
So this will be an array of
floating point numbers, going from
minus 0.002 to 0.002 in increments of
one over fs, or
capital T, which is the sampling period.
And now we are ready to
compute our function.
So it will be amplitude A times cosine,
and in the argument will be the two pi,
so two times np.pi
times the frequency,
times the time index,
which is the t array,
and then we need to sum
the initial phase phi,
and it will be our time
function, our sinusoid,
and in order to plot it,
what we will do is to plot
the time array with respect
to the x values, and
a good practice is to define, axis values.
For example in this case, the axis in the
horizontal axis goes from minus .002 to
.002

and in the vertical axis it will
go from minus 0.8 to 0.8.
Okay, this will define the axis,
what we are seeing in the plot.
And also it's good practice
to label the axis.
So we need to label the
X axis, so with an xlabel.
And xlabel will be time.
Okay and then we need label also the y axis so
with the ylabel and
that will be amplitude.
Okay, and that's it,
the only thing left is to call the show
command, so that it will display.
And hopefully if I didn't type anything
wrong, it can be computed.
So we save it under name sine.py.
And you can go to the terminal
and here we have the sine.py file and
we can execute it by typing python and
sine.py.
Okay, it gives me an error
that says that okay,
I typed a wrong the name of
the package, I have to type pyplot.
Pyplot.
And now that I see also
the cosine is wrong,
the cosine is a function within numpi,
so I have to put np.cos.
So two bugs already.
Let's execute it.
And now it's okay.
Okay?
We have.
A sinusoid.
We have the time in seconds,
the horizontal axis.
Times zero is the middle,
and the amplitude is in the vertical axis.
And so
we have four periods of this sinewave.
Okay, now let's go for
the complex sinewave which is going to
be a little bit more complicated.
The packages are going to be the same.
So, let's type it here.
So, we might be able to
reuse some of this code.
So, the first thing we will need
to do is to define the variable
capital N, which is going to be
our array length, or
in the case of the DFT, the size
of the DFT and let's say it's 500.
And the frequency is going to be
an integer, so let's say k equal three.
And then in terms of the index, the time
index, is going to be integer values.
Is going to be,
we can just easily just say np.arange,
and we can display it from minus
N over two, to N over two.
Okay, that will be the time indexes that
will be created and now we are ready
to compute the complex sinewave.
So the complex exponential is
a function that exists in numpy,
So we just say np.exp
and now in terms of the arguments, for
j we just say 1j,
then is two pi, two times np.pi,
then we multiply by k, we multiply by n,
and we divide by capital N.
And that's our complex sinewave.
And in order to display it.
Well, we cannot display the complex in a 2D
representation,
so what we will do is, we will display
n and against the real part of s,
so in order to do that
we will say np.real
and we will get this, okay and
this will display the real
part of this complex sinusoid.
And now, again, we might want to
have some specific axis labels,
so the axis will go, in this
case, from minus N over two
to N over two, in this case minus one
because zero is also one of the values,
and then in terms of the vertical axis,
you just say from minus one to one,
because it's normalized to one.
Okay, and then for the labels
The xlabel
we will say that is just the n indexes
and for the ylabel, the same thing,
we have the amplitude.
Okay.
And that should do it.
The only thing left is again the
 show command.
And that should do it.
So if I delete this other part.
And I save it under the same name,
so it's the sine.
Hopefully, if I don't have any error,
okay.
It displays the real part of the complex
sinewave, which is a cosine, so at
time zero is one.
And it has exactly three periods
which is k,
k is specified three, which means
three periods within this capital N.
Now if instead of the real part,
we want to display the imaginary part.
We can compute again
and this is the sine part.
So at times zero it's a sinewave, and
it's three periods of the sine function.
Okay, so in the DFT what we
are doing is, for different N,
Hence, so the N is the DFT size, so for
example let's change the N,
let's put 32 for example, and
then k is one of the sinusoids of the DFT.
So, for example, let's put the number
five, so let's close these,
and if we execute this
it will look a little bit different.
Okay?
So this is much fewer samples,
it's only 32 samples.
And, there is five periods of
the, in this case,
the imaginary part of the sinewave.
But, of course,
we have few samples per period,
so that's why we see it so jagged,
but anyway this is a computed sinewave,
and is the kind of sinewave
that we'll be using in the DFT.
And that's basically all I wanted to say,
and so we have been, in this class,
we have been talking about sinewaves,
and
we've been explaining how
to code them using python.
Specifically we needed two packages,
numpy,
matplotlib, numpy is going to
be a fundamental package for
handling all these arrays
that we'll be using, and
matplotlib we'll always need it because
we'll always be plotting things.
And that's all.
So this was the first programming lecture,
first lecture in this second week.
So 
in the next programming lecture
we'll go into the DFT so
we will go into how to program
the complete DFT, sinusoids is one part.
Now we'll put it together
into programming the DFT.
So I hope to see you next lesson,
thank you.

