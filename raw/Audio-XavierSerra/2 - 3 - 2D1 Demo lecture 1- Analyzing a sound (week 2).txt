Welcome back to the course on audio
signal processing for music applications.
In this second week of classes we are
talking about the Discrete Fourier Transform and
in this demo,
in this lecture demo, I want to
put that in practice by analyzing a sound,
in particular
I want to analyze
the sound of a tuning fork.
A tuning fork produces
a very clear tone,
this is why it's used to
tune other instruments
and it produces a very clear frequency.
So let's try that.
Let's analyze it.
So we will open Audacity.
And, we will hit the record button
And with the microphone we
will record the tuning fork
[SOUND]
Okay, that should suffice.
Here now let's delete the parts of the
recording that are not the tuning fork.
Let's hear it again
[SOUND]
Yes,
that's the tuning fork.
Maybe let's select the loudest part.
Okay, and let's zoom in.
To check if if it's really
like a sinusoid we can zoom in
to the end.
And yes, it looks like a quite
nice sinusoidal-looking function.
When we presented Audacity, we mentioned
that we can visualize the spectrogram.
Which the spectrogram is
basically a time varying DFT.
So this is the time varying
DFT of that sound I recorded,
the tuning fork, and
clearly it shows a very strong line
around in around 500
hertz which is basically
the frequency we are hearing,
in fact this tuning fork, if
if we look at the device it says that 
it produces 440 hertz.
So this must be the 440 hertz frequency.
However we also see
other horizontal lines,
which means that there's also other
components that are present in this sound.
So in order to analyze it
a little bit more deeply
let's save the file, maybe before that,
let's clean it a little bit more
and let's make a fade in at
the very beginning, and
a fade out at the very end.
That always helps.
To be heard and
to be analyzed by other programs
and now let's export it.
This is a sound that was recorded
at 44,100 and it's a mono file.
So this will create .wav file
and we will save it under tuning fork
name, OK,there was one there.
Okay, and now we can go to the SMS
tools through the terminal.
And it's in the software directory,
models
interface,
and if we type python models_GUI
We will start the interface that
includes all the models we will be using,
and the first one is the DFT.
So let's go get the sound
that we recorded in the home directory
and it was the tuning fork,
okay, and now let's hear it
[SOUND] Okay, now let's, with the default
parameters, let's analyze it.
Yeah. That's clearly 
a fragment of the input sound.
This is the DFT of that sound.
The magnitude and phase spectra
and then we do the inverse DFT and
we get this shape.
That is also very much, apart from this
moving window that we have applied,
it's very much like the original sound.
And here clearly we see a peak in the
magnitude spectrum, and if we put the
the cursor
it shows it is around 440 hertz.
But also we see other components,
shorter but that they're also present.
Maybe to check how a real
sinusoid is analyzed and
how it looks like in the DFT, in
the spectrum, let's
open up a sinewave that
has been synthesized.
So in here, in this directory,
I have a sinewave at 440 hertz.
Okay [SOUND] Okay,
that's a sinewave at 440 hertz.
It clearly sounds very
similar to the tuning fork.
And now let's compute it.
Yes, it's similar shape, but if we
compare, in fact, the two spectrograms
they look a little bit different.
The one of the tuning fork
looks clearly more noisy than the one
of the electronic sinusoid.
Still the electronic
sinusoid doesn't look ideal
but it clearly looks
with a very clear peak
and the rest looks much softer than in
the other sound, in the tuning fork.
Okay so
with that we can analyze sounds and
of course the can change
the size that we analyze.
So for
example if we instead of 511 samples,
we take 1,001 samples and we compute it.
Now we are taking a bigger
chunk to be analyzed
but basically the spectrum looks
a little bit different, because of course
we have more samples, but
the general shape is the same.
And we can play around with
the parameters to visualize different
parameters.
For example we can just instead of
starting at 0.2 seconds we can start
a second 0.5 so a little bit
forward in the sound, and the sound looks
very much the same, because of course it's
a pure sine wave and it's always the same.
Sound.
And that's all I wanted to say.
Basically we have used Audacity to
analyze the sound of a tuning fork.
And then we have saved the file and
used the interface available
on the SMS tools package,
that we have develop, to
analyze the DFT and
compare the result of the DFT of this
tuning fork with the one of
pure electronic sinewave.
Okay.
This sinewave, it's in freesound, so
you can get it there.
And that's all for this class.
Hopefully this has given you
a practical view of what
the DFT can do with real sounds
and also try to
understand what a sinusoid is
and that's all.
I hope to see you next class.
Bye-bye.

