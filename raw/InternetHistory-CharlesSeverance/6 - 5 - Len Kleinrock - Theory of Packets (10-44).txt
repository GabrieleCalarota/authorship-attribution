[MUSIC]
[MUSIC]
So I was a student at MIT, and
I was scheduled on the wonderful
scholarship program,
[COUGH]
supported by MIT Lincoln Labs to get a
Master's degree.
And it was a very rigid schedule, you're
going to be done
in two years, Get a job at Lincoln Lab,
and do research.
And so I was on the program and I was
one of the few people who actually
finished on time.
And as I was finishing I scheduled to have
my
first child the summer of 1958 when we're
going to be done.
In that summer, My professor at the Server
Mechanism
Lab at MIT said, you have to get a Ph.D.
I said I don't want to get a Ph.D, I've
done this program,
I'm scheduled, my child has just been
born, so you gotta do it.
So he kept twisting my arm, and finally I
said okay, I'll do it.
But if I'm going to do it, I want to work
on something that's
really significant, and not piddle around
for the next three or four years.
So I decided, I'm going to work for the
best
professor I know at MIT, and that was
Claude Shannon.
>> Okay.
>> The infamous, wonderful, magnificent
person Claude Shannon.
So I called him up, and he invited me to
his house, and we chatted a bit.
Decided yes, we're going to work together.
First thing I started working on actually
was a chess-playing program.
Just working with the man was a delight.
The, the, he was a great engineer, great
mathematician,
smart as heck, could solve a problem like
that.
Then I looked around at my classmates,
most of
whom were working for him, and most of
them
were working on the kind of work he had
developed, mainly the field of information
theory and coding theory.
And I looked at them, and I'd taken those
courses.
And I said, you know, the work that
they're doing, the story that he left
behind.
Those problems that are left over are
hard, and probably
not of great significance, little bits and
pieces left.
I said, that's not what I signed up for.
I wanted something to be fun, exciting,
challenging, and have impact.
Meanwhile, being at MIT, and Lincoln
Laboratory, I was surrounded by computers.
And I recognized, you know, one day these
computers are going to have to talk to
each other.
because this was way early, nobody was
thinking about that at the time.
But I said if they're going to talk to
each other, what technology
would support their communication and
interaction?
And the answer is there was nothing
available.
So I had an approach, I figured the way to
provide
the communications would be to provide the
ability for shared communication links.
because I knew that computers, when they
talk, they don't talk the way
I am now continuously, they go blast, and
they're quiet for a while.
A little while later, they suddenly come
up and blast again.
And you can't afford to dedicate a
communcations
connection for something which is almost
never talking.
But when I want to talk, I want immediate
access.
So we had to not use the telephone
network, which is
designed for continuous talking, the
circuit switch network, but something
else.
And I had an approach using
some mathematical thinking, mainly queuing
theory.
There was a model I could develop,
and it just made sense to do that which we
had done in time sharing.
In time sharing, you have a big computer,
and a lot of people share it.
When you're using it I'm not, when you're
not
I am, so we sort of interlace each other.
Why not use communications the same way.
We're going to set up communications
capability,
that everybody jumped in and shared
and they only get to use it when they have
something to send.
This is a new technology.
And I said well there's an approach, I
have a mathematical
tool to do it, it's clearly important, it
will have impact.
And nobody's looked at this yet, so
there's a lot of low-hanging fruit around.
>> It's not that hard.
>> It's not that hard.
[LAUGH]
So it's perfect for me.
So I, I started working on the problem.
Now, this was years before anybody needed
this technology.
In time sharing, for example, which is
the underlying technology that I adapted
to communications.
In time sharing, you want to let the
little jobs go before the big jobs.
>> Yeah.
>> because why, why should the little
guy wait a long
time for a big job, he's going to get in
and get out.
So when jobs come in, you ask
them how long are you?
And they're all going to say I'm tiny.
So you say okay you're tiny, I'll give you
a little bit of time.
And if you're tiny you'll be out of there.
No?
I'll send you to the back of the queue and
you get another tiny shot.
The notion of round robin.
So you get a little bit at a time.
We're going to break you into little
chunks.
You get a chunk at a time.
I said that's a great idea for sharing
communications.
We'll give everybody a little bit of
communications time.
The little ones will filter out.
The short jobs will filter out.
[COUGH]
When I say job I mean message, a short
message will filter out.
And the long ones will take a little
longer,
and they don't mind being interrupted by
the little guys.
The important thing in this technology,
was not to make,
the very short message to wait behind very
long messages.
This automatic, round robin, which is now
called
packet switching, you chop things into
fixed lengths.
You give them a little bit, it's not,
that's
not enough, give them another piece, and
they go flying
through the network on their own.
So the idea of packetizing was important,
the idea of distributing control.
The idea of large shared systems in which
you get some terrific design benefits came
along.
And so this got published, a McGraw-Hill
book, nobody cared.
>> I want it Published early?
>> Yeah this, this is published.
>> Right away.
>> My visitation ended in December' 62,
I graduated
in June' 63, this book was published, in
1964.
>> And nobody cared.
>> Nobody cared.
In fact I went to At&t, the biggest
network of the time,
and explained to them, you guys outta give
us good data communications.
And their answer was, what are you talking
about, the United
States is a copper mine, it's full of
telephone wires, use that.
I said, no, no you don't understand.
It takes you 35 seconds to set up a call.
You charge me a minimum of three minutes,
and I want to send 100 milliseconds of
data.
And their answer
was, little boy, go away.
[LAUGH]
So little boy went away, and with
others developed this technology which ate
their lunch.
But nobody cared, and they said it
wouldn't work.
And even if it did work, they want nothing
to do with it.
So that was the envireonment we faced.
It wasn't until years later when the
government decided they needed a network,
that
suddenly I saw a way in which I could
implement the technology I had.
But getting back to what I said earlier.
I set up this mathematical model,
it was analytically intractable and still
is, by the way.
Had two choices.
One is give up and find something else, or
two, make an assumption which allows me to
move forward.
So I introduced a mathematical assumption,
which cracked the problem wide open.
From that point, I could just sail through
the solution,
get the performance behavior, get the
design principles going forward.
But then the
question is, was that assumption any good?
>> What was the assumption?
>> The assumption was what I called the
independant assumption.
And it's absolutely a false assumption.
It says when a message travels through the
network, it changes this length
independently every time it hits a new
node on its hop through the network.
>> Right.
>> Mathematically that creates an
independent which
allows you to proceed with the analysis.
But it's clearly not true.
>> Right.
So what I had to do was to simulate a
network with and without the assumption.
I simulated many networks on a machine at
Lincoln Laboratory, on the TX2
transistorized computer there.
And I spent four months writing the
simulation
program, without debugging a single line
of it.
Out of 2,500 lines, assembly language
simulation.
And I knew if I didn't get that simulation
right, I would get no dissertation.
[LAUGH]
Ran it, tested with an without the
assumption, and the results were amazingly
close.
So I had my solution, I could prove it
would work.
The packets wouldn't fall on the floor.
I could tell when things would work well,
and when they wouldn't.
Got published again and still nobody cared
about it.
As I said, Lincoln Laboratories sent me
for my
master's dissertation, they also sent me
for my PhD.
So they supported me for years.
Wonderful economic,
financial, research environment support,
and I felt an obligation to work for them.
And I was prepared to take a job
at Lincoln Laboratory, which is a great
institution.
Until when I, went I went to work there,
the
first thing they said is look Lem, why
don't you
look outside before you can commit to work
here, make
sure there's nothing out there that you
really would like better.
This was a gen, a magnificent
part, step on their part.
So I took a trip to the west coast, I went
to some of the aerospace companies.
I was not interested in university
position at all.
>> Really.
>> But it turns out when I was going up
to San
Francisco to look at some of the high tech
companies up there.
a friend of mine suggested I interview
with Berkeley.
So I did.
I interviewed, I came back, they lost my
case, they changed
the the chairman, I never heard from them.
But on sabbatical, one of the professors
that interviewed me came
to MIT while I was just finishing my, my
Ph.D then.
And he sees me and hollers Kleinrock, how
are you!
And he thinks that I'm looking for a PA,
an academic position.
He contacts one of his friends here at
UCLA, who then invites
me out here, offers me a job, and now I've
got a dilemma.
Do I
want to teach?
Do I want to cross the United States, it's
almost like on a wagon train, 3,000 miles
away.
From the east coast where the world is,
family is, for a job paying half that
I could earn back at, at, at MIT
Lincoln Labs, and try something I've never
tried before.
So I went to the folks at Lincoln Lab, and
I said
look I've got this offer, it looks
attractive, it's, it's a new challenge.
What should I do?
And there was a wonderful answer they
gave.
They said, Len, try it.
If you don't like it, come back.
>> Wow.
>> Wow is right!
Well, I came here in August of' 63, 50
years ago, and I'm still here.
[MUSIC]

