[MUSIC]
When you walk into the back entrance of
Boelter Hall on the UCLA campus
you may notice a seemingly random
pattern of floor tiles in the entrance.
[MUSIC]
If you spend a little time looking at the
pattern it might dawn on you that the
tiles represent zeroes and ones
and then you might even
figure out that the tiles represent
ASCII characters.
The characters in the floor tiles spell
out "lo and behold," to commemorate the
building where L and O were the first two
packets ever sent on the ARPANET from UCLA
to Stanford Research Institute 
on October 29th, 1969.
>> ARPA wanted a network
so that they could share the
large computing resources they had given
to their researchers across the country.
University of Utah had a terrific
graphics operating system,
SRI a database, we had simulation,
University of Illinois had high,
high-performance computing.
And every time ARPA brought on a new
researcher, they'd offer to buy him a
computer, fine, but the
researcher said, I want
the same capability all those
other guys have.
I want the graphics, the database,
and all the rest.
And ARPA said, we can't afford that.
If you want to do graphics
you log on to the
machine at Utah through a network that we
think we're going to to make.
So the need for the network was
to do resource sharing
and not to protect the United States
against a nuclear Holocaust.
When Bob Taylor came in
as the net director and
he recognized this need for sharing resources,
by the way notice the phrase
I'm using, sharing resources is exactly
what I built into network design.
Now they wanted to share the
external resources.
Same idea.
You have it, you're not using it, somebody
else should be able to.
So they brought in Larry Robertson,
another classmate of mine.
In fact, an office mate of mine at MIT,
to manage this project.
He came to me because he knew my work.
He, he watched me do the simulation,
in fact I used his compiler
on the TX2 computer, and
said Len, we need to know if this
thing's going to work.
He knew that I had the theory, so I
could show it to him, it's going to work.
In fact he even says he would
never have decided
to spend millions of dollars of
the U.S. government's money if
he wasn't sure that this thing would work.
So the design began to be laid out by a
few of us in 1967.
In 68 they sent out a request for
a proposal.
At the end of 68, Bolt, Beranek and Newman,
a Cambridge Massachusetts firm,
won the contract to produce the
first switch of the ARPANET.
And we became the network measurement
center early on, so we could test it out.
During the design phase, some great people
were there, throwing their ideas out.
Herb Baskin was there, 
a time-sharing expert.
And he said, if this network
can't deliver short messages
within a half a second, I can't
use it for time sharing.
Specifications, half a second.
By the way, we got 200 milliseconds.
[LAUGH].
And Wes Clark said separate
computer from communications.
I said look, if this is going to be an 
experiment, and I was also interested
in the research of the experimentation,
we have to build software in
so we can run experiments.
Artificial traffic generators, measurement 
hooks, a place
where the measurements can be evaluated
with the software.
And so Howie Frank began to talk about
network reliability.
He said this network, if anything fails,
the network shouldn't collapse.
So we built in a, so we didn't say this
should be five nines of up time.
We went much more pragmatic.
We said, if any single thing fails,
everybody else can still talk.
>> Yeah.
>> So, to do that you need something
called
a two-connector typology.
Two independent paths between 
every pair of nodes.
[SOUND] Built it in.
So all those specs went to BBN, they built
the darn thing, they delivered the
switch here at UCLA, on schedule. Eight
months after they got the contract
they were to deliver this new technology,
new applications, new device.
They did it on time, on budget, came here,
we plugged it in, and bits began to move
back and forth between our time-shared
machine and that switch on the day after
Labor Day, September 2nd, 1969.
But that was just a one-node network.
[COUGH].
The schedule was that another one of
these switches would be delivered at
Stanford Research Institute
400 miles to the north and
they would connect that to their machine.
And that happened in October.
So in October we had a two-node network.
My machine, my switch,
another switch, 400 miles away,
and the SRI host.
And it wasn't one single line, it was a
gang of 4.8-kilobit-per-second
lines.
So we had to gang them together.
Patch it up.
So, the first piece of the backbone
Internet. So now
what do you do?
You have a two-node network.
Well, now you can do something.
So we decided one night, one night, late
in October, programmer Charlie Klein
and I, went to him and said let's, let's
communicate between these two machines.
So we got ahold of Bill Duvall, their
programmer up there, and we
said, let's simply log in from a terminal
connected to our host to that machine.
The idea is, these are both time-sharing
systems.
They expect terminals to connect in and
use the services of the machine.
The big thing was sit at a terminal here,
log on to your machine here,
and through this wonderful network,
log on here as if you're a local user.
Well, that's easy enough.
So we got all set, got Charlie down at the
terminal over here.
And just to be sure this worked, 
we had a telephone
handset. In fact I actually
think I've got the, the here it is,
[LAUGH] I just happen to have it.
That was the telephone set.
>> That's the telephone headset?
>> That was the telephone.
We plugged it in.
We derived, we derived a,
>> You were using Skype.
>> [LAUGH] Afraid not.
Plugged it in.
We used a piece of the high-speed line for
this, for the phone line.
But what the interesting thing is,
we were using the
defunct circuit switching technology
to prove out
the new package switching technology.
>> Right.
>> And it really helped us.
>> Yeah.
>> so we could [INAUDIBLE].
[SOUND].
So, Charlie tapped the L and said,
you get the L?
Bill said, yup got the L.
Tapped the O.
You get the O?
We're trying to do L O G.
For login.
Got the O?
Got the O.
Tap the G.
Get the G?
Crash.
So the first message ever on the network
was lo,
as in lo and behold.
>> Yeah.
>> Now that's especially interesting
because if you go outside this hallway
here, down into the alley, you'll come
into another entrance to this building.
And you'll, I just discovered this about a
week ago. You, you walk on, on, a
platform, and there's a mosaic of tiles
down there and they're a strange pattern.
It turns out it's the ASCII Code for
LO AND BEHOLD!
I have no idea who did that.
You know, it's about a year 
and a half now.
Some very clever person put that in.
That was the first message,
October 29th, 1969, at 10:30 at night.
[SOUND] You're entering 1969 right now.
We reproduced this room to
look as it did, and smell and feel
like it did
some forty odd years ago.
And if you look over here,
you're looking at the first piece of
equipment ever on the Internet.
It's that first interface message
processor.
IMP number 1 in UCLA.
A Honeywell minicomputer, adapted by
Bolt, Beranek and Newman, BB and N.
To operate
as a switch, for channel building
functionality.
And this is the same physical
four square feet
where it served as the opening note
of the Internet.
The first piece of equipment
ever on the Internet.
>> And that's the actual one.
>> That's it.
I kept it for years.
They tried to throw it away many times.
Most of the people who had IMPs 
have tossed them.
There's just the one or two 
left around the world,
but this is number one.
This is the first piece.
If you open this machine, you'll be
privileged to smell it.
>> Yeah.
>> It's got an unusual odor, and just
brings you right back.
>> Yeah.
>> And emotionally, it's great.
Can't smell it today.
This is a military hard machine.
[SOUND] This, this machine was essentially
a state-of-the-art minicomputer.
which was adapted by BB and N.
And I first saw it in 1968 at one of the
joint computer conference shows.
Thousands of people in a big, 
big exhibit floor.
And you see these sky hooks up here?
We had one of these machines
hanging from the,
from the ceiling, swinging in the air,
running.
And there was a guy, big guy,
stripped to the waist,
oiled skin, with a sledgehammer, and
he was going Whack, Whack.
>> Right.
>> to show that it's military.
>> [LAUGH] It was military.
>> And it was.
But the most important document of the
Internet, the most
important document of the entire Internet,
is right here.
>> Uh-huh.
>> You talked about who was working
with me,
well, one of my software programmers
was Jon Postel.
In fact, here's his picture.
And he was not a hippie,
even though he appears to be.
He was the one who basically
disciplined my,
my staff to do things properly,
to keep records.
He said we have to keep a record
of what's going on, so beginning in
October, basically a month after the IMP
arrived, we started keep an IMP log.
You know this is an engineer's log, this
is not you know, Madison
Avenue, a piece of [UNKNOWN], just
scribbled and used an old SDS log.
And in here we kept a record of what's
going on and
the most important entry happens to be
right here.
On October 29th, 1969 at 10:30 at night
Charlie Klein, the
programmer who was in the room with me,
made this entry.
Talked to SRI.
Host to host.
This is the only record of the very first
message ever on the Internet.
Right here.
[SOUND] You know, we had the technology,
we started making measurements.
We were the first experimental node so
we, we saw things happening.
How come?
We have a 50-kilobit-per-second line, the
routing procedure
either goes one way or the other,
one at a time.
So how can you get more than
50 kilobits per second
between nodes if there's only one
path at any time?
And we'll say oh, it's obvious.
[LAUGH] That path is on now, when it gets
backed up, you change paths.
So this guy's emptying it's pack back up
while he's sending this way, they
[INAUDIBLE] >> Right.
>> So, so think and but, we could break
[INAUDIBLE] I said.
And every time we did, we would 
call BB and N and say fix it.
We did this, fix it, because they wouldn't
give us the code.
They kept it proprietary until ARPA
said, we paid for
that code, you have to open it,
they did, we saw it.
Every time we got a, and it would take
them six months to fix anything.
>> Right.
>> We'd discover a fault this time, we had
the code.
We'd show them how to fix it, still took
six months.
One of the things I was very much
interested in with design was this
stupid control, why?
>> Right.
When I was a student of Shannon,
Shannon's great work came when he had a
lot of things interacting, long code
words, for example.
That's when these emerging properties
arise.
So I said, I want to design large
networks,
because on a large network, you can't
have a single point of control.
You have to distribute it.
>> Right.
>> So what does it mean to distribute
control?
You're delegating your authority
to all the peers.
When ARPA started funding principal
investigators they had the same
philosophy.
They said look, you're a smart guy,
here's some money.
Go do the thing you do best.
We're not going to sit on top of you.
Make good things happen.
So here we are.
I'm a recipient of that 
kind of money.
What do I do with it?
I've got my graduate students.
They're brilliant kids.
Look, we need a host-to-host protocol.
Here.
I'm not going to sit on top of you.
Going to run with it.
That is not a product mentality.
>> Right.
That is a research and development and
creative mentality and it works so well.
[MUSIC]

