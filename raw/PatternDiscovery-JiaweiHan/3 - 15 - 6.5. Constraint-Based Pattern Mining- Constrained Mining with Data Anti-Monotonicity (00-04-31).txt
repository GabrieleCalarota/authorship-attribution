[SOUND] Now let me introduce another class
of constraints called
data anti-monotonicity.
What is data anti-monotonicity?


Okay.
Let's look at this.


The data anti-monotonicity means you 
can use this one to prune the data
space, while you do the mining. 
In the mining process, 
if we find a data entry t, 
that data entry cannot satisfy 
the pattern p, under these constraints c, 
then we know t cannot 
satisfy p's superset either.


This kind of constraint, c,
is data anti-monotone constraint.
How do we use it?


In this context, 
we just prune data into t.
 Then, that whole data space is reduced.
That's why we call this 
one data space pruning. 
Let's look at example.


We first say c sub 1 in this 
constraint is data anti-monotone.
Why? 


Suppose transaction ID 30, 
we get b, c, d, f, g. 
Suppose now, we are in the mining process,
 we got b, then we look at c, d, f, g. 
Suppose the c, d, f,
g getting together, okay?
The price of these b plus c,
d, f, g together, 
this sum of price is still not greater or
equal than v, suppose v is $100.
 This, is still getting 
together is less than 100.
 Then, this transaction t,
 will not be able to contribute to the
 patterns which satisfy this constraint. 
That's why this transaction
 should be removed. 
So if you remove more transaction,
 the mining will become more efficient.


Similarly we can say this c2 is, which is,
look at the item set,
the minimum price is less or equal than v.
Suppose this transaction,
the minimum price is already violate this.
Means there's no item which actually
the minimum price is, is less than b.
In that sense this transaction would not
be able to contribute to your mining.
The transaction can't be prune.
So, that's similarly we
can examine like this S.
Suppose this whole transaction,
the profit okay,
range is, it cannot be greater than 25.
Then this transaction
can be pruned as well.
But the subtle thing is sometimes the
whole transaction will be able to satisfy.
But during the mining process,
the trend actually will not
be able to satisfy that gee.
Okay.
Let's look at this process.
Suppose we still take this we want a mine.
Suppose we first find
a frequent items that is b.
We look in the b's projected database.
In this case you per can see,
to an action 40 does not contain b.
So it's,
it's not in the projected database.
Here we have a, c, d, f, h, then c,
d, f, g, h, and c, d, f, g.
Okay.
The interesting thing is, if you look at
this transaction database, you immediately
can chop a off because a is not frequent
anymore if the minimum support is two.
Once you chop a off, actually c,
d, f, h, together with b,
that range getting together, actually is,
cannot satisfy this constraint anymore.
Okay, then this whole
transaction can be removed.
If this one is removed,
h is not frequent in the remaining part.
We can remove h.
And then immediately we will get
single branch c, d, f, g two.
Okay, that b's FP-tree can
be pruned rather quickly.
And of course, we can check b, c, d, f, g.
That one, if you look at it, c, d, f,
g, you will see that range, that profit
range actually is greater than 25, so
the whole thing will become a pattern,
you know, returned.
So you probably can see during
the mining process, you can use
this one to chop up many things,
to make your mining more efficient.
So that's data space pruning.
[MUSIC]

