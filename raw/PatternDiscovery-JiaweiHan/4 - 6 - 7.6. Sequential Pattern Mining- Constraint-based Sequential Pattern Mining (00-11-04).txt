[SOUND] Now we come to study
Constraint-Based Sequential-Pattern
Mining.
What is constraint-based
sequential-pattern mining,
which is very similar to constraint-based
frequent-pattern mining.
But now, the only difference
is now we check the sequence.
Sequential-pattern see, instead of,
you know, no other item set patterns.
If, it shares many similarities
as items that mining.
For example, we may figure out
the constraints could be anti-monotonic.
Monotonic succinct behaviors or
properties.
So the first thing is some
constraints could be anti-monotonic.
What does this mean?
Simply says,
if this sequence violates a constraint c,
then it's super sequence also
violate the constrain c,
then we say, this constraint
is anti-monotonic constraint.
For example, okay.
We look at the first one.
If the constraint says, some of the price
of the sequence must be less than 150.
Obviously, if your current sequence,
the sum of the price is already over $150,
you further mine it,
you add more things into the sequence,
you'll never be able to bring
the sum of the price down to $150.
That's why this one is anti-monotonic and
this pattern, if it violates
the constrains can be tossed away.
Similarly for the minimum while we are not
going to discuss it, you just check it.
Okay?
Then we look at monotonic constraints.
Monotonic simply says, if this
sequence satisfies this constraint,
its super-sequences also
satisfy this constraint.
For example, we look at the first one.
The first one says,
the element count of S is greater than 5,
then you probably can see,
if the count S, you know,
satisfies these constraints,
you add more things into S.
The element count can only grow, so you
will still satisfy this greater than 5.
That's why this monotonic,
once satisfied these constraints
will not need to be checked again.
Then we look at data anti-monotonic.
Data anti-monotonic is a knife used
to prong some part of the data.
That here is prong the remaining
of the sequence data.
Now suppose we look at sequence S
sub 1 with respect to your current
mine sequential pattern, S.
Then if this one violate
the constrain C3 and
this sequence can be prone,
what this mean?
You look at this,
suppose you have a sequence,
your current pattern adding
the remaining part of the sequence.
The sum of this price, violates
this constraints is greater than v.
Simply says, even you add the remaining
part of the sequence into this pattern,
the sum of prices still
cannot reach v $100.
Then these sequence will not be able to
contribute to this S and
its further gross.
To that extent, you can prune this
sequence, S1, C3 without any.
So then we look at succinct constraints.
Succinct constraints means this
constraint can be enforced at
directly by explicitly
manipulating the data.
For example, if you see this S,
constraint says,
must contain iPhone and MacAir.
Okay.
If that's the one, what you can do
is you check the constraints as long
as it contains, iPhone and Mac error,
these items you'll use this sequence.
If they do not contain it,
you can prone those sequences right away,
because you are not interested.
Convertible constraints in
this context is tricky most.
The reasoning is in the past,
we study convertible constraints.
These elements,
these items can be swapped.
For example, for value average S,
suppose this one is itemset
is less than 25,
you can start from the most valuable one.
Then getting the second highest
valuable one, mining in this order by,
you know,
swapping the order in this itemset.
But now in sequence, you simply
cannot swap the order of the elements
in the sequence, because there
are in strictly sequential order.
But what you can do?
Actually, this one is a little trickier,
you need to revise your proof
expand algorithm a little.
Okay.
What you need is you start from
the most valuable elements.
But when you mine it,
when you do projection.
You're not only going to
project the suffix, but
you're also going to predict
something in front of it.
That means you still preserve the order.
You know this current sequence,
this current element is here.
But you find the second most one,
you steal it for the pointer there.
Then you can mine in its value order,
but you still keep the sequence order.
So that's the reason you need
to modify the algorithm to
make the convertible constraint c work for
in this case.
So now we said the constraints
in sequential pattern,
very much like constraints
in item set patterns.
But actually, there are some constraints
that explicitly involve timing.
Okay?
For example, order constraints.
That means some item must
happen before the other.
For example,
you take algebra and geometry,
you see these two courses
must be in front of calculus.
Okay.
That implies the to order.
These constraints is
anti-monotonic in a sense.
If you find somebody violates this order,
then you further mine it
to get more sequences.
Is here violate this order?
So this sequential pattern
should be thrown away,
because it will always
violate this constraint.
Then we look at a minimum gap and
maximum gap constraint.
Suppose we have minimum gap is 1,
maximum gap is 4.
It confines two elements in a pattern,
then this constraints is
succinct in the context.
You can enforce these constraints
directly during the pattern growth,
that's very easy.
When you find any element,
you just check the next one,
the minimal gap must be 1,
but the maximum gap is 4.
You will not check any
further pattern if you
cannot find frequent
[INAUDIBLE] just drop it.
Okay?
The maximum span constraints,
basically you're saying,
the first element and the last element,
their maximum time
allowance is maximum span,
suppose is 60 days,
then this pattern is succinct.
When you find the first element,
you will measure the time is 60 days.
Then beyond 60 days,
those days you can throw them away,
because you can never
satisfy this pattern.
The window-size constraint
simply says previously we
said that events in the element
must happen in the same time.
Now, I allow that
the window-size could be 2.
Simply says,
even you happen the next time slot,
I still consider you happened in
the same element, then I can do mining.
So you have various ways to merge
your patterns into elements.
Finally, we're going to introduce
episodes and episode pattern mining.
This is a little different from
sequential-pattern mining.
In the context, you may give episodes
in serial way and in parallel way.
For example,
you can say A must be in front of B.
That's the serial episodes.
Or you can say,
A can be in partial order of B.
They two can be in parallel,
these are the parallel episodes.
And you also can give
a complicated regular expression.
You can say, A and B are in parallel,
then you can see start times and
see means zero two more times,
then you get it D, then E.
So you will have something
constrained to the parallel way,
something in the zero way.
So this is a regular expression based.
Then for this, we can extend the GSP or
Apriori-like algorithm.
We can solve this problem or we can use
projection-based pattern growth algorithm.
You probably may work out detail for
this kind of methods.
And also, you probably want to see what
is the major differences between say,
mining episodes and
constrain based pattern mining.
I will leave this one as an interesting
question for you to answer.
So finally, I'm going to summarize
the lecture we have discussed so far.
We've introduced the concept
of sequential pattern,
the concept of sequential pattern mining.
Then we also introduced a set of
sequential-pattern mining algorithms,
including GSP,
generalized sequential-patterns.
We including SPADE,
vertical format-based mining and
PrefixSpan, which is
pattern-growth method.
Very importantly, we discussed
the close sequential pattern mining and
introduced close span algorithm.
Finally, we discussed the concept of
constraint-based sequential-patterns and
how to do efficient
mining using constraints.
So we have a bunch of papers.
These are the initial papers people
studying the different sequential-pattern
mining methods and you know,
workout quite interesting research papers.
If you are interested in dig deeper,
you may like to read those papers.
Thank you.
[MUSIC]

