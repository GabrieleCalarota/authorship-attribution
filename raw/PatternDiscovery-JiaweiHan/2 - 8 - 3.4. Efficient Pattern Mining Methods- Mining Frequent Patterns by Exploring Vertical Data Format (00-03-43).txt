[SOUND].
Now, we are going to look at the another
interesting pattern mining method,
is Mining Frequent Pattern by
Exploring Vertical Data Format.
This is method is called ECLAT, or
Equivalence Class Transformation method.
The general philosophy look like this,
okay, in original transaction
database is Horizontal Data Format
in the sense that in every row,
you could connect the ids and
a set of items in this Itemset entry.
Then you can transform this
Horizontal Data Format
to Vertical Data Format like this.
For every Item a,
you will see which connection ids it,
a social with this as Item A.
That means A bought you
which transactions.
What's the benefit of this?
The first thing is you transform
the Itemset into Tid-Lists.
The total size is approximate same.
If every entry, or every id they
have the similar number of fives.
But the way to compute this would
be different with this Tid-Lists.
For example, if you say what is
Tid-Lists of e, you get 10, 20, and 30.
What is Tid-Lists of a,
you get a 10 and 20.
Then how did they arrive ae?
You just intersect them together.
You can see, you intersect this set
with this set, intersect two Tid-Lists.
You derive this,
the Tid-Lists of these ae, this Itemset.
If this one contain sufficient number of
transactions, that means it's frequent,
like two then ae were be frequent.
If this one's infrequent then
you don't need ae to go further,
that's a similar thing as principal.
Then the properties of Tid-Lists
basically say If these two
Tid-Lists is equivalent that means they
have the same set of transactions.
If this one is the subset of the other
one, that simply says the transaction
containing X must always containing Y
because of this one's, this one's subset.
So you probably can see, if we try
to derive frequent patterns based on
these vertical intersection, we just need
to see the size of this connections list.
But there's one interesting method
called Diffset to accelerate the mining.
The reason is that when you get a very
large number of connections, this,
each item may be associated
with a very long Tid-Lists.
Then their intersection,
like this e and the ce,
their intersection could be small,
but their difference could be small.
So, you, you look at the,
the intersection's large,
the difference could be small.
For example, you intersect these
two intersections, 10 and 20.
But the difference is only 1.
So you only keep this,
you don't have to keep tce that
may save a lot of space, okay.
This is the general idea.
Using Diffset you can further
improve this efficiency.
[MUSIC]

