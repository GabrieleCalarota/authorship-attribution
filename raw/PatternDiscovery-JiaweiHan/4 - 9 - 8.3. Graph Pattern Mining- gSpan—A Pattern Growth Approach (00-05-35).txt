[NOISE] Now,
I'm going to introduce you the pattern
growth approach for graph pattern mining.
Especially, I'm going to introduce you
first of such hours in core gSpan,
or I think it's a graph span.
Remember we have prefix span.
Now, we come down to gSpan.
The gSpan is a pattern-growth approach.
The idea is, instead of doing
wen research like Apriori-based,
you have to generate all the k-edge
subgraphs before you go to k plus 1.
Now, we don't do that.
We just take the k-edge you
generate anyone, k-edge graph.
You just look at it, you know,
for this kind of k-edge graph,
which addition edges are still,
you know, frequent.
And you take that one,
add one more edge at a k plus 1 edge.
And then I, see in the data set,
which address associated with k
k sub 1 is still efficient to a grow
that edge wh, I get k plus 2 edge.
Okay, that means you really can
do depth-first search instead of
breadth-first search.
But the major challenge of this method is,
since one graph, you can go
from small to this subgraph in many
different paths, many different ways.
So, if you do not have a control,
you will genet,
generate a tremendous number
of duplicates on graph.
That means, you actually have to check
if you have many different ways,
you want to check each way before you,
because you don't want to miss anything.
Then you will generate
tremendous duplication, okay.
So the way, actually, try to control
it using pattern-growth approach is,
if we can define an order to generate
such graphs, that means we force them
to generate only in one order, rather
than generating in many different orders.
That way we will reduce
of lot of duplicatoin,
okay, then we can generate
an efficient algorithm, okay.
That way we do is,
we were thinking about how to generate
the depth-first search spanning tree.
That means, whether we can flatten
the graph into a sequence using some
depth-first search method.
That means we only allow
you to grow in that way.
Third method created was by Xifeng Yan and
me, published in ICDM 2002, called gSpan.
With gSpan algorithm, the major philosophy
is try to control the order of growth.
Suppose we got a graph like this one.
This one we do not know to grow and
there are many ways to grow, okay?
What about we first define an order.
Suppose the different nodes like vertex,
you say, this is 0, 1, 2, 3, 4, okay.
If you define this,
then [COUGH] what we do is,
we say we grow in order
we call right-most path.
What is right-most path?
It's every time you start
from the lowest one, like 0.
You start to grow.
But when you grow every time
you have multiple ways to grow,
you will always choose
the smartest index at every step.
For example, 0, You can grow to 1.
You can grow to 2.
You can grow to 3.
Which was, smallest one is 1.
So we grow from 0 to 1.
Of course,
from 1 to 2 you have only one way to go.
You, you go from 1 to 2.
But at the 2,
you still have two different ways to go.
You can go to 0, you can go to 4.
If we say you have to go to the smallest
one first, then you get a 2, you got to 0.
You can see this 2 goes to 0.
Okay, then you go from 2, go to 3.
And from 3, you have only one way to go,
you go to 0.
Then this, you don't have
other graph except to 2 to 4.
That's why you go from 2 to 4.
If you grow this way,
you almost think your graph growing
is like a sequential things.
From the graph,
you think they are essentially a sequence.
Then to that extent, you reduce
the generation of any duplicate graphs,
but you still get a complete traverser.
Essentially, the enumeration of the graph
using this right-most path is complete.
Then, the interesting thing
is you can flatten the graph
into a sequence using
the depth-first search.
You'll get a DFS code.
Then you can essentially mine your
graph like a mine set up sequences,
so you can generate very
efficient algorithm, okay.
I'm not going to introduce you
very detailed algorithm, but
you know this is the general spirit.
After you follow this spirit,
you can work out gSpan even by yourself,
or you can read the paper.
So it is an efficient algorithm.
[MUSIC]

