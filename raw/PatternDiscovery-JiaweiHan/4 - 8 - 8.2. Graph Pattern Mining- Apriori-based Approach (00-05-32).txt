Now, I'm going to introduce to you some
interesting graph pattern mining method.
The first one I'm going to discuss
is Apriori-based approach.
Apriori-based approach means we
base on the Apriori principle,
or we call anti-monotonicity property,
of the support.
That means size-k subgraph,
if you say it is frequent,
then if and only if all of its
subgraphs are frequent, okay.
In that sense, if we say we want to grow
size-k plus 1 edge or vertex subgraph.
What do we need is,
just using candidate generation,
is we just, say,
start from size-k any two size-k graph,
like a k-edge or k-vertices.
These kind of subgraph,
we just grow based on these two subgraphs.
They share some common things.
For example, if you get a size-k or
k-edge subgraphs, they are frequent.
You'll get a G and G prime.
Then if G and G prime,
they share k minus 1 common edges.
Okay, that means they,
they have only two edges not in common.
Then you can merge them together.
You generate k plus 1 edge subgraphs.
For this k plus 1 subgraph,
k plus 1 edge subgraph like G sub one.
What you'll still need to do is you can
do candidate elimination by pruning
if any of these G sub 1 k-edge
subgraph is not in this frequent set.
Okay, then you can clone it
because based on the Apriori,
it's impossible this
one can't be frequent.
So, you can think this is
iterative mining process.
You took candidate generation by merging
those graphs if they share k minus
1 common edges.
Okay, then you do candidate pruning
because something you know is not frequent
if any other of the c 1 stay at subgraph
is not frequent, you can prune it.
Then you can do support counting.
That means you count this G sub 1,
how frequent it really is in
your graph data set, okay.
Then if it's not frequent,
we can eliminate them.
Then you can go back to the loop again.
So, this is a typical,
we call, Apriori-based.
You grow one vertex,
grow one edge in different ways.
You can generate bigger and
bigger graph patterns.
So you can see, the interesting thing
is once you see these subgraphs,
if you merge the post
you get two subgraphs.
This part is in common.
Then you have D and E, two vertex.
Okay, of course, you also can son,
consider edges when you grow it.
Suppose we had get it,
two D and E, two vertices.
What you can do is you can
grow in many different ways.
For example, you can constructor D and E
separate but they all link with this edge.
Okay.
Or you can think because they are all C,
we can link in the other one.
Like link another C, or linking in
diagonally C, you can link this, this C.
So you have multiple ways,
even you look at this structure,
you have several ways,
you can go into subgraph structures.
So, it is definitely more complicated
than the item set mining, okay, or
the complexity would be higher, okay.
So, the first such algorithm developed
called AGM developed by a set of
Japanese researcher led by Inokuchi,
published in year 2000.
Called AGM, or you can think is
Apriori-based graph min, mining, okay.
So, this one is every time you
grow one vertex at a time.
But you also can grow
one more edge at a time.
This algorithm developed by Kuramochi and
Karypis in the University of Minnesota.
Published in 2001 called FSG, or
you can think this frequent subgraphs.
So, the performance study
done by this FSG paper
shows that edge growing is more
efficient than vertex growing.
You probably also can imagine because the,
this growing the edge is a little bigger
component comparing to the vertex.
After this,
there are a bunch of algorithms.
For example, whether you want to
store those subchur, substructures,
the frequent substructures before you,
you, you try to grow them,
maybe the substructure can be
shared by other processes, okay.
There are more papers where
going to introduce you, but
you can just read the, the book and
some survey paper on it.
[MUSIC]

