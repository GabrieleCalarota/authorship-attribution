[SOUND] Now we introduce
another new kind of
constraints called
convertible constraints.
What is convertible constraints?
Some constraints could be tough.
For example, this profit average
greater than 20 this constraints.
They're not monotone, not anti-monotone.
Why?
Because, for this item set S, suppose the
current one satisfied these constraints.
You add a very low profit item inside
that would violate the constraint.
But, suppose the current one
violate the constraints,
you add a high profit item inside, and
may finally average may bring to higher
they may satisfy these constraints.
So, that simply says since we do not
know the next item, the profit, value.
So this one we just cannot
use any knives to cut things.
Okay, can we still take advantage
of some kind of pruning?
One interesting way we can do, is we can
sort items in value-descending order.
And we mine the frequent items by using
this value-descending order as well.
For example, we know a is
the highest profit, then g, then f,
so we can get a, g, f in this
value-descending order for the profit.
What would happen in this case?
Okay.
For example if ab, we know this itemset
already violates the constraint c1,
just because the average ab is 20.
It's not a greater than 20.
Then ab star, simply say ab's
projected database, will never be able
to satisfy this constraint, because they,
all the remaining value will be smaller.
To that extent, this C1 is converted
into anti-monotone constraints.
And so we use the pattern
grows in the right order.
That means what's around this one is in
descending order, we'll be able to use it,
a anti-monotone constraint.
What about we sort it in ascending order.
That means the c first, a the last.
Okay.
If that's the case,
this constraint can be changed
into monotone constraints.
But monotone constraints, you know,
the only benefit is you don't have to
check it anymore once it is satisfied.
It does not give you
lots of pruning power.
That's why we still like to do in this
order in the value-descending order, so
it becomes anti-monotone.
No one can use this one as a knife
to prune a lot of parts of search.
But then, another question is,
can we do item reordering and
still using Apriori algorithm.
Unfortunately, the answer is no.
Why?
Let's look at this.
For Apriori algorithm,
if you want to get agf as three item sets,
you want all the subsets.
That means every two item sets
actually will be able to frequent and
pass the constraints.
Then we'll say agf will,
will be possibly be a candidate.
But now you probably can see,
agf's average,
the profit average,
actually is greater than 20.
But gf's average profit is less than 20.
That simply says even when you
get a frequent two item set
violates the constraint, the frequent
three may still satisfy the constraint.
So we cannot use Apriori
pruning in this case.
So, we need to be careful how
to use different algorithm to
accommodate different
constraint pushing methods.
[MUSIC]

