[SOUND] Now we study
the first pattern space
pruning constraints called
pattern anti-monotonicity.
So the first thing we want to know is what
kind of constraints is anti-monotonicity?
Okay.
The definition is if item sets S
violates this constraints.
If the situation is you
add anything to this S,
it still violate this constraints,
then this constraint is anti-monotone.
That implies, we will mine S.
You find S violates this constraint.
The subsequent mining on item
set S can be terminated,
because further mining is useless.
Let's look at this first example.
The first example said,
sum of the price of items at S is less
than or equal to v is anti-monotone.
Let's assume v is $50.
Your current item setting,
your shopping basket for this S,
the price adding together
is already over 50.
What you can do,
the first important thing is you can, for
items that mining,
you keep adding new things.
But clearly you add
more items into this S,
this sum of the prize will never be able
to, you know, lower down to below $50.
That's why this mining on S,
you keep adding new things is hopeless.
This should be dropped.
Then we look at another constraints.
Suppose we say, S.profit,
we look at their range is less than 15.
This one is still anti-monotone.
Why?
Because suppose your profit range,
it could be plus or minus.
Like ab, you know?
That ab range suppose this $40, then you
can see 40 is greater than 15 already.
So, it's already violated
this constraints.
If you add more things in,
no matter positive or
negative, can you make this range,
you know, lower down?
Obviously, even at C, actually the range
will be even bigger, like become 60.
So no matter what things you add in,
you can never satisfy this constraint.
Further mining on ab, you try to add
more things in should be terminated.
Then we look at another one.
WIth a sum of S,
the price is greater than or equal to v.
That one is not anti-monotone.
For example, it still say, v is 50.
Okay.
Then this item says, suppose now
you add the corn shucking basket is
violating this constraint
is less than $50.
What are you going to do?
Add more things in.
And eventually,
maybe it will become over $50.
That's a reason, even the kind of wise
not as violating the constraints.
You still can't add more
things in is possible you can
satisfy these constraints.
So this one is not anti-monotone.
Then we look at another
very interesting one.
This one says,
suppose a current support count,
this S is less than sigma.
Is this one anti-monotone?
It is anti-monotone.
Because if it is less than sigma,
you add more items in.
Remember, you add more items in,
you start from two items sets,
you want to get it three items sets,
for four item sets.
The support will only be lower,
because it will be less frequent.
So, if it's currently lower than
minimum support, you can prune them.
Actually, this one is Apriori pruning.
Because Apriori pruning says
that any time you, you,
you're current items that is
below the minimum support.
So you can prune it out,
you don't have to mine on it.
So that implies Apriori pruning principle,
essentially is pruning with
an anti-monotonic constraint.
[MUSIC]

