Hello and welcome to Programming for
Everybody. My name's Charles Severance I'm
a Clinical Associate Professor at the
University of Michigan School of
Information.
And I'm your instructor for this class.
I'm glad you're here.
So the first thing I always like to talk
about when
I teach a class is who should take 
the class.
This class is a beginning class.
This class is a beginning class for
beginners.
This class is a beginning class for
people who don't know anything about
programming.
And so, I am committed to teaching you
the basics, and not assuming that 
you know anything.
There's no math in this.
There's a light amount of work every week.
I'm focussed more on learning 
than I am about
sort of getting you to be a professional
programmer.
So I also like to talk a little bit
about who I am.
If you like, there is a URL here for the
TED talk
that I gave, the TEDx talk that I gave
about MOOCs.
And you can kind of see the philosophy of
how I do MOOCs.
I think I might have been wearing 
this exact same jacket
and this exact same shirt for the MOOC.
So I won't go into that.
You'll see that I am very
passionate about a few things.
One of the things that I am very
passionate about is open.
And I wrote a book about an open
source project called Sakai, which
is a open source learning 
management system
that's used by many people 
around the world.
I am committed enough that I 
even have a tattoo.
I have, my research area is teaching and
learning tools and expanding sort
of the ways we can use technology to teach
in better and better ways.
And my work with Sakai as well 
as my work
with IMS Learning Tools Interoperability
is part of that.
This tattoo that you see has Sakai
at the middle.
And it has, in a circle, all of the
the, my collaborators that have
implemented
IMS Learning Tools Interoperability.
Although there's hundreds of others, 
there's only
a few that got tattoos, and at Coursera.
And we're going to be using it in this
class, also implements
this IMS Learning Tools Interoperability,
and so you will see how I can
connect tools that I build, plug them
deeply into Coursera,
and really improve, I think, the
pedagogy of my course.
If you want to get a sense of my
sense of humor, just google iPad 
Steering Wheel Mount.
Some people think this is serious.
I call it satire, but I think 
good satire is the
satire that you can't always tell 
if it's satire or not.
So, I want to talk a little bit about
my personal very first programming
experience because it really has colored my
approach to teaching from that very first moment.
So I came out of high school in 1975.
And, we didn't have computers, the family
didn't have a computer.
I did have a hand calculator in 
my senior year
in high school and I thought that was
pretty amazing.
And so I went to college in 
the fall of 1975
and an advisor said you should take one of
these programming things.
We're putting everybody into the
programming class.
And I said oh whatever, 
I don't know, sure.
So, I was a very good student in high
school but in college I was
amazed that they would let me skip
class and they never took attendance.
And I thought I should experiment 
with how well this works.
And this programming class was at 
10:30 in the morning.
And so I was usually very tired 
and I didn't really
want to get up in time to go 
to a 10:30 class.
So I started skipping the classes.
And one time I had that thing that we're
all afraid of when we're attending a
class, and
that is I showed up at a midterm and I
didn't know it was the day of the midterm.
And they handed me a piece of paper and I
had no idea what any of the words meant
because I'd skipped so many classes.
But somehow after that I somehow
recovered.
And, and a few short weeks later
I actually figured out what 
those words meant.
And then I realized, as any 17-year-old
might, that this programming thing
is kind of fun, because if I communicate
properly with this device
it will do whatever I say. And I did a lot
of cool stuff and I caught
up in the class and became one of the
best students in the class, all in one
semester.
And at the end, I had pulled my grade up
from a Fail to a D.
But at the same time I was hooked, and I
immediately changed my major to computer
science, and then I went on to finish
my Bachelor's, Master's, and PhD, all
inside computer science.
And so I understand that when you
first meet programming, you're likely to
be confused.
I know I was confused, and I turned out to
be pretty good at it.
But my first reaction was how 
confused I was.
So accept the fact that you're 
going to be confused.
Relax, enjoy it.
You're going to learn a lot.
And you might actually really like this
even though you think you're not going to.
So let's talk a little bit about the
course.
The course is really based on a
textbook I have written called 
Python for Infomatics.
And this book is 100% free.
Every copy is, all the electronic formats,
PDF, Mobi, ePub, HTML, all free.
And you can buy a printed copy of the
book if you like, but you don't have to.
For $8.99, that's all the book costs.
It's not a very thick book.
It's $8.99, but don't bother buying the
book if you don't want to buy the book.
And what's really cool is this is not an
arrangement with the publisher.
At the end of the class you can 
keep these copies
and you can give these copies 
to other people as well.
So this is truly open materials 
for this course.
In addition, my slides, audio, video, and
even my autograding software
is all either open source or licensed with
a Creative Commons Attribution license.
And that means that you can take the
videos, the PowerPoints, the whatever.
We give you a website that will give
you all these materials in an easily
downloadable and
remixable format. And this website 
is part of a
movement we have here at the 
University of Michigan,
like many other universities, that we call
Open Michigan, and it is the idea of
taking courses, not just this course but
hundreds and
hundreds of courses and putting up the
materials.
I have spent extra time to make my
materials in a form
that you can actually reuse and remix and
adjust them to your needs.
Because I really want to empower teachers.
We're all going to learn in this class.
But what I think is the most 
important thing
is to create a whole generation of
teachers who
are capable of teaching a basic
programming class locally,
perhaps in their own language 
in small classes.
These giant classes are great because they
get the word out.
But what we do is, we create a large
learning community,
and some people do well in that, but not
everybody does.
And so, if, if I truly want to believe
in getting programming to be truly for
everybody,
I need to get to the point where we have
lots of teachers, not just me teaching
lots of people.
Although I'm really enjoying teaching 
lots of people.
And so there's a link there, I'll have a
link in the
class that will link you to the open
educational resources in the class.
So as I mentioned I'm, my whole research
is playing with new pedagogies
and new technologies in 
teaching and learning.
I want to experiment with this.
I want to, the thing that's cool about
MOOCs and Coursera
is the ability to teach at scale 
which is, I think,
is unprecedented and it makes me as a
teacher think very
carefully like wait a second, how can I
teach at scale?
Can I still do a good job 
teaching at scale?
And I find that I have to start building
cool technology.
So maybe you've not taken another
Coursera course,
but here's our Coursera user interface.
The video lectures tend to be the core of it.
And interspersed among the video lectures
you will see little assignments, and the
assignments have, there will be 
quizzes as well.
But the assignments end up with this 
terminal icon and you click on them.
There's also sort of a video that goes
along with each assignment.
When you click on the terminal video you
come into this little autograder.
And so I've built this autograder, this
autograder is software that I have created
that autogrades your programming
assignments and then automatically
instantly sends a grade back to Coursera.
And if you look at this autograder, and
I'll talk more about this
in the course, you type your Python code
here. I hope you'll actually be
able to run the code on your laptop and
then just paste it in here,
but some people will actually
just write all the code inside here.
You run the code by pressing Check Code
and your output comes here,
the defined output, and the problem is
there as well.
And the program automatically checks to
see if your output matches.
And it looks at your code a little bit to
make sure you're not cheating, for example.
But it actually finishes grading and when
you submit your grade, you get a grade.
The other thing that I've done is,
an example
of this is in the Week 1 extra credit.
So this first week even has 
extra credit in it.
I'm not going to say everyone has to have
a laptop and everyone has to install
Python, but
if you have a laptop and can install
Python,
I would really love it if you did.
So I'm going to give you extra credit if
you do that.
And the way you'll prove that you've
actually
successfully installed Python is take a
couple of screenshots.
And upload them to what I call the, my
social peer grading system.
And what you'll do is you will upload 
two screenshots.
It tells you what to do.
Upload two screenshots and then students
will grade each other's screenshots.
Now if you've used Coursera before, you know 
that the peer grading takes a while.
This peer grading, if someone else has
already turned in their assignment
you can upload your assignment, and then 
within a couple of minutes grade
the other assignments that are waiting to
be graded, and then you're done!
And so, as long as you're not the 
first person or
the last person, you get almost instant
feedback and you
can almost instantly finish your grading
and be completely done
with the assignment, because really this
is not a hard assignment.
Most Coursera peer grading is writing
assignments that are a little more challenging.
This is really easy.
You just gotta check somebody's screenshot
to see if they did the right thing.
So we will have several assignments that
are done through
this social peer grading.
And my goal, and I built this software.
And my goal is to make it so that
you could submit your stuff, you could 
do some grading,
and you could be done in 10 or 15 minutes.
Rather than peer grading take a long time.
So this is an experiment and it's
something that I was able to build.
Because for the pedagogy of this course
I have a lot of these like check-off
assignments where
it's like did you do it, and it's really
easy to grade.
You look at it and go like yeah, you did
the right thing.
Or you'd say no they didn't, and give
them some feedback.
So, and then, even the grading, you're
going to have to look at this little
page to see the grades that you got in
these externally hosted tools.
As I mentioned, I would like you to
install Python if you possibly could.
It's optional.
You will be able to do whole course on a,
on a phone, although writing all this
code on a phone is crazy.
But, you know, there are crazy
people in the world.
And so I will give you this extra credit
assignment.
Some people might ask what version of
Python we're using.
There are Python 2 and Python 3, and
we're going to be using Python 2 
for this class.
All the skills that you learn 
in Python 2

will transfer if you really needed 
to do Python 3.
There's tiny changes.
The market is slowly but surely
transforming from Python 2 to 
Python 3
Another technical problem is that 
I know some of you
live in countries that don't allow the
use of YouTube.
And so I'll have some videos that I cannot
include in
Coursera because of copyright
restrictions, but
I can point to them in YouTube.
And you'll just not be able to see them.
And don't worry too much about that.
They're usually cute or funny or
instructive, but they're not essential.
So everything that's essential I will
have in the class, and if
you're in a country that can't use
YouTube, I am sorry about that.
But I have not put anything that's
essential for the class up on YouTube.
So let me tell you a couple other things
about the course.
One of the things that is really cool
about Coursera is the notion of community
teaching assistants.
Sue, Mauro, and Mazen are my community
teaching assistants.
They come with me from my Internet History
and Technology class.
They're my community teaching assistants
there, and they've helped
me kind of make this class, and that's
really cool.
There will be many community teaching
assistants.
These three are my leads.
And there will be many community teaching
assistants, and you're going to
find that it's really essential what they
do in the class.
Especially this first time through, cause
we're going to
need to be watching all kinds of things
happening.
Another thing that I do that's kind of
interesting and
cool is what I call face-to-face 
office hours.
I have quite an active travel schedule.
And when I can, as often as I can,
around the world wherever I happen to
be giving a keynote speech or whatever,
I go to a coffee shop or some other 
public place, and
say from ten to noon, I'll be here at this
coffee shop.
At a Starbucks in Amsterdam, we had 15 people
show up at the Starbucks in Amsterdam.
Where else?
One's in London there, that's Barcelona,
and that's Seoul, Korea.
We had three people show up 
at Seoul, Korea.
And and so I've got a series
of videos from this, it's called 
office-hours.dr-chuck.com.
And it'll redirect you to a YouTube
playlist.
And, if you come to office hours I have a
sticker for you.
I will give you personally a sticker which
is the logo for the course.
So you can look forward to that.
When we meet in person I will have a 
sticker for you.
Another thing that I've been doing lately,
not so much to help in
learning the in course, but because there's
a lot of public discussion about MOOCs.
And I think sadly most of the people who
are doing the public discussing about MOOCs,
other than those who are actually 
involved in it,
most of the people doing the
public discussing about MOOCs
or the public talk about MOOCs are not
actually involved in them and so they are
saying really
uninformed things about MOOCs. And so one
of the things that
I'm passionate about is getting your voice
to be heard.
Now I have this YouTube channel, and if 
you are willing,
go to the voices.dr-chuck.com
and add, send me
via Twitter or something a link if you
record one of these little short 
two-minute videos.
And you can take a look at the videos.
They talk about who you are, what your
education is, and what you like about
MOOCs.
They're, they're kind of different.
They don't all have to be the same.
But if you're interested, I'd love to see
your, you as part
of my little voices of the, of the
students in MOOCs project.
So programming courses can be very
challenging.
One of my goals is to teach you how to
take a programming class.
So that you can take other programming
classes on
Coursera or elsewhere and be successful in
those classes.
I think programming is wonderful,
programming for me is joyful
and feels like artistic and I just, I
get endorphins.
And some people look at a sunset and get
excited,
I look at really beautiful code and I get
excited.
But part of the problem with programming
is if
you don't learn the language or don't, 
you don't
see the beauty until you kind of
understand the
basics, so it's a little clunky at the
beginning.
And even the first like five weeks of this
class you might be
scratching your head and thinking like,
what the heck is he talking about?
And so the key thing is not to try to
memorize everything.
The key thing is to learn or accept the
fact in that the first half of the class
I'm describing for you a big picture that
you're not
going to understand until you understand
all the small pieces.
So I'll talk in chapters two,
three, four, five, and six
about these things that seem small
and insignificant.
And it's really not till chapters seven
through ten that the
pieces start to come together and you go,
like, I get it.
So it helps sometimes to look forwards and
backwards in the material.
Don't just look at the paragraph.
If you're looking at a paragraph and it
doesn't make sense, forget about it, 
come back later.
Look way down at the end of the book, look
at the beginning of the book.
Just bounce around, ask people.
If you're having trouble on 
assignment four, go
back and redo assignment one 
or assignment two.
And that's because there's no way 
that I can,
one step at a time, teach you with perfect
understanding, because I'm teaching you a
big complex picture
with little pieces of view at a time.
And it doesn't make sense until you've
made it all the way through.
So if it doesn't make sense in week
seven, we've got a problem.
If you're a little confused, 
just trust me.
Just learn what I'm trying to teach you,
and don't just do the homework.
Because you will find that if you do the
homework
for assignment week one it's like, well
that was easy.
And you don't learn anything.
And then you do assignment two, 
and that was easy.
Assignment three, that was 
a little harder.
And you didn't look at the lectures,

didn't read the book, or didn't do 
anything? Then it's,
week four will be harder, and then you'll
be like what the heck is he talking about?
And then you'll be lost.
So learn what I am trying to teach you.
Trust me, trust me that, that 
what I am telling you
is going to come together and 
make sense at the end.
So learn what I'm trying to teach you, at
the moment I'm trying to teach you.
So don't just do the homework and go like,
whew, I'm done.
This is not a regular class.
This is a class where you're supposed to
learn something.
So trust that I put only what I think is
essential in this class and I'm not
going to waste your time.
But don't take that as I'm just going to
do the homework and not learn anything,
because at
the end of the day you won't learn a
thing, you know, if you just do the
homework.
Okay, if you feel stuck take a break,
relax.
Concentrating, thinking more deeply,
beating yourself up,
that doesn't help.
Go take a walk.
Come back.
It'll make more sense.
Ask somebody.
We just want you to learn, 
one way or the other.
Okay?
The grades and the homework, that's
going to be easy.
Okay.
So this is the first time the class has
been taught, first time.
I am using all kinds of crazy technology.
I'm using features in Coursera that 
no one's ever used before
that just were invented for, not
for me, but
for many people, but I'm the first
one that's going to use it.
We're plugging these tools in, I'm building
new autograders, I'm building all 
these things.
It could mess up, it could fail.
I could be confused.
I could be scrambling and fixing.
I could lose a bunch of grades.
But if we have a meltdown, relax.
I will watch the meltdown, I will fix the
meltdown, I will adjust deadlines.
Stick with me on this, okay?
Help me through it.
Help tell me how to make this 
software better.
I know the first time there's going 
to be problems.
But after that I hope that we have
software and a methodology that 
everybody can use.
And you can tweet me.
I'm always watching Twitter even when I'm
sort of out of the country.
So tweet me if something seems to be
broken and I will get
right on it and I will try to fix it as
soon as possible.
And when you tweet me, I'll end up with
some screen like this.
I mean, I literally love fixing the code
that you're working with.
And, I mean, I just get a charge out of it,
like, woah, it's not
quite right but I figured out what's wrong
and like [SOUND] and it's all 
working for you.
And so, so this, for me, is fun.
The meltdown's not upsetting to me.
I hope we have no meltdowns, then I'll be
very proud.
But if we have a meltdown, I will be on it
and I'll fix it, trust me.
And then when we get all done with this,
there's a graduation ceremony.
There's a graduation ceremony toward the
end of the class.
I tape this graduation ceremony with my
good friend Curt Bonk and, and so
look forward to the, stick with it, and
look forward to the graduation ceremony.
And so that's pretty much all I have for
this beginning lecture.
I am glad that you're sticking with it
and I'm glad that you're giving 
this a try.
And I really look forward to you,
interacting with you, on this class.

